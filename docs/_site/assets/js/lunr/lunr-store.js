var store = [{
        "title": "Getting Started with BeautyOnCode",
        "excerpt":"Welcome to BeautyOnCode!   This blog is where I share insights and experiences as a developer, from technical tutorials and deep dives into coding concepts to reflections on career growth and balancing tech with personal life. Whether you’re a seasoned developer, a tech enthusiast, or someone looking to dive into the world of coding, there’s something here for you.     What You’ll Find on Beauty on Code   1. Technical Tutorials  Practical guidance on front-end and back-end technologies:   This section includes practical tutorials covering front-end and back-end technologies. Whether you’re working with JavaScript frameworks like React or backend solutions like Django and AWS, these posts are aimed at providing clear and actionable guidance.   2. Technical Articles  Dive deep into programming concepts:   These articles provide a deeper understanding of various programming topics. Whether you’re looking to understand the inner workings of a JavaScript framework or the intricacies of a programming language, these articles are for you.   3. Career Development and Lifestyle  Guidance on career growth and work-life balance:   Articles on career development in the tech industry. Whether you’re looking to break into the tech industry or advance your career, these articles are aimed at providing actionable advice to help you achieve your goals.   How to Navigate This Blog   Use the Categories and Tags:   Each post is tagged and categorized, so you can explore topics like JavaScript, Python, AWS, and more with just a few clicks. Look for topics you’re interested in under the Categories menu.   Check Out Series for In-Depth Topics:   For multi-part topics, I’ve organized posts into series. If you’re diving into a new subject or following a complex tutorial, you’ll find all parts linked together for easy access.   Popular Posts to Get Started:  Linux essentials  → Giới thiệu về Linux   → Làm quen câu lệnh và hệ thống tập tin trong Linux   → Quản lý hệ thống tập tin trong Linux   Javascript essentials  → Điều gì xảy ra khi chạy một chương trình JavaScript?   Python essentials  → Khám phá đại bản doanh Python series overview   → Python có thể dùng để làm gì nhỉ?   → Lớp trong Python   → Iterable, iterator và generator trong Python   → Làm game Hangman với Python   → Không gian tên(namespace) và phạm vi(scope) trong Python     That’s it!  ","categories": [],
        "tags": [],
        "url": "/docs/getting-started/",
        "teaser": null
      },{
        "title": "Categories Overview",
        "excerpt":"Welcome to the Categories Overview of Beauty on Code!   This page will help you quickly find the content that matches your interests or needs. The blog is organized into several key categories, each offering insights into different aspects of coding, career development, and personal reflections. Explore each section to find tutorials, stories, and tips that will help you grow as a developer and navigate your journey in the tech world.     1. Programming &amp; Development   Python   A deep dive into Python, from basics to advanced concepts, with tutorials and tips for building powerful applications.   Popular Posts:     Beginner’s Guide to Python   Chiếc máy tính PI(Python Interpreter)   Mô đun và Gói trong Python   I/O trong Python   Mô đun và Gói trong Python   Lỗi và xử lý ngoại lệ trong Python   Cấu trúc dữ liệu​ trong Python        Điều khiển luồng dữ liệu trong Python       Advanced Python:            Lớp trong Python       Không gian tên(namespace) và phạm vi(scope) trong Python       Iterable, Iterator và Generator trong Python       Nguyên tắc SOLID trong lập trình hướng đối tượng (OOP) – thực hành cùng ngôn ngữ Python       Hàm trong Python là first-class object           Have fun with Python:            Làm tròn đúng hai chữ số thập phân trong Python       Giúp robot Reeborg vượt thử thách       Làm game Hangman với Python       Lấy giá trị trong dict sao cho xịn(Python best practices)           Django   Learn how to build web applications using the Django framework, from basic setups to more complex integrations.   Popular Posts:     Relation fields in Django Rest Framework Serializer   Export zip of multiple csv files in Django   Export docx file with python-docx in Django app   Algorithms  Explore common algorithms and data structures, with clear explanations and code examples to improve your problem-solving skills.   Popular Posts:     Tìm kiếm nhị phân(binary search)   [Leetcode] 94. Binary Tree Inorder Traversal   [Leetcode] 190. Reverse Bits   Frontend   Focused on front-end development, covering topics like HTML, CSS, JavaScript, and frameworks such as React.   Popular Posts:     JavaScript            Khai báo biến với var, let và const trong JavaScript       Điều gì xảy ra khi chạy một chương trình JavaScript?           CSS trong JS là gì?   Chiến lược tải, thực thi code JavaScript   Module bundler là gì? Parcel – một bundler nói “không” với config   Backend     Kiểm tra query params và chuyển đổi kiểu dữ liệu khi làm API với NestJS   Tìm hiểu về DNS   2. Tools &amp; Technologies   DevTools   Enhance your development workflow with tools that boost productivity, such as code editors, version control, and debugging tools.   Popular Post:     Gỡ lỗi chương trình   Trực quan hóa khi chạy mã chương trình   Chrome Extensions hữu ích dành cho Frontend Developer   Linux  Learn the basics and advanced tips for using Linux in development, including command-line tools and system administration techniques.   Popular Posts:     Giới thiệu về Linux   Giới thiệu về CLI và các câu lệnh làm việc với file trong Linux   Chuyển hướng câu lệnh trong Linux   Quản lý hệ thống tập tin trong Linux   Làm quen câu lệnh và hệ thống tập tin trong Linux   Bài viết ngắn (Short Posts)  This category features quick reads, tips, and tricks to help developers save time and solve everyday problems efficiently.   Popular Posts:     Short Tips for Efficient Debugging   3. Tech Career &amp; Development  Personal Reflections &amp; Insights  (General insights across multiple posts) This category shares my thoughts on life as a developer, balancing work and personal life, and the challenges faced along the way.   Popular Posts:     (TBD)  ","categories": [],
        "tags": [],
        "url": "/docs/categories-overview/",
        "teaser": null
      },{
        "title": "Series Overview",
        "excerpt":"Welcome to the Series Index of BeautyOnCode!   This page highlights various learning series that delve into key programming and tech topics. Each series is carefully curated to help you explore, learn, and master different aspects of software development. Explore the series below to start your journey!  1. Series: Tìm Hiểu Về JavaScript   This series covers a deep dive into JavaScript, from the fundamentals to advanced concepts. Whether you are a beginner or looking to sharpen your skills, this series is perfect for mastering JavaScript in web development.      Link to Series on Blog: Tìm Hiểu Về JavaScript - Beauty on Code   Link to Series on Viblo: Tìm Hiểu Về JavaScript - Viblo   Main Articles:          Giới Thiệu Các Bài Viết Về JavaScript       An introduction to key JavaScript topics and articles on the blog.            Chơi Cùng JavaScript       Experimenting with JavaScript through practical exercises and examples.            Chiến Lược Tải, Thực Thi JavaScript       How JavaScript loading and execution work under the hood.            Điều Gì Xảy Ra Khi Chạy Một Chương Trình JavaScript       Understanding the process when a JavaScript program is executed.            Hoisting Trong JavaScript       A deep dive into hoisting in JavaScript and how it affects variable declarations and functions.            Scope Trong JavaScript       Understanding the scope in JavaScript and its role in variable access.            Lexical Environment Trong JavaScript       Exploring the concept of lexical environment in JavaScript, an important concept for closures.            Khai Báo Biến Với var, let Và const Trong JavaScript       How to declare variables in JavaScript with var, let, and const, and their differences.       2. Series: Linux Dành Cho Lập Trình Viên  This series is a great introduction to the world of open source, focusing on Linux. You’ll get to know Linux commands, popular tools, and how to manage files and source code in a Linux environment.      Link to Series on Blog: Linux Dành Cho Lập Trình Viên - Beauty on Code   Link to Series on Viblo: Linux Dành Cho Lập Trình Viên - Viblo   Main Articles:          Làm Quen Linux Dành Cho Lập Trình Viên       A beginner’s guide to Linux for developers, introducing key concepts.            Giới Thiệu Về Linux       An overview of Linux, its history, and its significance in the developer ecosystem.            Làm Quen Câu Lệnh Và Hệ Thống Tập Tin Trong Linux       A hands-on introduction to basic Linux commands and the file system structure.            Quản Lý Hệ Thống Tập Tin Trong Linux       Understanding how to manage files and directories in Linux.            Chuyển Hướng Câu Lệnh Trong Linux       Redirecting commands in Linux to handle input and output effectively.            Giới Thiệu Về CLI Và Các Câu Lệnh Làm Việc Với File       Exploring the command-line interface (CLI) and essential file manipulation commands.       3. Series: Khám Phá Đại Bản Doanh Python  This series takes you on a journey to explore Python, one of the most versatile and powerful programming languages today. From basic syntax to advanced concepts, this series covers all you need to get started with Python.      Link to Series on Blog: Khám Phá Đại Bản Doanh Python - Beauty on Code   Link to Series on Viblo: Khám Phá Đại Bản Doanh Python - Viblo   Main Articles:           Khám Phá Đại Bản Doanh Python Series Overview       An overview of the series and what you’ll learn about Python.            Python Có Thể Dùng Làm Gì Nhỉ?       Discover the different uses of Python in web development, automation, data science, and more.            Ai Đã Thành Công Cùng Python?       Learn about successful individuals and companies that have thrived using Python.            Bắt Đầu Với Python       A beginner’s guide to setting up Python and writing your first Python program.            Tài Liệu Học Và Nghiên Cứu Python       Resources for learning and studying Python, from books to online tutorials.            Chiếc Máy Tính PI (Python Interpreter)       Understanding how Python works with the Python interpreter (PI).            Điều Khiển Luồng Dữ Liệu Trong Python       Learn about controlling data flow in Python using conditionals and loops.            Cấu Trúc Dữ Liệu Trong Python       Dive into Python’s data structures, such as lists, dictionaries, and sets.            Mô Đun Và Gói Trong Python       Understanding modules and packages in Python for code organization and reuse.            I/O Trong Python       How to handle input and output operations in Python, including file handling.            Lỗi Và Xử Lý Ngoại Lệ Trong Python       Error handling and exceptions in Python to ensure reliable code execution.            Không Gian Tên (Namespace) Và Phạm Vi (Scope) Trong Python       Exploring namespaces and scope in Python to manage variable access.            Lớp Trong Python       Object-oriented programming in Python: how to define and use classes.            Iterable, Iterator Và Generator Trong Python       Understanding Python’s iterators, generators, and how they work with loops.       4. Series: Các Bài Viết Ngắn  Short, insightful articles on various tech topics, including news, resources, and quick tips for developers. This series is perfect for quick reads that provide valuable knowledge in bite-sized pieces.      Link to Series on Blog: Các Bài Viết Ngắn - BeautyOnCode   Link to Series on Careerly: Các Bài Viết Ngắn - Careerly   Link to Series on Viblo: Các Bài Viết Ngắn - Viblo  ","categories": [],
        "tags": [],
        "url": "/docs/series-overview/",
        "teaser": null
      },{
        "title": "Most View Posts",
        "excerpt":"Welcome to the Most Viewed Posts on Beauty on Code! These are some of the most popular posts that readers have found particularly helpful. Explore these articles to gain insights into frequently searched programming topics and practical tutorials.   Top Articles     Introduction to Linux for Programmers   A comprehensive beginner’s guide to Linux, covering essential commands and tools that every developer should know. This article is a must-read for those looking to get comfortable with Linux basics.      JavaScript Scoping and Closures   Learn the fundamentals of scoping in JavaScript and how closures work, a critical concept in advanced JavaScript programming. This post explains complex topics in a clear, accessible way.      Debugging in Python: Tips and Tricks   Practical debugging techniques for Python developers, covering common errors, debugging tools, and best practices to make your code error-free and efficient.      Basic Bash Scripting for Developers   This article introduces the essentials of writing scripts in Bash, helping developers automate repetitive tasks and streamline workflows in a Linux environment.      Getting Started with Git and GitHub   A beginner’s guide to Git and GitHub, covering basic commands, version control concepts, and tips on using Git effectively in collaborative projects.      Exploring JavaScript Hoisting and Variable Declaration   Dive into JavaScript hoisting and the differences between var, let, and const. This article explains the subtle details of variable declarations and why they matter in JavaScript development.      Python Modules and Packages Explained   This guide covers how to organize and reuse Python code with modules and packages, making it a valuable resource for Python developers who want to structure their projects better.      File Management and Redirection in Linux   A practical guide to managing files and directories in Linux, as well as using redirection to control input and output for commands. Essential knowledge for developers working in a Linux-based environment.      Introduction to Object-Oriented Programming in Python   This post offers an accessible introduction to object-oriented programming (OOP) in Python, explaining concepts like classes, inheritance, and encapsulation.      Understanding Lexical Environment in JavaScript   Explore how JavaScript’s lexical environment works, an important concept that impacts how functions access variables.   This list will update regularly to reflect the latest trends and reader preferences. Stay tuned!  ","categories": [],
        "tags": [],
        "url": "/docs/most-views/",
        "teaser": null
      },{
        "title": "How to Use Blog",
        "excerpt":"Welcome to Beauty on Code! This blog is designed to be a comprehensive resource for developers at all stages, covering topics from beginner fundamentals to advanced techniques in programming and technology. Here’s a quick guide to help you navigate and get the most out of your visit.   Navigating the Blog  Categories  Content is organized into Categories to help you find specific topics faster. Browse through categories like Programming Fundamentals, JavaScript, Linux for Developers, Python, and more to explore all articles related to your interests. Check out the Categories Overview page for a breakdown of all available categories.   Series  If you prefer a structured, step-by-step learning path, explore our Series section. Each series covers a specific topic in-depth, with articles organized sequentially. Popular series include JavaScript Deep Dive, Linux for Developers, and Exploring Python. Visit the Series Index for a complete list.   Most Viewed Posts  New here? Start with the Most Viewed Posts page to see the most popular articles. These are highly recommended by other readers for their in-depth explanations and practical tips. It’s a great way to get familiar with key topics!   Finding Specific Content  Search Function  Use the Search bar at the top of the page to quickly locate articles by keywords or specific topics. This is helpful if you’re looking for a particular concept or tutorial.   Tags  Each article has Tags that relate to its topic or subtopics. You can click on tags to find related articles and explore similar content across different categories.   Content Types and Learning Paths  Tutorials  Step-by-step guides on various programming tasks, from basic concepts to complex projects. These tutorials are great for hands-on learning.   Guides and Overviews  These articles provide a thorough overview of programming concepts and best practices, helping you understand the “why” behind the code. Check out the Series if you prefer learning in a more comprehensive format.   Quick Reads  If you’re short on time, explore the Quick Reads series for bite-sized articles that cover tech tips, news, and insights. This section is ideal for brushing up on knowledge and staying updated with tech trends.   Staying Updated  Subscribe  Sign up for our newsletter to receive the latest posts directly to your inbox. Subscribing ensures you don’t miss out on new tutorials, series, and guides.   Social Media and External Platforms  Follow Beauty on Code on social platforms like Viblo and Fanpage for additional content, discussions, and updates.   Interacting with the Blog  Commenting  At the end of each article, you’ll find a comments section where you can ask questions, share feedback, or join discussions. Feel free to engage with other readers and contribute to the community.   Sharing  If you find an article helpful, consider sharing it with others on social media or via email. Your shares help others discover valuable content and support the blog’s growth.   Co-host articles  If you have valuable content that you would like to share with the community, consider co-hosting an article on Beauty on Code. Reach out for more information on collaboration opportunities.   Making the Most of Your Learning  Bookmarking Important Articles  For topics you want to revisit, make use of your browser’s bookmark feature. Many readers find it helpful to keep key articles on-hand for future reference.   Practicing as You Learn  Many articles include examples and exercises. Try coding along or testing out suggestions in your development environment to strengthen your understanding.   This guide should help you explore and get the most value from Beauty on Code. Happy learning, and feel free to reach out if you have any questions or need guidance on specific topics!  ","categories": [],
        "tags": [],
        "url": "/docs/how-to-use/",
        "teaser": null
      },{
        "title": "Tech Resources and Tools",
        "excerpt":"Welcome to the Resources &amp; Tools page on Beauty on Code! This section gathers valuable links, tools, and references that complement the tutorials and guides on the blog. Here, you’ll find developer resources, programming tools, and recommended learning materials to help you expand your knowledge and build your skills.   1. Coding Tools  Visual Studio Code (VS Code)  A powerful, free code editor widely used by developers. Many of our tutorials recommend VS Code for its versatile plugins, debugging tools, and user-friendly interface. Download VS Code.   Git and GitHub  Essential tools for version control and collaboration. Our Git and GitHub articles guide you through using these tools to manage code efficiently. Git Download | GitHub   Node.js  JavaScript runtime for server-side development. Many JavaScript tutorials on the blog require Node.js, which lets you run JavaScript outside the browser. Download Node.js   2. Linux Essentials  Linux Command Line Basics  Resources for learning Linux basics and command-line essentials. Our Linux for Developers series offers insights and tutorials for beginners.   Bash Scripting  For automating tasks in Linux, Bash scripting is a must-know skill. Explore our guides on Bash scripting to get started, then refer to the GNU Bash Manual for more details.   3. Python Programming  Python Official Documentation  Comprehensive and detailed resources for Python developers. Our Python tutorials often reference sections of the official documentation to support in-depth learning. Python Documentation   Python Package Index (PyPI)  The go-to source for Python libraries and tools. Discover libraries recommended in our Python series and expand your toolkit. Visit PyPI   4. JavaScript Resources  Mozilla Developer Network (MDN) - JavaScript Guide  An excellent, beginner-friendly resource for JavaScript documentation and guides. Many JavaScript articles on this blog reference MDN’s insights on functions, scoping, and closures. MDN JavaScript Guide   Node.js Documentation  For server-side JavaScript, the Node.js documentation provides a wealth of information. This is helpful for backend topics in our JavaScript series. Node.js Documentation   5. Online Coding Platforms  LeetCode  Practice coding challenges and algorithm questions. Articles related to algorithms and problem-solving often recommend LeetCode for hands-on practice. Visit LeetCode   Viblo  A local resource where I also share tutorials, especially for Vietnamese-speaking readers. You’ll find many articles cross-posted here, expanding access to tech insights. Visit Viblo   6. Additional Learning Resources  FreeCodeCamp  For free coding courses and interactive tutorials. Many blog articles link to FreeCodeCamp as a beginner-friendly source for HTML, CSS, JavaScript, and Python. Visit FreeCodeCamp   Coursera and edX  Online learning platforms offering structured courses by universities and industry experts. For a deeper dive, especially on advanced topics, these platforms can complement the articles here.   7. Recommended Extensions  Prettier  A code formatter recommended in tutorials to ensure clean, readable code. Works seamlessly with VS Code. Get Prettier   Live Server  Launch a development local server with live reload features for static &amp; dynamic pages. Great for web development tutorials on the blog. Get Live Server   GitLens  Supercharges Git capabilities in VS Code, making it easier to track changes. Get GitLens   This page should help you easily find and access tools and resources referenced in tutorials on Beauty on Code. Explore these links to enhance your coding toolkit and support your learning journey.   ","categories": [],
        "tags": [],
        "url": "/docs/resources-tools/",
        "teaser": null
      },{
        "title": "Helpful Articles",
        "excerpt":"Welcome to the Helpful Articles page on Beauty on Code! Here, I’m sharing a selection of articles I found particularly inspiring, useful, and aligned with my blog’s mission to help developers grow. These resources offer fresh ideas, insights, and unique approaches to programming topics that I may expand on in future posts.   Web Development     Exploring the browser rendering process   Why These Articles?  Each article listed here provides practical insights or introduces new perspectives that I found particularly valuable. Sharing these with you is my way of highlighting resources I consider worthwhile. Some of these articles may serve as a foundation for future blog posts on Beauty on Code as I continue to explore topics that support developers in their journey.   ","categories": [],
        "tags": [],
        "url": "/docs/helpful-articles/",
        "teaser": null
      },{
        "title": "Blog and Authors",
        "excerpt":"Welcome to the Blog and Authors page on Beauty on Code! Here, I’m excited to share a collection of other blogs and authors that I follow regularly. These creators produce high-quality content, offer unique perspectives, and dive into topics that resonate with me as a developer. I hope you’ll find their work as inspiring and helpful as I do.   1. Development Blogs  CSS-Tricks  A fantastic resource for all things CSS, HTML, and front-end development. CSS-Tricks covers a wide range of topics from responsive design techniques to accessibility, providing practical guides and insightful tutorials. If you’re working on front-end development, this is a must-follow blog. Visit CSS-Tricks   Dev.to  A community-driven platform where developers share tips, tutorials, and stories. The posts range from beginner-friendly guides to advanced discussions on tech topics. It’s a great space to discover new ideas and connect with other developers. Visit Dev.to   Real Python  A comprehensive resource for Python developers. Real Python covers Python programming, web development, and data science. I find their tutorials to be well-structured and practical, making it a valuable source for anyone interested in improving their Python skills. Visit Real Python   2. Authors and Tech Writers  Kent C. Dodds  Known for his expertise in JavaScript, React, and testing. Kent shares practical insights on writing clean, maintainable code and building applications efficiently. His blog and YouTube channel are great resources for anyone working with JavaScript and modern frontend frameworks. Visit Kent’s Blog   Dan Abramov  A core member of the React team at Meta and a leading voice in the JavaScript and React communities. Dan’s articles often provide in-depth explanations of React concepts, helping developers better understand how React works under the hood. Visit Dan’s Blog   Swyx (Shawn Wang)  Swyx is a developer advocate and speaker who writes about learning in public, React, and JavaScript. His blog and social media presence offer insights on new technologies and developer productivity. Visit Swyx’s Blog   3. Other Notable Blogs  Smashing Magazine  Smashing Magazine publishes detailed articles on web design and development, with a strong focus on UX/UI, accessibility, and front-end best practices. Their expert contributors share case studies and practical tips that are useful for designers and developers alike. Visit Smashing Magazine   AWS News Blog  The official AWS blog is my go-to source for updates on Amazon Web Services, cloud computing tutorials, and best practices for building scalable applications on AWS. If you’re interested in cloud computing and AWS tools, this is a blog worth following. Visit AWS News Blog   Martin Fowler  Martin Fowler, a prominent software engineer and author, writes about software architecture, refactoring, and agile methodologies. His blog offers timeless advice on writing clean, robust code and building scalable systems. Visit Martin’s Blog   Why These Blogs and Authors?  Each of these blogs and authors has had a meaningful impact on my journey as a developer. They cover a wide array of topics that complement the themes here on Beauty on Code, including web development, programming best practices, and cloud solutions. By sharing them with you, I hope to introduce new perspectives, spark ideas, and provide valuable resources for your learning journey.  ","categories": [],
        "tags": [],
        "url": "/docs/blog-and-authors/",
        "teaser": null
      },{
        "title": "Online Courses and Videos",
        "excerpt":"Welcome to the Online Courses and Videos page on Beauty on Code! Here, I’m sharing a curated list of online courses and video resources that I have found helpful in my own learning journey. These cover a variety of topics, from foundational programming to advanced development concepts. Whether you’re just getting started or looking to deepen your expertise, I hope you’ll find these resources as beneficial as I have.   1. Programming Foundations  CS50: Introduction to Computer Science (Harvard University)  This free course is a great starting point for anyone interested in computer science. It covers fundamental concepts in programming, including algorithms, data structures, and web development basics, using languages like C and Python. Access the course on edX   Python for Everybody (University of Michigan)  An excellent beginner-friendly course on Python programming, covering basic syntax, data structures, and file handling. It’s a practical choice for anyone looking to build a strong foundation in Python. Access the course on Coursera   2. Web Development Essentials  The Complete JavaScript Course (Udemy, by Jonas Schmedtmann)  This course covers JavaScript from the ground up, making it perfect for both beginners and those looking to brush up on advanced topics. Jonas explains everything clearly and includes hands-on projects that help solidify your understanding of JavaScript concepts. Access the course on Udemy   Responsive Web Design (freeCodeCamp)  An in-depth look at HTML, CSS, and responsive design techniques. This free course walks you through practical projects to build mobile-friendly websites, helping you master essential frontend skills. Access the course on freeCodeCamp   3. Advanced Topics in Programming  Algorithms Specialization (Stanford University, Coursera)  This specialization dives deep into algorithms, with topics like graph theory, dynamic programming, and NP-complete problems. A great resource for developers aiming to improve their problem-solving and technical interview skills. Access the course on Coursera   Complete Guide to Redis (Udemy, by Stephen Grider)  A comprehensive course on Redis that covers its core features and how it can be integrated into applications. Ideal for developers interested in caching, session management, and scaling web applications. Access the course on Udemy   4. Cloud Computing and DevOps  AWS Certified Solutions Architect – Associate (A Cloud Guru)  This course provides a solid foundation in AWS services and best practices for architecting in the cloud. It’s particularly helpful for developers interested in learning about scalable and resilient cloud solutions. Access the course on A Cloud Guru   Introduction to DevOps (Microsoft Learn)  A free introduction to DevOps principles, CI/CD, and other essential tools in modern software development. This course includes modules on setting up pipelines, monitoring, and automating tasks for efficient deployment. Access the course on Microsoft Learn   5. Data Science and Machine Learning  Machine Learning (Stanford University, Coursera, by Andrew Ng)  One of the most popular courses on machine learning, covering supervised and unsupervised learning, neural networks, and practical applications. Andrew Ng’s course is a great starting point for anyone interested in AI and data science. Access the course on Coursera   Python for Data Science and Machine Learning Bootcamp (Udemy, by Jose Portilla)  This course covers the essential tools and libraries for data science with Python, such as Pandas, Matplotlib, and Scikit-Learn. It’s a great resource for those looking to apply Python to data analysis and machine learning. Access the course on Udemy   6. Recommended YouTube Channels  Traversy Media  Brad Traversy’s channel is full of high-quality tutorials on web development, from beginner to advanced. He covers topics like JavaScript frameworks, Node.js, and modern web development practices. Visit Traversy Media on YouTube   Academind  Max Schwarzmüller’s channel offers a range of tutorials on full-stack development, covering frameworks like React, Angular, and Node.js. It’s a great channel for developers looking to improve their frontend and backend skills. Visit Academind on YouTube   freeCodeCamp.org  With full-length tutorials on everything from Python and machine learning to DevOps and cloud computing, freeCodeCamp’s YouTube channel is a fantastic resource for self-paced learning. Visit freeCodeCamp on YouTube   Why These Courses and Videos?  These courses and videos have been invaluable in expanding my skills and understanding of various programming topics. Each one offers high-quality content, delivered by knowledgeable instructors and developers who break down complex subjects into manageable steps. Whether you’re just starting out or looking to specialize, these resources provide an excellent foundation for continuous learning.  ","categories": [],
        "tags": [],
        "url": "/docs/courses-and-videos/",
        "teaser": null
      },{
        "title": "FAQ",
        "excerpt":"Welcome to the FAQ page! Here, I’ve compiled answers to some common questions about Beauty on Code. Whether you’re new to the blog or a returning reader, I hope this page provides helpful insights into what the blog offers and how to navigate the content.   1. What topics does Beauty on Code cover?  Beauty on Code primarily focuses on programming, web development, and related technologies. You’ll find articles on front-end and back-end development, DevOps, cloud solutions, and practical guides for using tools like Python, JavaScript, AWS, and more. I also share short articles on technology trends and productivity tips for developers.   2. How is the blog organized?  The blog is organized by Categories and Series to help readers find topics of interest quickly. Categories group posts by subject (e.g., JavaScript, Linux, Python), while Series are themed collections of posts that dive deeper into specific topics or provide step-by-step guides.   For more on navigating the blog, check out the Getting Started page in the Quick-Start Guide.   3. Can I suggest a topic or request a tutorial?  Absolutely! I’m always open to suggestions and feedback. If you have a topic you’d like me to cover, feel free to reach out via the contact form on the Contact page, or leave a comment on any post.   4. What resources and tools do you recommend for learning programming?  I’ve compiled a list of my favorite learning resources and tools on the Resources &amp; Tools page. It includes online courses, tutorials, and tools that I find useful for both beginners and advanced developers. Check it out if you’re looking for reliable learning materials.   5. How can I stay updated with new content?  To stay updated, you can subscribe to the blog’s newsletter (if available), follow Beauty on Code on social media, or bookmark the site and check back regularly for new posts. You’ll find links to social media accounts in the footer of the blog.   6. Are there any other blogs or authors you recommend?  Yes! On the Blog and Authors page, I share links to other blogs and authors whose content I find helpful and inspiring. If you’re looking for more perspectives on programming and development, it’s a great resource to explore.   7. Do you offer any coding tutorials or project-based guides?  Yes, several Series on the blog include project-based guides, where I walk through specific coding concepts or projects. Some of the current Series include JavaScript for Developers, Linux for Developers, and Exploring Python. These guides are structured to help you practice and apply what you learn in real projects.   8. How do I find the most popular posts on the blog?  You can view the Most Viewed Posts page to see a list of articles that have been popular with readers. This is a great place to start if you’re looking for topics that resonate with others or are interested in trending posts.   9. What’s the best way to contact you if I have more questions?  If you have additional questions or need further assistance, you can contact me through the form on the Contact page. I’ll do my best to respond to inquiries as quickly as possible.   Got More Questions?  If you don’t see your question here, please don’t hesitate to reach out. I’m here to help make your experience on Beauty on Code informative and enjoyable!  ","categories": [],
        "tags": [],
        "url": "/docs/faq/",
        "teaser": null
      },{
        "title": "Terms and Privacy Policy",
        "excerpt":"Welcome to Beauty on Code! Your privacy is very important to me, and this policy outlines how personal information is collected, used, and protected when you visit this blog.   1. Information Collection  I may collect personal information from you in a variety of ways, including, but not limited to, when you:      Subscribe to the newsletter   Leave comments on blog posts   Contact me through the form on the Contact page   The types of information collected may include your name, email address, and any other information you provide.   2. Use of Information  I use the information collected to:      Provide a better experience on the blog by personalizing content   Send updates or respond to inquiries if you’ve subscribed or contacted me   Analyze site traffic to improve the blog and user experience   I do not sell, trade, or rent your personal information to others.   3. Cookies  Beauty on Code may use cookies to enhance your experience. Cookies are small files placed on your device by your browser to help remember your preferences. They may be used to:      Recognize returning visitors   Understand and save user preferences for future visits   Compile aggregate data about site traffic and interaction to improve the blog   You can choose to disable cookies in your browser settings. Note that some features of the blog may not function properly without cookies.   4. Third-Party Links and Services  This blog may contain links to external sites, such as recommended resources, tools, or other blogs. Beauty on Code is not responsible for the privacy practices or content on these external sites. I encourage you to review the privacy policies of any third-party sites you visit.   5. Google Analytics  I may use Google Analytics to collect anonymous data on site traffic and user interactions to understand how visitors use the blog. Google Analytics may use cookies or similar tracking technologies. This data helps improve content and optimize the site experience for readers.   For more details, you can review Google’s Privacy Policy.   6. Data Security  Protecting your information is important to me. I take appropriate security measures to protect against unauthorized access, alteration, or disclosure of personal information stored on the blog. However, please remember that no online transmission is ever fully secure.   7. Changes to This Privacy Policy  This Privacy Policy may be updated periodically to reflect changes to the blog, legal requirements, or other needs. When updates are made, the Last Updated date at the bottom of the page will be revised. I encourage you to review this policy regularly for any updates.   8. Contact Me  If you have any questions about this Privacy Policy, please feel free to reach out through the Contact page.   ","categories": [],
        "tags": [],
        "url": "/docs/terms-and-privacy/",
        "teaser": null
      },{
        "title": "Privacy Policy",
        "excerpt":"Welcome to Beauty on Code! This blog and its content are the result of dedicated effort and creativity. Please respect these guidelines regarding the usage and sharing of the content published here.   1. Copyright Ownership  All content on Beauty on Code—including blog posts, images, and graphics—are the intellectual property of the blog owner unless otherwise specified (like free image from Pixabay). Unauthorized use or reproduction of any content on this site without prior written permission is prohibited.   2. Prohibited Actions  Please be aware that you may not:      Repost or republish any blog post, article, image, or graphic from Beauty on Code on other websites, blogs, social media, or any other platform without written permission.   Modify, translate, or create derivative works based on my content.   Sell, lease, or distribute any content from Beauty on Code for commercial purposes.   3. Limited Sharing  I encourage sharing links to blog posts or quoting brief excerpts (up to 100 words) for non-commercial purposes, provided that:      Proper credit is given to Beauty on Code as the source.   A direct link back to the original post is included.   The excerpt is presented in a way that respects the original context.   4. Reporting Violations  If you notice that content from Beauty on Code has been used without permission or improperly attributed, please notify me through the Contact page so I can take appropriate action.   5. Requesting Permission  If you’re interested in using a blog post, image, or other materials from Beauty on Code for educational, research, or other non-commercial purposes, please reach out to me directly. I’m happy to discuss potential permissions as long as they align with this blog’s mission and respect my work.   Thank you for respecting the hard work and creativity that goes into BeautyOnCode! Following these guidelines helps ensure that I can continue creating valuable content for readers.  ","categories": [],
        "tags": [],
        "url": "/docs/privacy/",
        "teaser": null
      },{
        "title": "Lhasa Apso",
        "excerpt":"   The Lhasa Apso (/ˈlɑːsə ˈæpsoʊ/ lah-sə ap-soh) is a non-sporting dog breed originating in Tibet. It was bred as an interior sentinel in the Buddhist monasteries, to alert the monks to any intruders who entered. Lhasa is the capital city of Tibet, and apso is a word in the Tibetan language meaning “bearded”, so, Lhasa Apso simply means “long-haired Lhasa dog”. There are, however, some who claim that the word “apso” is a form of the Tibetan word “rapso”, meaning “goat-like”, which would make the equivalent translation “wooly Lhasa dog”.       From Wikipedia, the free encyclopedia   ","categories": [],
        "tags": [],
        "url": "/pets/lhasa-apso/",
        "teaser": null
      },{
        "title": "Tabby",
        "excerpt":"   A tabby is any domestic cat that has a coat featuring distinctive stripes, dots, lines or swirling patterns, usually together with a mark resembling an ‘M’ on its forehead. Tabbies are sometimes erroneously assumed to be a cat breed. In fact, the tabby pattern is found in many breeds, as well as among the general mixed-breed population. The tabby pattern is a naturally occurring feature that may be related to the coloration of the domestic cat’s direct ancestor, the African wildcat, which (along with the European wildcat and Asiatic wildcat) has a similar coloration.       From Wikipedia, the free encyclopedia   ","categories": [],
        "tags": [],
        "url": "/pets/tabby/",
        "teaser": null
      },{
        "title": "Baz Boom Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/baz-boom-identity/",
        "teaser": "/assets/images/unsplash-gallery-image-1-th.jpg"
      },{
        "title": "Fizz Bang Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/fizz-bang-identity/",
        "teaser": "/assets/images/unsplash-gallery-image-2-th.jpg"
      },{
        "title": "Foo Bar Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/foo-bar-website/",
        "teaser": "/assets/images/foo-bar-identity-th.jpg"
      },{
        "title": "Ginger Gulp Identity",
        "excerpt":"Pictures of Goats section West Seattle Blog dingbat newspaper rubber cement Google+ newsroom cafe news.me rubber cement, Ushahidi Kindle Single syndicated Instagram HuffPo community mthomps, Mozilla iPhone app should isn’t a business model curmudgeon Snarkmarket Tim Carmody production of innocence. Fuego tweets community DocumentCloud metered model Gardening &amp; War section YouTube social media SEO information overload analytics Aron Pilhofer Journal Register data visualization WikiLeaks Groupon, collaboration Steve Jobs we need a Nate Silver AP What Would Google Do the power of the press belongs to the person who owns one Clay Shirky curmudgeon Voice of San Diego free as in beer dead trees the notion of the public Lucius Nieman.                                                                                                                                This is a sample gallery to go along with this case study.       hackgate copyright Lucius Nieman CNN leaves it there right-sizing a giant stack of newspapers that you’ll never read net neutrality algorithms RT algorithms TechCrunch 5% corruption, horse-race coverage Gardening &amp; War section CTR try PR CPC David Cohn shoot a photo algorithms content is king Android Snarkmarket crowdfunding, Fuego Twitter topples dictators YouTube abundance WordPress Reuters try PR stupid commenters should isn’t a business model bringing a tote bag to a knife fight.  ","categories": [],
        "tags": [],
        "url": "/portfolio/ginger-gulp-identity/",
        "teaser": "/assets/images/unsplash-gallery-image-3-th.jpg"
      },{
        "title": "Edge Case: Nested and Mixed Lists",
        "excerpt":"Nested and mixed lists are an interesting beast. It’s a corner case to make sure that      Lists within lists do not break the ordered list numbering order   Your list styles go deep enough.   Ordered – Unordered – Ordered      ordered item   ordered item            unordered       unordered                    ordered item           ordered item                           ordered item   ordered item   Ordered – Unordered – Unordered      ordered item   ordered item            unordered       unordered                    unordered item           unordered item                           ordered item   ordered item   Unordered – Ordered – Unordered      unordered item   unordered item            ordered       ordered                    unordered item           unordered item                           unordered item   unordered item   Unordered – Unordered – Ordered      unordered item   unordered item            unordered       unordered                    ordered item           ordered item                           unordered item   unordered item   Task Lists      Finish my changes   Push my commits to GitHub   Open a pull request  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","lists","markup"],
        "url": "/edge%20case/edge-case-nested-and-mixed-lists/",
        "teaser": null
      },{
        "title": "Edge Case: Many Tags",
        "excerpt":"This post has many tags.  ","categories": ["Edge Case"],
        "tags": ["8BIT","alignment","Articles","captions","categories","chat","comments","content","css","dowork","edge case","embeds","excerpt","Fail","featured image","FTW","Fun","gallery","html","image","Jekyll","layout","link","Love","markup","Mothership","Must Read","Nailed It","Pictures","Post Formats","quote","standard","Success","Swagger","Tags","template","title","twitter","Unseen","video","YouTube"],
        "url": "/edge%20case/edge-case-many-tags/",
        "teaser": null
      },{
        "title": "Edge Case: Many Categories",
        "excerpt":"This post has many categories.  ","categories": ["aciform","antiquarianism","arrangement","asmodeus","broder","buying","championship","chastening","disinclination","disinfection","dispatch","echappee","enphagy"],
        "tags": ["categories","edge case"],
        "url": "/aciform/antiquarianism/arrangement/asmodeus/broder/buying/championship/chastening/disinclination/disinfection/dispatch/echappee/enphagy/edge-case-many-categories/",
        "teaser": null
      },{
        "title": "Edge Case: No Body Content",
        "excerpt":" ","categories": ["Edge Case"],
        "tags": ["content","edge case","layout"],
        "url": "/edge%20case/edge-case-no-body-content/",
        "teaser": null
      },{
        "title": "Edge Case No Yaml Title",
        "excerpt":"This post has no title specified in the YAML Front Matter. Jekyll should auto-generate a title from the filename.  ","categories": ["Edge Case"],
        "tags": ["edge case","layout","title"],
        "url": "/edge%20case/edge-case-no-yaml-title/",
        "teaser": null
      },{
        "title": "Edge Case: Post with multiline excerpt",
        "excerpt":"Et ex ullamco duis don’t combine these words quis laborum sunt sint. Nisi et Lorem reprehenderit cupidatat. Aliqua fugiat aliquip officia culpa elit. Adipisicing do eu duis aute et aute amet anim ut cillum aliqua. Aliqua adipisicing occaecat et ullamco fugiat.  ","categories": [],
        "tags": [],
        "url": "/edge-case-multiline-excerpt/",
        "teaser": null
      },{
        "title": "Antidisestablishmentarianism",
        "excerpt":"Title should not overflow the content area   A few things to check for:      Non-breaking text in the title, content, and comments should have no adverse effects on layout or functionality.   Check the browser window / tab title.   If you are a theme developer, check that this text does not break anything.   The following CSS properties will help you support non-breaking text.   -ms-word-wrap: break-word; word-wrap: break-word;  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","html","layout","title"],
        "url": "/edge%20case/edge-case-title-should-not-overflow-the-content-area/",
        "teaser": null
      },{
        "title": "Suspicio? Bene ... tunc ibimus? Quis uh ... CONEXUS locus his diebus? Quisque semper aliquid videtur, in volutpat mauris. Nolo enim dicere. Vobis neque ab aliis. Ego feci memetipsum explicans. Gus mortuus est. Lorem opus habeo. Jackson Isai? Tu quoque ... A te quidem a ante. Vos scitis quod blinking res Ive 'been vocans super vos? Et conteram illud, et conteram hoc. Maledicant druggie excors. Iam hoc tu facere conatus sum ad te in omni tempore? Ludum mutavit. Verbum est ex. Et ... sunt occid",
        "excerpt":"Check for long titles and how they might break a template.  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case","html","layout","title"],
        "url": "/edge%20case/edge-case-very-long-title/",
        "teaser": null
      },{
        "title": "Edge Case: Invalid syntax highlight languages",
        "excerpt":"Good highlighting:   str = ARGV.first if str   str = str.b[/\\A_(.*)_\\z/, 1]   if str and Gem::Version.correct?(str)     version = str     ARGV.shift   end end   Good (but dumb) highlighting:   str = ARGV.first if str   str = str.b[/\\A_(.*)_\\z/, 1]   if str and Gem::Version.correct?(str)     version = str     ARGV.shift   end end   Bad highlighting:   str = ARGV.first if str   str = str.b[/\\A_(.*)_\\z/, 1]   if str and Gem::Version.correct?(str)     version = str     ARGV.shift   end end  ","categories": ["Edge Case"],
        "tags": ["content","css","edge case"],
        "url": "/edge%20case/edge-case-broken-highlighting/",
        "teaser": null
      },{
        "title": "Post: Modified Date",
        "excerpt":"This post has been updated and should show a modified date if used in a layout.   All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.  ","categories": ["Post Formats"],
        "tags": ["Post Formats","readability","standard"],
        "url": "/post%20formats/post-modified/",
        "teaser": null
      },{
        "title": "Post: Standard",
        "excerpt":"All children, except one, grow up. They soon know that they will grow up, and the way Wendy knew was this. One day when she was two years old she was playing in a garden, and she plucked another flower and ran with it to her mother. I suppose she must have looked rather delightful, for Mrs. Darling put her hand to her heart and cried, “Oh, why can’t you remain like this for ever!” This was all that passed between them on the subject, but henceforth Wendy knew that she must grow up. You always know after you are two. Two is the beginning of the end.   Mrs. Darling first heard of Peter when she was tidying up her children’s minds. It is the nightly custom of every good mother after her children are asleep to rummage in their minds and put things straight for next morning, repacking into their proper places the many articles that have wandered during the day.     This post has a manual excerpt &lt;!--more--&gt; set after the second paragraph. The following YAML Front Matter has also be applied:   excerpt_separator: \"&lt;!--more--&gt;\"   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": ["Post Formats"],
        "tags": ["Post Formats","readability","standard"],
        "url": "/post%20formats/post-standard/",
        "teaser": null
      },{
        "title": "Post: Chat",
        "excerpt":"Abbott: Strange as it may seem, they give ball players nowadays very peculiar names.   Costello: Funny names?   Abbott: Nicknames, nicknames. Now, on the St. Louis team we have Who’s on first, What’s on second, I Don’t Know is on third–   Costello: That’s what I want to find out. I want you to tell me the names of the fellows on the St. Louis team.   Abbott: I’m telling you. Who’s on first, What’s on second, I Don’t Know is on third–   Costello: You know the fellows’ names?   Abbott: Yes.   Costello: Well, then who’s playing first?   Abbott: Yes.   Costello: I mean the fellow’s name on first base.   Abbott: Who.   Costello: The fellow playin’ first base.   Abbott: Who.   Costello: The guy on first base.   Abbott: Who is on first.   Costello: Well, what are you askin’ me for?   Abbott: I’m not asking you–I’m telling you. Who is on first.   Costello: I’m asking you–who’s on first?   Abbott: That’s the man’s name.   Costello: That’s who’s name?   Abbott: Yes.   Costello: When you pay off the first baseman every month, who gets the money?   Abbott: Every dollar of it. And why not, the man’s entitled to it.   Costello: Who is?   Abbott: Yes.   Costello: So who gets it?   Abbott: Why shouldn’t he? Sometimes his wife comes down and collects it.   Costello: Who’s wife?   Abbott: Yes. After all, the man earns it.   Costello: Who does?   Abbott: Absolutely.   Costello: Well, all I’m trying to find out is what’s the guy’s name on first base?   Abbott: Oh, no, no. What is on second base.   Costello: I’m not asking you who’s on second.   Abbott: Who’s on first!   Costello: St. Louis has a good outfield?   Abbott: Oh, absolutely.   Costello: The left fielder’s name?   Abbott: Why.   Costello: I don’t know, I just thought I’d ask.   Abbott: Well, I just thought I’d tell you.   Costello: Then tell me who’s playing left field?   Abbott: Who’s playing first.   Costello: Stay out of the infield! The left fielder’s name?   Abbott: Why.   Costello: Because.   Abbott: Oh, he’s center field.   Costello: Wait a minute. You got a pitcher on this team?   Abbott: Wouldn’t this be a fine team without a pitcher?   Costello: Tell me the pitcher’s name.   Abbott: Tomorrow.   Costello: Now, when the guy at bat bunts the ball–me being a good catcher–I want to throw the guy out at first base, so I pick up the ball and throw it to who?   Abbott: Now, that’s he first thing you’ve said right.   Costello: I DON’T EVEN KNOW WHAT I’M TALKING ABOUT!   Abbott: Don’t get excited. Take it easy.   Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don’t know. I don’t know throws it back to tomorrow–a triple play.   Abbott: Yeah, it could be.   Costello: Another guy gets up and it’s a long ball to center.   Abbott: Because.   Costello: Why? I don’t know. And I don’t care.   Abbott: What was that?   Costello: I said, I DON’T CARE!   Abbott: Oh, that’s our shortstop!  ","categories": ["Post Formats"],
        "tags": ["chat","Post Formats"],
        "url": "/post%20formats/post-chat/",
        "teaser": null
      },{
        "title": "Post: Notice",
        "excerpt":"A notice displays information that explains nearby content. Often used to call attention to a particular detail.   When using Kramdown {: .notice} can be added after a sentence to assign the .notice to the &lt;p&gt;&lt;/p&gt; element.   Changes in Service: We just updated our privacy policy here to better service our customers. We recommend reviewing the changes.   Primary Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.      Primary Notice with code block: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.     &lt;html&gt;   &lt;body&gt;Some body.&lt;body&gt; &lt;/html&gt;      Info Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Warning Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Danger Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Success Notice: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.   Want to wrap several paragraphs or other elements in a notice? Using Liquid to capture the content and then filter it with markdownify is a good way to go.   {% capture notice-2 %} #### New Site Features  * You can now have cover images on blog pages * Drafts will now auto-save while writing {% endcapture %}  &lt;div class=\"notice\"&gt;{{ notice-2 | markdownify }}&lt;/div&gt;       New Site Features      You can now have cover images on blog pages   Drafts will now auto-save while writing     Or you could skip the capture and stick with straight HTML.   &lt;div class=\"notice\"&gt;   &lt;h4&gt;Message&lt;/h4&gt;   &lt;p&gt;A basic message.&lt;/p&gt; &lt;/div&gt;      Message    A basic message.   ","categories": ["Post Formats"],
        "tags": ["Post Formats","notice"],
        "url": "/post%20formats/post-notice/",
        "teaser": null
      },{
        "title": "Post: Quote",
        "excerpt":"   Only one thing is impossible for God: To find any sense in any copyright law on the planet.       Mark Twain   ","categories": ["Post Formats"],
        "tags": ["Post Formats","quote"],
        "url": "/post%20formats/post-quote/",
        "teaser": null
      },{
        "title": "Post: Link",
        "excerpt":"This theme supports link posts, made famous by John Gruber. To use, just add link: http://url-you-want-linked to the post’s YAML front matter and you’re done.      And this is how a quote looks.    Some link can also be shown.  ","categories": ["Post Formats"],
        "tags": ["link","Post Formats"],
        "url": "/post%20formats/post-link/",
        "teaser": null
      },{
        "title": "Post: Video (YouTube)",
        "excerpt":"YouTube video embed below.    ","categories": ["Post Formats"],
        "tags": ["Post Formats"],
        "url": "/post%20formats/post-video-youtube/",
        "teaser": null
      },{
        "title": "Post: Header Image with OpenGraph Override",
        "excerpt":"This post has a header image with an OpenGraph override.   header:   image: /assets/images/page-header-image.png   og_image: /assets/images/page-header-og-image.png  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/post-header-image-og-override/",
        "teaser": null
      },{
        "title": "Post: Overlay Image with OpenGraph Override",
        "excerpt":"This post has a header image with an OpenGraph override.   header:   overlay_image: /assets/images/unsplash-image-1.jpg   og_image: /assets/images/page-header-og-image.png   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"Learn more\"       url: \"https://unsplash.com\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/post-header-overlay-image-og-override/",
        "teaser": null
      },{
        "title": "Post: Image (with Link)",
        "excerpt":"  ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "/post%20formats/post-image-linked/",
        "teaser": null
      },{
        "title": "Post: Image (Standard)",
        "excerpt":"The preferred way of using images is placing them in the /assets/images/ directory and referencing them with an absolute path. Prepending the filename with {{ site.url }}{{ site.baseurl }}/assets/images/ will make sure your images display properly in feeds and such.   Standard image with no width modifier classes applied.   HTML:   &lt;img src=\"{{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg\" alt=\"\"&gt;   or Kramdown:   ![alt]({{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg)      Image that fills page content container by adding the .full class with:   HTML:   &lt;img src=\"{{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg\" alt=\"\" class=\"full\"&gt;   or Kramdown:   ![alt]({{ site.url }}{{ site.baseurl }}/assets/images/filename.jpg) {: .full}     ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "/post%20formats/post-image-standard/",
        "teaser": null
      },{
        "title": "Post: Teaser Image with OpenGraph Override",
        "excerpt":"This post has a teaser image with an OpenGraph override.   header:   teaser: /assets/images/page-header-teaser.png   og_image: /assets/images/page-header-og-image.png  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/post-teaser-image-og-override/",
        "teaser": "/assets/images/page-header-teaser.png"
      },{
        "title": "Post: Image (Linked with Caption)",
        "excerpt":"          Image with a caption.   ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "/post%20formats/post-image-linked-caption/",
        "teaser": null
      },{
        "title": "Post: Image (Caption)",
        "excerpt":"         Photo from Unsplash.  ","categories": ["Post Formats"],
        "tags": ["image","Post Formats"],
        "url": "/post%20formats/post-image-caption/",
        "teaser": null
      },{
        "title": "Post: Gallery",
        "excerpt":"These are gallery tests for image wrapped in &lt;figure&gt; elements.   To place a gallery add the necessary YAML Front Matter:   gallery:   - url: /assets/images/unsplash-gallery-image-1.jpg     image_path: /assets/images/unsplash-gallery-image-1-th.jpg     alt: \"placeholder image 1\"     title: \"Image 1 title caption\"   - url: /assets/images/unsplash-gallery-image-2.jpg     image_path: /assets/images/unsplash-gallery-image-2-th.jpg     alt: \"placeholder image 2\"     title: \"Image 2 title caption\"   - url: /assets/images/unsplash-gallery-image-3.jpg     image_path: /assets/images/unsplash-gallery-image-3-th.jpg     alt: \"placeholder image 3\"     title: \"Image 3 title caption\"   - url: /assets/images/unsplash-gallery-image-4.jpg     image_path: /assets/images/unsplash-gallery-image-4-th.jpg     alt: \"placeholder image 4\"     title: \"Image 4 title caption\"   And then drop-in the gallery include — gallery caption is optional.   {% include gallery caption=\"This is a sample gallery with **Markdown support**.\" %}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      This is a sample gallery with Markdown support.       This is some text after the gallery just to make sure that everything aligns properly.   Here comes another gallery, this time set the id to match 2nd gallery hash in YAML Front Matter.   gallery2:   - url: https://flic.kr/p/8a6Ven     image_path: https://farm2.staticflickr.com/1272/4697500467_8294dac099_q.jpg     alt: \"Black and grays with a hint of green\"   - url: https://flic.kr/p/8a738X     image_path: https://farm5.staticflickr.com/4029/4697523701_249e93ba23_q.jpg     alt: \"Made for open text placement\"   - url: https://flic.kr/p/8a6VXP     image_path: https://farm5.staticflickr.com/4046/4697502929_72c612c636_q.jpg     alt: \"Fog in the trees\"   And place it like so:   {% include gallery id=\"gallery2\" caption=\"This is a second gallery example with images hosted externally.\" %}                                                                                                                                This is a second gallery example with images hosted externally.       And for giggles one more gallery just to make sure this works. To fill page content container add class=\"full\".                                                      This is a third gallery example with two images and fills the entire content container.       Gallery column layout can be overrided by setting a layout.   {% include gallery id=\"gallery\" layout=\"half\" caption=\"This is a half gallery layout example.\" %}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      This is a half gallery layout example.      ","categories": ["Post Formats"],
        "tags": ["gallery","Post Formats","tiled"],
        "url": "/post%20formats/post-gallery/",
        "teaser": null
      },{
        "title": "Post: Twitter Embed",
        "excerpt":"🎨 Finally got around to adding all my @procreateapp creations with time lapse videos https://t.co/1nNbkefC3L pic.twitter.com/gcNLJoJ0Gn &mdash; Thanh Nguyen (@mmistakes) November 6, 2015   This post tests Twitter Embeds.  ","categories": ["Media"],
        "tags": ["content","embeds","media","twitter"],
        "url": "/media/post-twitter-embeds/",
        "teaser": null
      },{
        "title": "Layout: Comments Disabled",
        "excerpt":"This post has its comments disabled.   There should be no comment form.  ","categories": ["Layout","Uncategorized"],
        "tags": ["comments","layout"],
        "url": "/layout/uncategorized/layout-comments-disabled/",
        "teaser": null
      },{
        "title": "Layout: Comments Enabled",
        "excerpt":"This post should display comments if a provider is enabled.  ","categories": ["Layout","Uncategorized"],
        "tags": ["comments","layout"],
        "url": "/layout/uncategorized/layout-comments/",
        "teaser": null
      },{
        "title": "Layout: Post Date Disabled",
        "excerpt":"This post has the date disabled. The date this post was published should not be showing if show_date: false is set in _config.yml or in this post’s YAML Front Matter.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["post date"],
        "url": "/layout-post-date-disabled/",
        "teaser": null
      },{
        "title": "Layout: Post Date Enabled",
        "excerpt":"This post has post date enabled. The date the post was published should show if show_date: true is added to it’s YAML Front Matter or as a default in _config.yml.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["post date"],
        "url": "/layout-post-date/",
        "teaser": null
      },{
        "title": "Layout: Read Time Disabled",
        "excerpt":"This post has reading time disabled. The estimated time that it takes to read this post should not be showing if read_time: false is set in _config.yml or in this post’s YAML Front Matter.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["read time"],
        "url": "/layout-read-time-disabled/",
        "teaser": null
      },{
        "title": "Layout: Read Time Enabled",
        "excerpt":"This post has reading time enabled. The estimated time that it takes to read this post should show if also enabled in _config.yml with read_time: true.   If you could keep awake (but of course you can’t) you would see your own mother doing this, and you would find it very interesting to watch her. It is quite like tidying up drawers. You would see her on her knees, I expect, lingering humorously over some of your contents, wondering where on earth you had picked this thing up, making discoveries sweet and not so sweet, pressing this to her cheek as if it were as nice as a kitten, and hurriedly stowing that out of sight. When you wake in the morning, the naughtiness and evil passions with which you went to bed have been folded up small and placed at the bottom of your mind and on the top, beautifully aired, are spread out your prettier thoughts, ready for you to put on.   I don’t know whether you have ever seen a map of a person’s mind. Doctors sometimes draw maps of other parts of you, and your own map can become intensely interesting, but catch them trying to draw a map of a child’s mind, which is not only confused, but keeps going round all the time. There are zigzag lines on it, just like your temperature on a card, and these are probably roads in the island, for the Neverland is always more or less an island, with astonishing splashes of colour here and there, and coral reefs and rakish-looking craft in the offing, and savages and lonely lairs, and gnomes who are mostly tailors, and caves through which a river runs, and princes with six elder brothers, and a hut fast going to decay, and one very small old lady with a hooked nose. It would be an easy map if that were all, but there is also first day at school, religion, fathers, the round pond, needle-work, murders, hangings, verbs that take the dative, chocolate pudding day, getting into braces, say ninety-nine, three-pence for pulling out your tooth yourself, and so on, and either these are part of the island or they are another map showing through, and it is all rather confusing, especially as nothing will stand still.   Of course the Neverlands vary a good deal. John’s, for instance, had a lagoon with flamingoes flying over it at which John was shooting, while Michael, who was very small, had a flamingo with lagoons flying over it. John lived in a boat turned upside down on the sands, Michael in a wigwam, Wendy in a house of leaves deftly sewn together. John had no friends, Michael had friends at night, Wendy had a pet wolf forsaken by its parents, but on the whole the Neverlands have a family resemblance, and if they stood still in a row you could say of them that they have each other’s nose, and so forth. On these magic shores children at play are for ever beaching their coracles [simple boat]. We too have been there; we can still hear the sound of the surf, though we shall land no more.   Of all delectable islands the Neverland is the snuggest and most compact, not large and sprawly, you know, with tedious distances between one adventure and another, but nicely crammed. When you play at it by day with the chairs and table-cloth, it is not in the least alarming, but in the two minutes before you go to sleep it becomes very real. That is why there are night-lights.   Occasionally in her travels through her children’s minds Mrs. Darling found things she could not understand, and of these quite the most perplexing was the word Peter. She knew of no Peter, and yet he was here and there in John and Michael’s minds, while Wendy’s began to be scrawled all over with him. The name stood out in bolder letters than any of the other words, and as Mrs. Darling gazed she felt that it had an oddly cocky appearance.  ","categories": [],
        "tags": ["read time"],
        "url": "/layout-read-time/",
        "teaser": null
      },{
        "title": "Layout: Related Posts Disabled",
        "excerpt":"This post has related posts disabled.   Related post links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","layout"],
        "url": "/layout/uncategorized/layout-related-posts-disabled/",
        "teaser": null
      },{
        "title": "Layout: Related Posts Enabled",
        "excerpt":"This post has related posts enabled.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","layout"],
        "url": "/layout/uncategorized/layout-related-posts/",
        "teaser": null
      },{
        "title": "Layout: Social Sharing Links Disabled",
        "excerpt":"This post has social sharing disabled.   Social sharing links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["social","layout"],
        "url": "/layout/uncategorized/layout-sharing-disabled/",
        "teaser": null
      },{
        "title": "Layout: Social Sharing Links Enabled",
        "excerpt":"This post should display social sharing links.  ","categories": ["Layout","Uncategorized"],
        "tags": ["social","layout"],
        "url": "/layout/uncategorized/layout-sharing/",
        "teaser": null
      },{
        "title": "Layout: Reading Time, Comments, Social Sharing Links, and Related Posts Disabled",
        "excerpt":"This post has reading time, comments, social sharing links, and related posts disabled.   Reading time, comments, social sharing and related post links should not appear.  ","categories": ["Layout","Uncategorized"],
        "tags": ["related posts","social","comments","layout"],
        "url": "/layout/uncategorized/layout-read-time-comments-sharing-related-posts-disabled/",
        "teaser": null
      },{
        "title": "Layout: Post with Nested Table of Contents via Helper",
        "excerpt":"Tests table of contents with multiple levels to verify indentation is readible via helper include (deprecated).   {% include toc %}               Enim laboris id ea elit elit deserunt           2 Sit adipisicing tempor duis velit cupidatat occaecat do amet                   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor                           2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud               2.1.2 Nisi non nisi ullamco ipsum cillum               2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud                                   2.1.1.1 Ut aute quis ipsum fugiat dolor                   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam                                           2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est                       2.1.1.1.2 In consectetur ea qui quis culpa nulla                       2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est                       2.1.1.1.4 Veniam ipsum non reprehenderit pariatur                                                           2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute                   2.1.1.4 Magna ipsum nisi velit anim                                           2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud                       2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor                                                                                       2.1.4 Laboris exercitation nisi tempor dolore                                   2.2 Officia irure duis et est sunt                       3 Laborum eu magna proident proident tempor                   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu           3.2 Do exercitation ex elit incididunt sit cupidatat           3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt           3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna           3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat                           3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor                                   3.5.1.1 Nisi anim commodo consequat quis amet                                           3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident                                                                                                           3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud                       4 Laboris aute consequat id eu et Lorem amet       5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute       6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt                Enim laboris id ea elit elit deserunt   Magna incididunt elit id enim nisi quis excepteur reprehenderit Lorem dolore dolore ad enim. Labore esse elit excepteur et elit dolor. Elit ut consectetur labore velit elit esse voluptate id commodo. Magna cillum officia consequat non occaecat mollit esse nisi quis.   Nostrud veniam excepteur commodo enim pariatur velit est. Dolor consequat elit occaecat enim veniam ullamco qui est anim ex elit. Est minim aute magna laborum reprehenderit magna reprehenderit ullamco voluptate id sit aliqua. Id labore veniam ad duis aliquip commodo qui ex ut ipsum irure. In et sit ea cupidatat consectetur in nisi amet in cupidatat excepteur commodo amet.   2 Sit adipisicing tempor duis velit cupidatat occaecat do amet   Ad non dolore irure in. In do ut nostrud reprehenderit consequat aliqua sunt culpa voluptate amet minim ea. Eu dolore deserunt consectetur eu in minim sit nulla id id est amet consectetur. Tempor dolore ipsum magna amet velit aliquip ea anim non eu Lorem deserunt. Irure excepteur id adipisicing elit dolor ipsum eiusmod non nulla nisi sint qui et. Occaecat pariatur tempor ex nisi pariatur.   Proident culpa nostrud id est qui fugiat duis aute. Cillum commodo pariatur nostrud culpa Lorem exercitation non. Consequat elit deserunt dolore voluptate sunt labore minim ut consequat minim.   Sunt pariatur in ex non nulla proident ex ullamco Lorem do ipsum. Cillum est mollit reprehenderit excepteur labore labore elit dolore adipisicing ad quis quis aliqua sunt. Proident amet est reprehenderit deserunt amet cupidatat incididunt irure est elit.   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor   Nostrud sunt nostrud incididunt adipisicing officia esse minim irure duis dolore adipisicing cupidatat. Eu non labore veniam ad sunt pariatur qui. Irure reprehenderit qui elit duis cillum sit officia consectetur sint deserunt do aute velit. Do id occaecat magna occaecat reprehenderit veniam pariatur Lorem. Officia sit cupidatat adipisicing laborum.   2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud   Laborum laboris et ut proident sit qui pariatur nisi commodo. Deserunt eiusmod eiusmod elit anim exercitation quis. Anim laboris irure minim elit fugiat velit esse officia amet reprehenderit id. Dolor eiusmod incididunt excepteur sint aute qui esse nostrud. Nisi qui adipisicing consectetur enim pariatur sint veniam esse.   2.1.2 Nisi non nisi ullamco ipsum cillum  Minim officia tempor eiusmod sint magna reprehenderit do amet ex velit. Irure nulla ut veniam eu veniam proident esse pariatur cillum. Esse anim et proident cillum esse magna sint.   2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud  Reprehenderit consectetur tempor labore dolore ad. Ullamco qui sunt quis deserunt id ipsum sit qui nisi esse deserunt ad exercitation. Dolore qui in mollit ex qui minim et ipsum reprehenderit. Tempor magna ipsum proident voluptate mollit quis consectetur veniam non aliquip cupidatat nisi culpa aute.   2.1.1.1 Ut aute quis ipsum fugiat dolor  Occaecat excepteur et ea et exercitation ad aute minim incididunt incididunt aute sint officia aliquip. Quis cupidatat nostrud dolor consequat laboris eu ullamco qui esse excepteur aute. Veniam ut ipsum aute Lorem proident minim ea fugiat Lorem cillum. Qui esse id minim consequat ullamco aliqua pariatur ea mollit. Minim ea ipsum laborum consequat esse mollit pariatur. Voluptate sit voluptate non ut consectetur irure laboris ex adipisicing dolore elit aliquip velit. In eu veniam voluptate incididunt aute eu reprehenderit ut id voluptate.   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam  Magna duis exercitation dolor amet. Ea irure laborum sit officia reprehenderit enim aute magna duis. Elit fugiat ut proident sit.   2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est   Irure qui veniam incididunt irure consequat mollit consectetur est nostrud deserunt eiusmod nostrud quis. Eiusmod id proident eu aute exercitation irure consectetur sit dolor dolor in esse. Qui eu dolor ea est magna amet laborum qui irure. Reprehenderit excepteur voluptate fugiat exercitation voluptate laboris nostrud qui magna et officia.   2.1.1.1.2 In consectetur ea qui quis culpa nulla   Ad quis duis dolore voluptate laborum eiusmod consequat sint. Cupidatat officia ex laborum ad non mollit excepteur ea. Nostrud elit in consequat sunt adipisicing reprehenderit ipsum proident irure. Sint velit laborum sint laboris ea. Veniam occaecat et in Lorem proident minim deserunt labore laborum reprehenderit. Consequat laborum deserunt culpa consectetur. Incididunt reprehenderit amet esse duis dolore pariatur adipisicing quis elit.   2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est   Dolore reprehenderit aute ex id. Ipsum laboris sit quis enim labore ut sint cillum exercitation. Commodo aliqua exercitation enim sunt velit do laborum mollit irure dolor.   2.1.1.1.4 Veniam ipsum non reprehenderit pariatur   Laboris amet quis sunt id dolor consectetur Lorem id aliquip laboris fugiat. Non ex magna deserunt veniam eiusmod. Irure culpa culpa dolore pariatur. Elit enim deserunt ut amet adipisicing elit laborum exercitation cupidatat et. Aliqua aliqua laborum exercitation commodo reprehenderit reprehenderit amet laboris ea ea ex amet in. Aute minim voluptate et ipsum culpa consequat.   2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute   In in dolore laboris irure est consequat magna ea non aute cupidatat tempor. Officia sit pariatur consequat laborum aliqua nulla anim nisi aliquip reprehenderit consequat. Ad duis labore minim consequat reprehenderit labore ex minim cillum magna incididunt adipisicing dolor. Non velit mollit minim consectetur minim. Cillum elit et amet est reprehenderit non. Elit adipisicing nostrud ea veniam occaecat commodo deserunt.   2.1.1.4 Magna ipsum nisi velit anim   Eiusmod tempor dolor proident pariatur consequat sit non nostrud. Eiusmod duis elit esse Lorem dolore et minim elit consectetur eu ullamco. Adipisicing sunt excepteur eu mollit in nostrud.   2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud   Exercitation eu labore Lorem culpa id enim ut officia aute proident in est irure. Nostrud adipisicing magna elit tempor ipsum culpa in incididunt consectetur incididunt veniam aute tempor sint. Officia est consectetur sint sint nostrud proident mollit. Dolore duis proident mollit consectetur tempor.   2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor   Ad ut commodo elit amet officia ipsum labore do amet. Eiusmod sint irure magna proident nisi adipisicing mollit excepteur mollit proident culpa duis. Est reprehenderit consequat eiusmod deserunt duis ipsum esse amet incididunt.   2.1.4 Laboris exercitation nisi tempor dolore   Elit culpa est eiusmod nostrud occaecat. Labore incididunt nostrud consectetur sint. Ut pariatur laborum incididunt culpa proident incididunt veniam veniam laboris adipisicing mollit. Ullamco magna tempor fugiat veniam in ipsum nisi mollit labore amet et sit quis. In consectetur fugiat Lorem culpa veniam minim. Irure aliqua est mollit consectetur id Lorem velit minim sit velit. Eiusmod magna do dolor est id reprehenderit minim fugiat minim incididunt incididunt laboris velit consequat.   2.2 Officia irure duis et est sunt   Consequat anim quis non nulla. Eiusmod pariatur sunt non culpa culpa ipsum nulla anim in. Non ad exercitation ut reprehenderit ut dolor laborum tempor ad qui magna fugiat irure. Sint commodo ea sint sunt. Irure qui pariatur tempor veniam reprehenderit amet est. Amet laboris proident Lorem deserunt proident duis esse do sit eu dolor qui duis eu. Mollit laboris nisi aute nulla consectetur exercitation nulla aliqua anim.   3 Laborum eu magna proident proident tempor   Occaecat aliqua id voluptate mollit aliquip. Elit excepteur magna esse commodo pariatur reprehenderit in in quis. Id dolore proident proident mollit tempor duis magna ullamco nulla velit consequat. In ut est aliquip in commodo ullamco sit sint.   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu   Laborum magna deserunt do anim quis proident adipisicing. Dolore qui ex minim reprehenderit. Consectetur in cillum ad dolore ut id deserunt irure aute sint magna dolore adipisicing.   3.2 Do exercitation ex elit incididunt sit cupidatat   Excepteur aliqua nisi ullamco sunt fugiat laborum elit aliquip officia culpa. Est exercitation enim laborum amet exercitation. Eu quis qui eiusmod incididunt id do aliquip nostrud do esse enim excepteur enim pariatur. Aute adipisicing velit non culpa quis exercitation. Quis cupidatat anim occaecat Lorem ad mollit aute eiusmod quis dolor duis. Proident anim et nostrud ut aliquip irure adipisicing reprehenderit proident dolore magna. Consequat eu fugiat esse proident duis eu proident fugiat laboris ea veniam nisi reprehenderit.   3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt   Consectetur irure elit nulla elit non officia. Culpa Lorem minim dolor laboris enim labore do minim laborum. Fugiat deserunt nisi ut do incididunt incididunt ea anim exercitation sit duis. Irure esse pariatur labore enim labore qui anim culpa laborum velit consequat. Culpa in adipisicing excepteur est ipsum. In reprehenderit eiusmod ad ad non.   3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna   Nulla magna dolor minim commodo. Sunt nulla cupidatat consequat eiusmod elit irure eiusmod excepteur. Sit incididunt irure minim magna. Tempor ipsum exercitation minim sunt labore dolor ullamco veniam enim nisi veniam adipisicing occaecat proident.   3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat   Non aute culpa irure qui aute adipisicing aute id commodo id. Laborum ullamco laboris velit in quis duis ut consequat do minim. In minim amet ut reprehenderit et voluptate. In quis Lorem occaecat nostrud excepteur nostrud dolore in nulla ad Lorem nisi. Dolor exercitation Lorem qui sint aute ipsum officia eiusmod aliquip Lorem sit. Reprehenderit ex veniam excepteur laboris magna dolore fugiat sit exercitation esse et consequat in sit. Incididunt pariatur ad esse anim aute do id eu.   3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor   Est cillum laborum cupidatat ullamco cupidatat magna laborum enim duis consequat est eu. Magna cillum Lorem proident non ut officia. Esse irure et laboris eu occaecat aute.   3.5.1.1 Nisi anim commodo consequat quis amet   Sunt eu dolor enim enim consectetur et anim irure dolor velit cillum. Esse reprehenderit cillum incididunt adipisicing amet nostrud adipisicing. Minim mollit nostrud ipsum ea ut sit ex elit. Do esse ad et ipsum nisi sint anim culpa excepteur ipsum. Commodo nisi irure qui reprehenderit incididunt.   3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident   Dolore dolor sit sunt anim eu amet consectetur quis ea proident ex aliqua. Sunt laborum consectetur consectetur enim velit eiusmod labore commodo commodo laboris deserunt. Eiusmod enim do amet laborum commodo qui.   3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud   Lorem dolore sit aliqua tempor do voluptate ut esse. Minim velit ad velit commodo minim laborum. Qui qui reprehenderit non proident ullamco veniam aliquip.   4 Laboris aute consequat id eu et Lorem amet   Ad qui voluptate dolor veniam. Veniam mollit aute eiusmod eu labore incididunt sint proident. Non minim consequat anim sint. Aliquip non nisi nostrud proident. Eiusmod ut duis commodo sunt laboris irure eu. Laboris quis amet ad qui officia.   5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute   Duis proident ullamco fugiat aliqua sunt anim ea do irure est amet quis nulla cillum. Commodo voluptate dolor culpa sint aliquip voluptate exercitation anim cillum ad eu in amet. Sint fugiat qui commodo quis ex eu commodo officia aliquip irure. Non dolore elit excepteur id laboris irure consequat magna consectetur. Qui proident deserunt culpa tempor sit aute velit proident cillum ea.   6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt   Ex minim pariatur est nisi exercitation exercitation reprehenderit id aliqua deserunt est. Laborum ullamco do ipsum minim ipsum aliquip voluptate voluptate aliqua. Magna proident velit veniam et minim commodo officia officia mollit nisi. Excepteur occaecat deserunt irure adipisicing minim adipisicing cupidatat non anim exercitation ex. Amet quis sunt sint veniam non id nisi ipsum mollit voluptate quis tempor tempor.  ","categories": [],
        "tags": ["table of contents"],
        "url": "/layout-table-of-contents-include-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Nested Table of Contents",
        "excerpt":"Tests table of contents with multiple levels to verify indentation is readible.   Enim laboris id ea elit elit deserunt   Magna incididunt elit id enim nisi quis excepteur reprehenderit Lorem dolore dolore ad enim. Labore esse elit excepteur et elit dolor. Elit ut consectetur labore velit elit esse voluptate id commodo. Magna cillum officia consequat non occaecat mollit esse nisi quis.   Nostrud veniam excepteur commodo enim pariatur velit est. Dolor consequat elit occaecat enim veniam ullamco qui est anim ex elit. Est minim aute magna laborum reprehenderit magna reprehenderit ullamco voluptate id sit aliqua. Id labore veniam ad duis aliquip commodo qui ex ut ipsum irure. In et sit ea cupidatat consectetur in nisi amet in cupidatat excepteur commodo amet.   2 Sit adipisicing tempor duis velit cupidatat occaecat do amet   Ad non dolore irure in. In do ut nostrud reprehenderit consequat aliqua sunt culpa voluptate amet minim ea. Eu dolore deserunt consectetur eu in minim sit nulla id id est amet consectetur. Tempor dolore ipsum magna amet velit aliquip ea anim non eu Lorem deserunt. Irure excepteur id adipisicing elit dolor ipsum eiusmod non nulla nisi sint qui et. Occaecat pariatur tempor ex nisi pariatur.   Proident culpa nostrud id est qui fugiat duis aute. Cillum commodo pariatur nostrud culpa Lorem exercitation non. Consequat elit deserunt dolore voluptate sunt labore minim ut consequat minim.   Sunt pariatur in ex non nulla proident ex ullamco Lorem do ipsum. Cillum est mollit reprehenderit excepteur labore labore elit dolore adipisicing ad quis quis aliqua sunt. Proident amet est reprehenderit deserunt amet cupidatat incididunt irure est elit.   2.1 Ex et quis exercitation fugiat excepteur eiusmod mollit consequat id pariatur non adipisicing magna tempor   Nostrud sunt nostrud incididunt adipisicing officia esse minim irure duis dolore adipisicing cupidatat. Eu non labore veniam ad sunt pariatur qui. Irure reprehenderit qui elit duis cillum sit officia consectetur sint deserunt do aute velit. Do id occaecat magna occaecat reprehenderit veniam pariatur Lorem. Officia sit cupidatat adipisicing laborum.   2.1.1 Ut nostrud reprehenderit proident culpa enim irure cupidatat sunt ex ea minim nostrud   Laborum laboris et ut proident sit qui pariatur nisi commodo. Deserunt eiusmod eiusmod elit anim exercitation quis. Anim laboris irure minim elit fugiat velit esse officia amet reprehenderit id. Dolor eiusmod incididunt excepteur sint aute qui esse nostrud. Nisi qui adipisicing consectetur enim pariatur sint veniam esse.   2.1.2 Nisi non nisi ullamco ipsum cillum  Minim officia tempor eiusmod sint magna reprehenderit do amet ex velit. Irure nulla ut veniam eu veniam proident esse pariatur cillum. Esse anim et proident cillum esse magna sint.   2.1.3 Ut pariatur do do eiusmod consequat do pariatur nisi ex anim reprehenderit nostrud  Reprehenderit consectetur tempor labore dolore ad. Ullamco qui sunt quis deserunt id ipsum sit qui nisi esse deserunt ad exercitation. Dolore qui in mollit ex qui minim et ipsum reprehenderit. Tempor magna ipsum proident voluptate mollit quis consectetur veniam non aliquip cupidatat nisi culpa aute.   2.1.1.1 Ut aute quis ipsum fugiat dolor  Occaecat excepteur et ea et exercitation ad aute minim incididunt incididunt aute sint officia aliquip. Quis cupidatat nostrud dolor consequat laboris eu ullamco qui esse excepteur aute. Veniam ut ipsum aute Lorem proident minim ea fugiat Lorem cillum. Qui esse id minim consequat ullamco aliqua pariatur ea mollit. Minim ea ipsum laborum consequat esse mollit pariatur. Voluptate sit voluptate non ut consectetur irure laboris ex adipisicing dolore elit aliquip velit. In eu veniam voluptate incididunt aute eu reprehenderit ut id voluptate.   2.1.1.2 Consequat nostrud quis officia et aliquip quis magna mollit veniam  Magna duis exercitation dolor amet. Ea irure laborum sit officia reprehenderit enim aute magna duis. Elit fugiat ut proident sit.   2.1.1.1.1 Id cillum proident labore occaecat reprehenderit excepteur fugiat est   Irure qui veniam incididunt irure consequat mollit consectetur est nostrud deserunt eiusmod nostrud quis. Eiusmod id proident eu aute exercitation irure consectetur sit dolor dolor in esse. Qui eu dolor ea est magna amet laborum qui irure. Reprehenderit excepteur voluptate fugiat exercitation voluptate laboris nostrud qui magna et officia.   2.1.1.1.2 In consectetur ea qui quis culpa nulla   Ad quis duis dolore voluptate laborum eiusmod consequat sint. Cupidatat officia ex laborum ad non mollit excepteur ea. Nostrud elit in consequat sunt adipisicing reprehenderit ipsum proident irure. Sint velit laborum sint laboris ea. Veniam occaecat et in Lorem proident minim deserunt labore laborum reprehenderit. Consequat laborum deserunt culpa consectetur. Incididunt reprehenderit amet esse duis dolore pariatur adipisicing quis elit.   2.1.1.1.3 Culpa magna pariatur magna officia adipisicing ex minim ea do est   Dolore reprehenderit aute ex id. Ipsum laboris sit quis enim labore ut sint cillum exercitation. Commodo aliqua exercitation enim sunt velit do laborum mollit irure dolor.   2.1.1.1.4 Veniam ipsum non reprehenderit pariatur   Laboris amet quis sunt id dolor consectetur Lorem id aliquip laboris fugiat. Non ex magna deserunt veniam eiusmod. Irure culpa culpa dolore pariatur. Elit enim deserunt ut amet adipisicing elit laborum exercitation cupidatat et. Aliqua aliqua laborum exercitation commodo reprehenderit reprehenderit amet laboris ea ea ex amet in. Aute minim voluptate et ipsum culpa consequat.   2.1.1.3 Ut qui labore officia ad laboris eu amet minim tempor qui cupidatat duis aute   In in dolore laboris irure est consequat magna ea non aute cupidatat tempor. Officia sit pariatur consequat laborum aliqua nulla anim nisi aliquip reprehenderit consequat. Ad duis labore minim consequat reprehenderit labore ex minim cillum magna incididunt adipisicing dolor. Non velit mollit minim consectetur minim. Cillum elit et amet est reprehenderit non. Elit adipisicing nostrud ea veniam occaecat commodo deserunt.   2.1.1.4 Magna ipsum nisi velit anim   Eiusmod tempor dolor proident pariatur consequat sit non nostrud. Eiusmod duis elit esse Lorem dolore et minim elit consectetur eu ullamco. Adipisicing sunt excepteur eu mollit in nostrud.   2.1.1.4.1 Mollit nulla est tempor fugiat occaecat nostrud   Exercitation eu labore Lorem culpa id enim ut officia aute proident in est irure. Nostrud adipisicing magna elit tempor ipsum culpa in incididunt consectetur incididunt veniam aute tempor sint. Officia est consectetur sint sint nostrud proident mollit. Dolore duis proident mollit consectetur tempor.   2.1.1.2.1 Culpa aliquip irure et nostrud esse consequat fugiat dolor   Ad ut commodo elit amet officia ipsum labore do amet. Eiusmod sint irure magna proident nisi adipisicing mollit excepteur mollit proident culpa duis. Est reprehenderit consequat eiusmod deserunt duis ipsum esse amet incididunt.   2.1.4 Laboris exercitation nisi tempor dolore   Elit culpa est eiusmod nostrud occaecat. Labore incididunt nostrud consectetur sint. Ut pariatur laborum incididunt culpa proident incididunt veniam veniam laboris adipisicing mollit. Ullamco magna tempor fugiat veniam in ipsum nisi mollit labore amet et sit quis. In consectetur fugiat Lorem culpa veniam minim. Irure aliqua est mollit consectetur id Lorem velit minim sit velit. Eiusmod magna do dolor est id reprehenderit minim fugiat minim incididunt incididunt laboris velit consequat.   2.2 Officia irure duis et est sunt   Consequat anim quis non nulla. Eiusmod pariatur sunt non culpa culpa ipsum nulla anim in. Non ad exercitation ut reprehenderit ut dolor laborum tempor ad qui magna fugiat irure. Sint commodo ea sint sunt. Irure qui pariatur tempor veniam reprehenderit amet est. Amet laboris proident Lorem deserunt proident duis esse do sit eu dolor qui duis eu. Mollit laboris nisi aute nulla consectetur exercitation nulla aliqua anim.   3 Laborum eu magna proident proident tempor   Occaecat aliqua id voluptate mollit aliquip. Elit excepteur magna esse commodo pariatur reprehenderit in in quis. Id dolore proident proident mollit tempor duis magna ullamco nulla velit consequat. In ut est aliquip in commodo ullamco sit sint.   3.1 Amet enim do laboris ipsum aliqua eiusmod non eu   Laborum magna deserunt do anim quis proident adipisicing. Dolore qui ex minim reprehenderit. Consectetur in cillum ad dolore ut id deserunt irure aute sint magna dolore adipisicing.   3.2 Do exercitation ex elit incididunt sit cupidatat   Excepteur aliqua nisi ullamco sunt fugiat laborum elit aliquip officia culpa. Est exercitation enim laborum amet exercitation. Eu quis qui eiusmod incididunt id do aliquip nostrud do esse enim excepteur enim pariatur. Aute adipisicing velit non culpa quis exercitation. Quis cupidatat anim occaecat Lorem ad mollit aute eiusmod quis dolor duis. Proident anim et nostrud ut aliquip irure adipisicing reprehenderit proident dolore magna. Consequat eu fugiat esse proident duis eu proident fugiat laboris ea veniam nisi reprehenderit.   3.3 Officia aliquip fugiat ex pariatur nisi et nostrud adipisicing eu minim laboris eiusmod ea sunt   Consectetur irure elit nulla elit non officia. Culpa Lorem minim dolor laboris enim labore do minim laborum. Fugiat deserunt nisi ut do incididunt incididunt ea anim exercitation sit duis. Irure esse pariatur labore enim labore qui anim culpa laborum velit consequat. Culpa in adipisicing excepteur est ipsum. In reprehenderit eiusmod ad ad non.   3.4 Ipsum velit laborum est nostrud qui enim ullamco velit dolor Lorem magna   Nulla magna dolor minim commodo. Sunt nulla cupidatat consequat eiusmod elit irure eiusmod excepteur. Sit incididunt irure minim magna. Tempor ipsum exercitation minim sunt labore dolor ullamco veniam enim nisi veniam adipisicing occaecat proident.   3.5 Officia fugiat fugiat voluptate ullamco eiusmod duis minim aliqua consequat consectetur qui do sunt fugiat   Non aute culpa irure qui aute adipisicing aute id commodo id. Laborum ullamco laboris velit in quis duis ut consequat do minim. In minim amet ut reprehenderit et voluptate. In quis Lorem occaecat nostrud excepteur nostrud dolore in nulla ad Lorem nisi. Dolor exercitation Lorem qui sint aute ipsum officia eiusmod aliquip Lorem sit. Reprehenderit ex veniam excepteur laboris magna dolore fugiat sit exercitation esse et consequat in sit. Incididunt pariatur ad esse anim aute do id eu.   3.5.1 Mollit laborum ea aliquip mollit quis commodo fugiat tempor deserunt exercitation sint culpa ipsum tempor   Est cillum laborum cupidatat ullamco cupidatat magna laborum enim duis consequat est eu. Magna cillum Lorem proident non ut officia. Esse irure et laboris eu occaecat aute.   3.5.1.1 Nisi anim commodo consequat quis amet   Sunt eu dolor enim enim consectetur et anim irure dolor velit cillum. Esse reprehenderit cillum incididunt adipisicing amet nostrud adipisicing. Minim mollit nostrud ipsum ea ut sit ex elit. Do esse ad et ipsum nisi sint anim culpa excepteur ipsum. Commodo nisi irure qui reprehenderit incididunt.   3.5.1.1.1 Culpa nulla Lorem adipisicing ut sit cupidatat laborum laborum cupidatat proident   Dolore dolor sit sunt anim eu amet consectetur quis ea proident ex aliqua. Sunt laborum consectetur consectetur enim velit eiusmod labore commodo commodo laboris deserunt. Eiusmod enim do amet laborum commodo qui.   3.6 Reprehenderit culpa consectetur veniam minim cillum in nostrud   Lorem dolore sit aliqua tempor do voluptate ut esse. Minim velit ad velit commodo minim laborum. Qui qui reprehenderit non proident ullamco veniam aliquip.   4 Laboris aute consequat id eu et Lorem amet   Ad qui voluptate dolor veniam. Veniam mollit aute eiusmod eu labore incididunt sint proident. Non minim consequat anim sint. Aliquip non nisi nostrud proident. Eiusmod ut duis commodo sunt laboris irure eu. Laboris quis amet ad qui officia.   5 Esse eu consequat consequat aliqua fugiat nulla ad labore consectetur eu pariatur nisi aute   Duis proident ullamco fugiat aliqua sunt anim ea do irure est amet quis nulla cillum. Commodo voluptate dolor culpa sint aliquip voluptate exercitation anim cillum ad eu in amet. Sint fugiat qui commodo quis ex eu commodo officia aliquip irure. Non dolore elit excepteur id laboris irure consequat magna consectetur. Qui proident deserunt culpa tempor sit aute velit proident cillum ea.   6 Aliquip sunt laborum excepteur cupidatat officia ad tempor veniam esse amet ea commodo sunt   Ex minim pariatur est nisi exercitation exercitation reprehenderit id aliqua deserunt est. Laborum ullamco do ipsum minim ipsum aliquip voluptate voluptate aliqua. Magna proident velit veniam et minim commodo officia officia mollit nisi. Excepteur occaecat deserunt irure adipisicing minim adipisicing cupidatat non anim exercitation ex. Amet quis sunt sint veniam non id nisi ipsum mollit voluptate quis tempor tempor.  ","categories": [],
        "tags": ["table of contents"],
        "url": "/layout-table-of-contents-indent-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Table of Contents",
        "excerpt":"Enable table of contents on post or page by adding toc: true to its YAML Front Matter. The title and icon can also be changed with:   --- toc: true toc_label: \"Unique Title\" toc_icon: \"heart\"  # corresponding Font Awesome icon name (without fa prefix) ---   HTML Elements   Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.   Body text   Lorem ipsum dolor sit amet, test link adipiscing elit. This is strong. Nullam dignissim convallis est. Quisque aliquam.      This is emphasized. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.   HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.   Blockquotes      Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.    List Types   Ordered Lists      Item one            sub item one       sub item two       sub item three           Item two   Unordered Lists      Item one   Item two   Item three   Tables                  Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Code Snippets   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn btn--success\"&gt;Success Button&lt;/a&gt;   Primary Button Success Button Warning Button Danger Button Info Button  Notices   Watch out! You can also add notices by appending {: .notice} to a paragraph.  ","categories": [],
        "tags": ["table of contents"],
        "url": "/layout-table-of-contents-post/",
        "teaser": null
      },{
        "title": "Layout: Post with Sticky Table of Contents",
        "excerpt":"“Stick” table of contents to the top of a page by adding toc_sticky: true to its YAML Front Matter.   --- toc: true toc_sticky: true ---   HTML Elements   Below is just about everything you’ll need to style in the theme. Check the source code to see the many embedded elements within paragraphs.   Body text   Lorem ipsum dolor sit amet, test link adipiscing elit. This is strong. Nullam dignissim convallis est. Quisque aliquam.      This is emphasized. Donec faucibus. Nunc iaculis suscipit dui. 53 = 125. Water is H2O. Nam sit amet sem. Aliquam libero nisi, imperdiet at, tincidunt nec, gravida vehicula, nisl. The New York Times (That’s a citation). Underline.Maecenas ornare tortor. Donec sed tellus eget sapien fringilla nonummy. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus.   HTML and CSS are our tools. Mauris a ante. Suspendisse quam sem, consequat at, commodo vitae, feugiat in, nunc. Morbi imperdiet augue quis tellus. Praesent mattis, massa quis luctus fermentum, turpis mi volutpat justo, eu volutpat enim diam eget metus.   Blockquotes      Lorem ipsum dolor sit amet, test link adipiscing elit. Nullam dignissim convallis est. Quisque aliquam.    List Types   Ordered Lists      Item one            sub item one       sub item two       sub item three           Item two   Unordered Lists      Item one   Item two   Item three   Tables                  Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Code Snippets   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn btn--success\"&gt;Success Button&lt;/a&gt;   Primary Button Success Button Warning Button Danger Button Info Button  Notices   Watch out! You can also add notices by appending {: .notice} to a paragraph.  ","categories": [],
        "tags": ["table of contents"],
        "url": "/layout-table-of-contents-sticky/",
        "teaser": null
      },{
        "title": "Layout: Code Excerpt (Generated)",
        "excerpt":"This is the post content with inline code, (e.g. &lt;span style=\"color: red;\"&gt;red&lt;/span&gt;. It should be displayed in place of the auto-generated excerpt in single-page views. Archive-index pages should display an auto-generated excerpt of this content.   Be sure to test the formatting of the auto-generated excerpt, to ensure that it doesn’t create any layout problems.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "/layout/uncategorized/layout-code-excerpt-generated/",
        "teaser": null
      },{
        "title": "Layout: Excerpt (Defined)",
        "excerpt":"This is the post content. It should be displayed in place of the user-defined excerpt in archive-index pages.   This paragraph should be absent from an archive-index page where post.excerpt is shown.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "/layout/uncategorized/layout-excerpt-defined/",
        "teaser": null
      },{
        "title": "Layout: Excerpt (Generated)",
        "excerpt":"This is the post content. Archive-index pages should display an auto-generated excerpt of this content.     Be sure to test the formatting of the auto-generated excerpt, to ensure that it doesn’t create any layout problems.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","excerpt","layout"],
        "url": "/layout/uncategorized/layout-excerpt-generated/",
        "teaser": null
      },{
        "title": "Layout: Author Override",
        "excerpt":"Sites that may have content authored from various individuals can be accommodated by using data files.   To attribute an author to a post or page that is different from the site author specified in _config.yml:   Step 1. Create _data/authors.yml and add authors using the following format. Anything variables found under author in _config.yml can be used (e.g. name, bio, avatar, author links, etc.).   # /_data/authors.yml  Billy Rick:   name        : \"Billy Rick\"   bio         : \"What do you want, jewels? I am a very extravagant man.\"   avatar      : \"/assets/images/bio-photo-2.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:billyrick@rick.com\"     - label: \"Website\"       icon: \"fas fa-fw fa-link\"       url: \"https://thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/extravagantman\"  Cornelius Fiddlebone:   name        : \"Cornelius Fiddlebone\"   bio         : \"I ordered what?\"   avatar      : \"/assets/images/bio-photo.jpg\"   links:     - label: \"Email\"       icon: \"fas fa-fw fa-envelope-square\"       url: \"mailto:cornelius@thewhip.com\"     - label: \"Twitter\"       icon: \"fab fa-fw fa-twitter-square\"       url: \"https://twitter.com/rhymeswithsackit\"   Step 2. Assign one of the authors in authors.yml to a post or page you wish to override the site.author with.   Example: To assign Billy Rick as an author for a post the following YAML Front Matter would be applied:   author: Billy Rick  ","categories": [],
        "tags": [],
        "url": "/layout-author-override/",
        "teaser": null
      },{
        "title": "Layout: Author Sidebar Disabled",
        "excerpt":"This post has the author sidebar disabled.   To disable add author_profile: false to YAML Front Matter.  ","categories": [],
        "tags": [],
        "url": "/layout-author-sidebar-disabled/",
        "teaser": null
      },{
        "title": "Layout: Header Image (External URL)",
        "excerpt":"This post should display a header image, if the theme supports it.   Featured image is an external asset and should load.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "/layout/uncategorized/layout-header-image-external/",
        "teaser": null
      },{
        "title": "Layout: Header Image (Horizontal)",
        "excerpt":"This post should display a header image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests a horizontal header image.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "/layout/uncategorized/layout-header-image-horizontal/",
        "teaser": null
      },{
        "title": "Layout: Header Image and Text Readability",
        "excerpt":"This is a sample post with a large feature image1 up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.                  Texture image courtesty of Lovetextures &#8617;           ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "/layout-header-image-text-readability/",
        "teaser": null
      },{
        "title": "Layout: Header Image (Vertical)",
        "excerpt":"This post should display a header image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests a vertical header image.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","featured image","image","layout"],
        "url": "/layout/uncategorized/layout-header-image-vertical/",
        "teaser": null
      },{
        "title": "Layout: Header Overlay with Background Fill",
        "excerpt":"This post should display a header with a solid background color, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay headers.  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/layout-header-overlay-color/",
        "teaser": null
      },{
        "title": "Layout: Header Image Overlay with Custom Tagline",
        "excerpt":"This post should display a header with an overlay image and custom tagline, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay header images with custom page.tagline.   tagline: \"This is a custom tagline content which overrides the default page excerpt.\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/layout-header-overlay-image-tagline/",
        "teaser": null
      },{
        "title": "Layout: Header Image Overlay",
        "excerpt":"This post should display a header with an overlay image, if the theme supports it.   Non-square images can provide some unique styling issues.   This post tests overlay header images.   Overlay filter   You can use it by specifying the opacity (between 0 and 1) of a black overlay like so:      excerpt: \"This post should [...]\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   overlay_filter: 0.5 # same as adding an opacity of 0.5 to a black background   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"More Info\"       url: \"https://unsplash.com\"   Or if you want to do more fancy things, go full rgba:      excerpt: \"This post should [...]\" header:   overlay_image: /assets/images/unsplash-image-1.jpg   overlay_filter: rgba(255, 0, 0, 0.5)   caption: \"Photo credit: [**Unsplash**](https://unsplash.com)\"   actions:     - label: \"More Info\"       url: \"https://unsplash.com\"  ","categories": ["Layout","Uncategorized"],
        "tags": ["edge case","image","layout"],
        "url": "/layout/uncategorized/layout-header-overlay-image/",
        "teaser": null
      },{
        "title": "Layout: More Tag",
        "excerpt":"This content is before the excerpt separator tag.   Additional content before the more tag.     And this content is after the more tag.  ","categories": ["Layout","Uncategorized"],
        "tags": ["content","read more","layout"],
        "url": "/layout/uncategorized/layout-more-tag/",
        "teaser": null
      },{
        "title": "Layout: Sidebar Custom",
        "excerpt":"This post has a custom sidebar set in the post’s YAML Front Matter.   An example of how that YAML could look is:   sidebar:   - title: \"Title\"     image: \"/assets/images/your-image.jpg\"     image_alt: \"image\"     text: \"Some text here.\"   - title: \"Another Title\"     text: \"More text here.\"     nav: sidebar-sample  ","categories": [],
        "tags": [],
        "url": "/layout-sidebar-custom/",
        "teaser": null
      },{
        "title": "Layout: Sidebar with Navigation List",
        "excerpt":"This post has a custom navigation list set in the post’s YAML Front Matter.   sidebar:   title: \"Sample Title\"   nav: sidebar-sample   Along with navigation elements set in _data/navigation.yml.   sidebar-sample:   - title: \"Parent Page A\"     children:       - title: \"Child Page A1\"         url: /       - title: \"Child Page A2\"         url: /       - title: \"Child Page A3\"         url: /       - title: \"Child Page A4\"         url: /   - title: \"Parent Page B\"     children:       - title: \"Child Page B1\"         url: /       - title: \"Child Page B2\"         url: /       - title: \"Child Page B3\"         url: /       - title: \"Child Page B4\"         url: /       - title: \"Child Page B5\"         url: /   - title: \"Parent Page C\"     children:       - title: \"Child Page C1\"         url: /       - title: \"Child Page C2\"         url: /       - title: \"Child Page C3\"         url: /       - title: \"Child Page C4\"         url: /       - title: \"Child Page C5\"         url: /   - title: \"Parent Page D\"     children:       - title: \"Child Page D1\"         url: /       - title: \"Child Page D2\"         url: /  ","categories": [],
        "tags": [],
        "url": "/layout-sidebar-nav-list/",
        "teaser": null
      },{
        "title": "Wide Single Layout Page",
        "excerpt":"When using layout: single add the following front matter to a page or post to widen the main content:   classes: wide   Portland in shoreditch Vice, labore typewriter pariatur hoodie fap sartorial Austin. Pinterest literally occupy Schlitz forage. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.  ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "/markup-text-readability-wide-page/",
        "teaser": null
      },{
        "title": "Markup: Text Readability Test",
        "excerpt":"Portland in shoreditch Vice, labore typewriter pariatur hoodie fap sartorial Austin. Pinterest literally occupy Schlitz forage. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Cupidatat 90’s lo-fi authentic try-hard   In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s.      Sartorial hoodie   Labore viral forage   Tote bag selvage   DIY exercitation et id ugh tumblr church-key   Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.   Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.   Forage occaecat cardigan qui   Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.      Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.    Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.   Hoodie Duis   Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.   Thundercats Ho!   Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.   Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.   Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.  ","categories": [],
        "tags": ["sample post","readability","test"],
        "url": "/markup-text-readability/",
        "teaser": null
      },{
        "title": "Markup: Title *with* **Markdown**",
        "excerpt":"Verify that:      The post title renders the word “with” in italics and the word “Markdown” in bold.   The post title markup should be removed from the browser window / tab.  ","categories": ["Markdown"],
        "tags": ["css","html","title"],
        "url": "/markdown/markup-title-with-markup/",
        "teaser": null
      },{
        "title": "Markup: Title with Special&nbsp;---&nbsp;Characters",
        "excerpt":"Putting special characters in the title should have no adverse effect on the layout or functionality.   Special characters in the post title have been known to cause issues with JavaScript and XML when not properly encoded and escaped.   Latin Character Tests   This is a test to see if the fonts used in this theme support basic Latin characters.                  !                      &#8220;                      #                      $                      %                      &amp;                      &#8216;                      (                      )                      *                          +                      ,                      &#8211;                      .                      /                                     1                      2                      3                      4                          5                      6                      7                      8                      9                      :                      ;                      &gt;                      =                      &lt;                          ?                      @                      A                      B                      C                      D                      E                      F                      G                      H                          I                      J                      K                      L                      M                      N                      O                      P                      Q                      R                          S                      T                      U                      V                      W                      X                      Y                      Z                      [                                         ]                      ^                      _                      `                      a                      b                      c                      d                      e                      f                          g                      h                      i                      j                      k                      l                      m                      n                      o                      p                          q                      r                      s                      t                      u                      v                      w                      x                      y                      z                          {                      |                      }                      ~                                                                                                    ","categories": ["Markup"],
        "tags": ["html","markup","post","title"],
        "url": "/markup/markup-title-with-special-characters/",
        "teaser": null
      },{
        "title": "Markup: Text Alignment",
        "excerpt":"Default   This is a paragraph. It should not have any alignment of any kind. It should just flow like you would normally expect. Nothing fancy. Just straight up text, free flowing, with love. Completely neutral and not picking a side or sitting on the fence. It just is. It just freaking is. It likes where it is. It does not feel compelled to pick a side. Leave him be. It will just be better that way. Trust me.   Left Align   This is a paragraph. It is left aligned. Because of this, it is a bit more liberal in it’s views. It’s favorite color is green. Left align tends to be more eco-friendly, but it provides no concrete evidence that it really is. Even though it likes share the wealth evenly, it leaves the equal distribution up to justified alignment.   Center Align   This is a paragraph. It is center aligned. Center is, but nature, a fence sitter. A flip flopper. It has a difficult time making up its mind. It wants to pick a side. Really, it does. It has the best intentions, but it tends to complicate matters more than help. The best you can do is try to win it over and hope for the best. I hear center align does take bribes.   Right Align   This is a paragraph. It is right aligned. It is a bit more conservative in it’s views. It’s prefers to not be told what to do or how to do it. Right align totally owns a slew of guns and loves to head to the range for some practice. Which is cool and all. I mean, it’s a pretty good shot from at least four or five football fields away. Dead on. So boss.   Justify Align   This is a paragraph. It is justify aligned. It gets really mad when people associate it with Justin Timberlake. Typically, justified is pretty straight laced. It likes everything to be in it’s place and not all cattywampus like the rest of the aligns. I am not saying that makes it better than the rest of the aligns, but it does tend to put off more of an elitist attitude.  ","categories": ["Markup"],
        "tags": ["alignment","content","css","markup"],
        "url": "/markup/markup-text-alignment/",
        "teaser": null
      },{
        "title": "Markup: Image Alignment",
        "excerpt":"Welcome to image alignment! The best way to demonstrate the ebb and flow of the various image positioning options is to nestle them snuggly among an ocean of words. Grab a paddle and let’s get started.      The image above happens to be centered.    The rest of this paragraph is filler for the sake of seeing the text wrap around the 150×150 image, which is left aligned.   As you can see there should be some space above, below, and to the right of the image. The text should not be creeping on the image. Creeping is just not right. Images need breathing room too. Let them speak like you words. Let them do their jobs without any hassle from the text. In about one more sentence here, we’ll see that the text moves from the right of the image down below the image in seamless transition. Again, letting the do it’s thing. Mission accomplished!   And now for a massively large image. It also has no alignment.      The image above, though 1200px wide, should not overflow the content area. It should remain contained with no visible disruption to the flow of content.      And now we’re going to shift things to the right align. Again, there should be plenty of room above, below, and to the left of the image. Just look at him there — Hey guy! Way to rock that right side. I don’t care what the left aligned image says, you look great. Don’t let anyone else tell you differently.   In just a bit here, you should see the text start to wrap below the right aligned image and settle in nicely. There should still be plenty of room and everything should be sitting pretty. Yeah — Just like that. It never felt so good to be right.   And just when you thought we were done, we’re going to do them all over again with captions!         Look at 580 x 300 getting some love.   The figure above happens to be centered. The caption also has a link in it, just to see if it does anything funky.         Itty-bitty caption.   The rest of this paragraph is filler for the sake of seeing the text wrap around the 150×150 image, which is left aligned.   As you can see there should be some space above, below, and to the right of the image. The text should not be creeping on the image. Creeping is just not right. Images need breathing room too. Let them speak like you words. Let them do their jobs without any hassle from the text. In about one more sentence here, we’ll see that the text moves from the right of the image down below the image in seamless transition. Again, letting the do it’s thing. Mission accomplished!   And now for a massively large image. It also has no alignment.         Massive image comment for your eyeballs.   The figure element above has an inline style of width: 1200px set which should break it outside of the normal content flow.         Feels good to be right all the time.   And now we’re going to shift things to the right align. Again, there should be plenty of room above, below, and to the left of the image. Just look at him there — Hey guy! Way to rock that right side. I don’t care what the left aligned image says, you look great. Don’t let anyone else tell you differently.   In just a bit here, you should see the text start to wrap below the right aligned image and settle in nicely. There should still be plenty of room and everything should be sitting pretty. Yeah — Just like that. It never felt so good to be right.   And that’s a wrap, yo! You survived the tumultuous waters of alignment. Image alignment achievement unlocked!  ","categories": ["Markup"],
        "tags": ["alignment","captions","content","css","image","markup"],
        "url": "/markup/markup-image-alignment/",
        "teaser": null
      },{
        "title": "Markup: HTML Tags and Formatting",
        "excerpt":"A variety of common markup showing how the theme styles them.   Header two   Header three   Header four   Header five   Header six   Blockquotes   Single line blockquote:      Stay hungry. Stay foolish.    Multi line blockquote with a cite reference:      People think focus means saying yes to the thing you’ve got to focus on. But that’s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I’m actually as proud of the things we haven’t done as the things I have done. Innovation is saying no to 1,000 things.    Steve Jobs — Apple Worldwide Developers’ Conference, 1997   Tables                  Employee       Salary                               John Doe       $1       Because that’s all Steve Jobs needed for a salary.                 Jane Doe       $100K       For all the blogging she does.                 Fred Bloggs       $100M       Pictures are worth a thousand words, right? So Jane × 1,000.                 Jane Bloggs       $100B       With hair like that?! Enough said.                          Header1       Header2       Header3                       cell1       cell2       cell3                 cell4       cell5       cell6                       cell1       cell2       cell3                 cell4       cell5       cell6                       Foot1       Foot2       Foot3           Definition Lists      Definition List Title   Definition list division.   Startup   A startup company or startup is a company or temporary organization designed to search for a repeatable and scalable business model.   #dowork   Coined by Rob Dyrdek and his personal body guard Christopher “Big Black” Boykins, “Do Work” works as a self motivator, to motivating your friends.   Do It Live   I’ll let Bill O’Reilly explain this one.   Unordered Lists (Nested)      List item one            List item one                    List item one           List item two           List item three           List item four                       List item two       List item three       List item four           List item two   List item three   List item four   Ordered List (Nested)      List item one            List item one                    List item one           List item two           List item three           List item four                       List item two       List item three       List item four           List item two   List item three   List item four   Forms           Personalia:     Name:       Email:       Date of birth:       Buttons   Make any link standout more when applying the .btn class.   &lt;a href=\"#\" class=\"btn--success\"&gt;Success Button&lt;/a&gt;   Default Button Primary Button Success Button Warning Button Danger Button Info Button Inverse Button Light Outline Button   [Default Button Text](#link){: .btn} [Primary Button Text](#link){: .btn .btn--primary} [Success Button Text](#link){: .btn .btn--success} [Warning Button Text](#link){: .btn .btn--warning} [Danger Button Text](#link){: .btn .btn--danger} [Info Button Text](#link){: .btn .btn--info} [Inverse Button](#link){: .btn .btn--inverse} [Light Outline Button](#link){: .btn .btn--light-outline}   X-Large Button Large Button Default Button Small Button   [X-Large Button](#link){: .btn .btn--primary .btn--x-large} [Large Button](#link){: .btn .btn--primary .btn--large} [Default Button](#link){: .btn .btn--primary } [Small Button](#link){: .btn .btn--primary .btn--small}   Notices   Watch out! This paragraph of text has been emphasized with the {: .notice} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--primary} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--info} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--warning} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--success} class.   Watch out! This paragraph of text has been emphasized with the {: .notice--danger} class.   HTML Tags   Address Tag      1 Infinite Loop  Cupertino, CA 95014  United States   Anchor Tag (aka. Link)   This is an example of a link.   Abbreviation Tag   The abbreviation CSS stands for “Cascading Style Sheets”.   Cite Tag   “Code is poetry.” —Automattic   Code Tag   You will learn later on in these tests that word-wrap: break-word; will be your best friend.   Strike Tag   This tag will let you strikeout text.   Emphasize Tag   The emphasize tag should italicize text.   Insert Tag   This tag should denote inserted text.   Keyboard Tag   This scarcely known tag emulates keyboard text, which is usually styled like the &lt;code&gt; tag.   Preformatted Tag   This tag styles large blocks of code.    .post-title { \tmargin: 0 0 5px; \tfont-weight: bold; \tfont-size: 38px; \tline-height: 1.2; \tand here's a line of some really, really, really, really long text, just to see how the PRE tag handles it and to find out how it overflows; }   Quote Tag   Developers, developers, developers… –Steve Ballmer   Strong Tag   This tag shows bold text.   Subscript Tag   Getting our science styling on with H2O, which should push the “2” down.   Superscript Tag   Still sticking with science and Albert Einstein’s E = MC2, which should lift the 2 up.   Variable Tag   This allows you to denote variables.  ","categories": ["Markup"],
        "tags": ["content","css","formatting","html","markup"],
        "url": "/markup/markup-html-tags-and-formatting/",
        "teaser": "/assets/images/markup-syntax-highlighting-teaser.jpg"
      },{
        "title": "Markup: Another Post with Images",
        "excerpt":"Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use figure with the appropriate class. Each instance of figure is auto-numbered and displayed in the caption.   Figures (for images or video)   One Up    \t \tMorning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr.   Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.   Two Up   Apply the half class like so to display two images side by side that share the same caption.   &lt;figure class=\"half\"&gt;     &lt;a href=\"/assets/images/image-filename-1-large.jpg\"&gt;&lt;img src=\"/assets/images/image-filename-1.jpg\"&gt;&lt;/a&gt;     &lt;a href=\"/assets/images/image-filename-2-large.jpg\"&gt;&lt;img src=\"/assets/images/image-filename-2.jpg\"&gt;&lt;/a&gt;     &lt;figcaption&gt;Caption describing these two images.&lt;/figcaption&gt; &lt;/figure&gt;   And you’ll get something that looks like this:    \t \t \tTwo images.   Three Up   Apply the third class like so to display three images side by side that share the same caption.   &lt;figure class=\"third\"&gt; \t&lt;img src=\"/images/image-filename-1.jpg\"&gt; \t&lt;img src=\"/images/image-filename-2.jpg\"&gt; \t&lt;img src=\"/images/image-filename-3.jpg\"&gt; \t&lt;figcaption&gt;Caption describing these three images.&lt;/figcaption&gt; &lt;/figure&gt;   And you’ll get something that looks like this:    \t \t \t \tThree images.  ","categories": [],
        "tags": ["sample post","images","test"],
        "url": "/markup-more-images/",
        "teaser": "http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg"
      },{
        "title": "Markup: Syntax Highlighting",
        "excerpt":"Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.1   GFM Code Blocks   GitHub Flavored Markdown fenced code blocks are supported. To modify styling and highlight colors edit /_sass/syntax.scss.   #container {   float: left;   margin: 0 -240px 0 0;   width: 100%; }   .highlight {   margin: 0;   padding: 1em;   font-family: $monospace;   font-size: $type-size-7;   line-height: 1.8; }  &lt;nav class=\"pagination\" role=\"navigation\"&gt;   {% if page.previous %}     &lt;a href=\"{{ site.url }}{{ page.previous.url }}\" class=\"btn\" title=\"{{ page.previous.title }}\"&gt;Previous article&lt;/a&gt;   {% endif %}   {% if page.next %}     &lt;a href=\"{{ site.url }}{{ page.next.url }}\" class=\"btn\" title=\"{{ page.next.title }}\"&gt;Next article&lt;/a&gt;   {% endif %} &lt;/nav&gt;&lt;!-- /.pagination --&gt;   module Jekyll   class TagIndex &lt; Page     def initialize(site, base, dir, tag)       @site = site       @base = base       @dir = dir       @name = 'index.html'       self.process(@name)       self.read_yaml(File.join(base, '_layouts'), 'tag_index.html')       self.data['tag'] = tag       tag_title_prefix = site.config['tag_title_prefix'] || 'Tagged: '       tag_title_suffix = site.config['tag_title_suffix'] || '&amp;#8211;'       self.data['title'] = \"#{tag_title_prefix}#{tag}\"       self.data['description'] = \"An archive of posts tagged #{tag}.\"     end   end end   Code Blocks in Lists   Indentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., 1.). Usually this will mean indenting 3 spaces instead of 4.      Do step 1.        Now do this:       def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.           Now you can do this.   Jekyll Highlight Tag   An example of a code blocking using Jekyll’s {% highlight %} tag.   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // 'gulp html' -- does nothing // 'gulp html --prod' -- minifies and gzips HTML files for production gulp.task('html', () =&gt; {   return gulp.src(paths.siteFolderName + paths.htmlPattern)     .pipe(when(argv.prod, htmlmin({       removeComments: true,       collapseWhitespace: true,       collapseBooleanAttributes: false,       removeAttributeQuotes: false,       removeRedundantAttributes: false,       minifyJS: true,       minifyCSS: true     })))     .pipe(when(argv.prod, size({title: 'optimized HTML'})))     .pipe(when(argv.prod, gulp.dest(paths.siteFolderName)))     .pipe(when(argv.prod, gzip({append: true})))     .pipe(when(argv.prod, size({       title: 'gzipped HTML',       gzip: true     })))     .pipe(when(argv.prod, gulp.dest(paths.siteFolderName))) });   1 2 3 4 Module[{},   Sqrt[2]   4 ]   GitHub Gist Embed   An example of a Gist embed below.                    http://en.wikipedia.org/wiki/Syntax_highlighting &#8617;           ","categories": [],
        "tags": ["code","syntax highlighting"],
        "url": "/markup-syntax-highlighting/",
        "teaser": "/assets/images/markup-syntax-highlighting-teaser.jpg"
      },{
        "title": "Welcome to Jekyll!",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.   Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "/jekyll/welcome-to-jekyll/",
        "teaser": "/assets/images/500x300.png"
      },{
        "title": "Gemified Theme -- Alpha Release",
        "excerpt":"Jekyll themes distributed as Ruby gems are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to “install it”. Or dealing with merge conflicts when pulling in upstream commits to “upgrade it”.   If you’re interested in testing out Minimal Mistakes as a gemified theme read on. There are a few caveats though:      Support for a theme assets folder was recently added to Jekyll core, but has yet to be released or rolled into the github-pages gem. Meaning you can’t use Minimal Mistakes as a Ruby gem there just yet… locally served or self-hosted installs should be fine if you don’t mind using a pre-release version of Jekyll.   Windows users can’t currently use themes packaged as gems due to a bug with file paths in Jekyll core. This is being worked on so hopefully a fix is on the way soon.   Fine with all that? Great. Let’s continue.   If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the _includes, _layouts, _sass partials, or assets this should be quick and painless.   Step 1: Remove Theme Files   Remove _includes, _layouts, _sass, assets folders and files within. You won’t need these anymore as they’re bundled in the theme.   If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as overrides to the versions bundled with the theme.   Step 2: Update Gemfile   In order to test you’ll need to install pre-release gems of Jekyll and Minimal Mistakes.   Start by replacing gem \"github-pages\" or gem \"jekyll\" with the following:   gem \"jekyll\", :git =&gt; \"https://github.com/jekyll/jekyll.git\"   Then add the pre-release Minimal Mistakes theme gem:   gem \"minimal-mistakes-jekyll\", :git =&gt; \"https://github.com/mmistakes/minimal-mistakes.git\", :branch =&gt; \"feature/theme-gem\"`   When finished your Gemfile should look something like this:   source \"https://rubygems.org\"  gem \"jekyll\", :git =&gt; \"https://github.com/jekyll/jekyll.git\" gem \"minimal-mistakes-jekyll\", :git =&gt; \"https://github.com/mmistakes/minimal-mistakes.git\", :branch =&gt; \"feature/theme-gem\"  group :jekyll_plugins do   # gem \"jekyll-archives\"   gem \"jekyll-paginate\"   gem \"jekyll-sitemap\"   gem \"jekyll-gist\"   gem \"jekyll-feed\" end   Step 3: Run Bundler   Run bundle install (or bundle update if you’re updating an existing repo) to install the pre-release gems.   Step 4: Install the Theme   Add theme: \"minimal-mistakes-jekyll\" to your _config.yml file.   If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to properly config.   Please Note: Paths for image headers, overlays, teasers, galleries, and feature rows have changed and now require a full path. Instead of just image: filename.jpg you’ll need to use the full path eg: image: assets/images/filename.jpg. The preferred location is now assets/images but can be placed elsewhere or external hosted. This applies for image references in _config.yml and author.yml.   Step 5: jekyll new Tweaks   If this is a new site be sure to add the following files to _data/ and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.      _data/ui-text.yml - UI text documentation   _data/navigation.yml - navigation documentation   You’ll also need to:      Replace &lt;site root&gt;/index.html with a modified Minimal Mistakes index.html.   Change layout: post in _posts/0000-00-00-welcome-to-jekyll.markdown to layout: single.   Remove about.md, or at the very least change layout: page to layout: single and remove references to icon-github.html (or copy to your _includes if using).     That’s it! If all goes well running bundle exec jekyll serve should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.   File an issue   Thanks!  ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "/jekyll/gemified-theme-alpha/",
        "teaser": null
      },{
        "title": "Gemified Theme -- Beta Release",
        "excerpt":"Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes… as a gemified theme.   minimal-mistakes-jekyll can only be used with Jekyll proper. If you’re hosting on GitHub Pages or using that gem the theme won’t work. 3rd party themes haven’t been white-listed so it’s a no go for now.   Fine with all that? Great. Let’s continue.   If you’re migrating a site already using Minimal Mistakes and haven’t customized any of the _includes, _layouts, _sass partials, or assets this should be quick and painless.   Step 1: Remove Theme Files   Remove _includes, _layouts, _sass, assets folders and files within. You won’t need these anymore as they’re bundled in the theme.   If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as overrides to the versions bundled with the theme.   Step 2: Update Gemfile   Replace gem \"github-pages or gem \"jekyll\" with gem \"jekyll\", \"~&gt; 3.3.0\". You’ll need the latest version of Jekyll1 for Minimal Mistakes to work and load all of the /assets/ properly.   Add the Minimal Mistakes theme gem:   gem \"minimal-mistakes-jekyll\"   When finished your Gemfile should look something like this:   source \"https://rubygems.org\"  gem \"jekyll\", \"~&gt; 3.3.0\" gem \"minimal-mistakes-jekyll\"   Step 3: Run Bundler   Run bundle install (or bundle update if you’re updating an existing repo) to install/update Jekyll and the theme.   Step 4: Install the Theme   Add theme: \"minimal-mistakes-jekyll\" to your _config.yml file.   If you’re migrating from an existing Minimal Mistakes site you shouldn’t have to change anything else after this. If it’s a new site consult then docs to properly config.   Please Note: Paths for image headers, overlays, teasers, galleries, and feature rows have changed and now require a full path. Instead of just image: filename.jpg you’ll need to use the full path eg: image: assets/images/filename.jpg. The preferred location is now assets/images but can be placed elsewhere or external hosted. This all applies for image references in _config.yml and author.yml as well.   Step 5: jekyll new Tweaks   If this is a new site be sure to add the following files to _data/ and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.      _data/ui-text.yml - UI text documentation   _data/navigation.yml - navigation documentation   You’ll also need to:      Replace &lt;site root&gt;/index.html with a modified Minimal Mistakes index.html.   Change layout: post in _posts/0000-00-00-welcome-to-jekyll.markdown to layout: single.   Remove about.md, or at the very least change layout: page to layout: single and remove references to icon-github.html (or copy to your _includes if using).     That’s it! If all goes well running bundle exec jekyll serve should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you’re testing the pre-release Ruby gem version.   File an issue   Thanks!                 You could also run bundle update jekyll to update Jekyll. &#8617;           ","categories": ["Jekyll"],
        "tags": ["update"],
        "url": "/jekyll/gemified-theme-beta/",
        "teaser": null
      },{
        "title": "Layout: Header Video",
        "excerpt":"This post should display a header with a responsive video, if the theme supports it.   Settings                  Parameter       Required       Description                       id       Required       ID of the video                 provider       Required       Hosting provider of the video, either youtube or vimeo           YouTube   To embed the following YouTube video at url https://www.youtube.com/watch?v=-PVofD2A9t8 (long version) or https://youtu.be/-PVofD2A9t8 (short version) into a post or page’s main content you’d use:   {% include video id=\"-PVofD2A9t8\" provider=\"youtube\" %}               To embed it as a video header you’d use the following YAML Front Matter   header:   video:     id: -PVofD2A9t8     provider: youtube   Vimeo   To embed the following Vimeo video at url https://vimeo.com/212731897 into a post or page’s main content you’d use:   {% include video id=\"212731897\" provider=\"vimeo\" %}               To embed it as a video header you’d use the following YAML Front Matter   header:   video:     id: 212731897     provider: vimeo  ","categories": ["Layout","Uncategorized"],
        "tags": ["video","layout"],
        "url": "/layout/uncategorized/layout-header-video/",
        "teaser": null
      },{
        "title": "Buổi si nghĩ nghiêm túc tại 'Đại Bản Doanh'",
        "excerpt":"   Vào một buổi chiều se lạnh của cuối tháng 12, sau khi code sml về, con thì có chồng đón giúp, mình ghé “Đại Bản Doanh” quen thuộc của mình để uống chà sữa :))   Những khoảng lặng như thế này, cùng với ly chà sữa yêu thích và cảm giác tự do tự tại là lúc minh hay si nghĩ sẽ làm cái chi tiếp theo. Mình ngồi và si nghĩ một cách cực kỳ nghiêm túc về cái blog này, vẫn còn hai câu hỏi vẫn bỏ ngỏ:      Đọc giả mục tiêu là ai?   Nội dung mục tiêu là gì?   Nếu mấy bạn có đọc bài “Viết Gì Đây?” thì sẽ thấy là cái chiện ni mình si nghĩ một lần rồi, chứ không phải bây chừ mới nghĩ. Nhưng mà kết quả lần trước nó vẫn mơ hồ sao đó, mình vẫn cảm thấy có gì đó sai sai ;))   Ví dụ như cái vụ viết cho bản thân đi, mới viết có ba bài thôi đã hơi cụt hứng rồi, hỏng lẽ cứ ngồi lảm nhảm một mình hoài cũng kỳ chớ.   Chưa kể những đàn anh của mình có góp ý nhỏ nhỏ, là mi viết cái chi về lập trình đi, chớ viết tào lao rứa thì cạn ý tưởng mất, lại còn cảm thấy cái blog nó tào lao sao đó, đọc cho vui thì được, chớ sau ni lỡ mi bỏ vô CV đi xin việc, người ta nhìn vô ắt sẽ hông tuyển một đứa tào lao từ cơ bản tới nâng cao như zậy được!   Lúc mới nghe cũng tủi, nhưng mà nó đúng quá 🙁   Còn vụ nội dung thì tùm lum luôn, nào là viết kinh nghiệm lập trình, nào là viết tâm sự, nào là review sách chi đó, mình thấy hắn nhiều với mình quá, cảm giác sẽ không kham nổi, và còn nguy cơ loãng(lãng xẹt) cũng cao nữa &gt;.&lt;   Thôi bây chừ mình vô vấn đề chính về vụ si nghĩ nghiêm túc về “đọc giả” và “chủ đề” của blog ni.   À, trước khi vô vấn đề chính, mình quẹo qua giới thiệu sơ cái “Đại Bản Doanh Trà Sữa” ni xí hen   Về tên á, mình không tiện nói ra, sợ lộ, nhưng về vị trí thì nó nằm ngay trung tâm thành phố, nơi rất đông vui của tụi sinh viên học sinh.   Quy mô thì vô cùng to lớn với ít chi cũng 5 lô mặt tiền đường lớn, cộng với số lượng nhân viên cũng tới mấy chục người và có thể tiếp lượng khách uống chà sữa các loại phải gọi là lên vài trăm người là bình thường.   Chưa hết, “Đại Bản Doanh Trà Sữa” ni còn có đồ ngon siêu hạng, mấy sê ri trà sữa Phúc Long, Ding Tea, GongCha đồ thì ngon thiệt cơ mà mắc quá mình chơi không nổi, ở đây vừa ngon giá vừa hợp lý cho nên là khi nào cũng đông vui hết, đến đây không bao giờ thấy cô đơn, dù mình hay đi một mình.   Để cái Đại Bản Doanh ni hắn phát triển được như hôm ni, hồi xưa hắn là mấy quán trà sữa vỉa hè thôi, nhưng khi nào chất lượng nó cũng không đổi. Dù mưa nắng gió sương chi nó vẫn đông đúc hết. Cho nên theo thời gian hắn mới to như ngày hôm ni.   Vì răng mình lại quẹo qua mô tả Đại Bản Doanh Trà Sữa ni, bởi vì mình thấy hắn có vài cái điểm trùng lặp với si nghĩ hiện tại của mình về hai câu hỏi ở trên.   Ô kê, dô được rồi!   Thứ nhứt, đọc giả mục tiêu là ai?  Developer.   Thứ hai, nội dung mục tiêu là gì?  Code và xây dựng blog   Ý, nhanh vậy cha, tưởng đâu si nghĩ dữ dằn lắm, quần qua quần lại Đại Bản Doanh đồ, túm lại chốt hạ đơn giản quá vậy nè   Thực ra là chưa xong, blog ni hông phải trả lời hai câu nớ không đâu, mục tiêu của blog ni là giới thiệu về sê ri “Khám phá ĐẠI BẢN DOANH” cơ   Sau khi mình lảm nhảm một hồi ở trên, trong đầu mình nảy ra một câu hỏi “Thế ĐẠI BẢN DOANH của CODE đang ở đâu?”   Mình nghĩ chắc khi ai đó bắt đầu học code, họ sẽ lên Google và gõ:      Học code ngàn đô   Học Python trong 30 giây   …   Rồi mình cũng gõ thử, mình thấy kết quả nó loạn quá. Toàn là tutorial, rồi article tùm lum hết, chưa kể mấy course được quảng cáo rùm ben hết sẽ hiện lên trên cùng nữa   Rồi mình nghĩ tiếp, muốn học một cái chi đó mới không phải chỉ cần tìm ra “ĐẠI BẢN DOANH” của nó là được na   ĐẠI BẢN DOANH ở đây là gì?   Ví dụ: – Muốn học python thì vô python.org – Muốn học React thì vô reactjs.org   Mấy đứa ni toàn free hết mà, lại là gốc gác ông cha, mà lại bỏ qua đi tìm mấy cái thứ phù phiếm bên ngoài thì kỳ quá phải không   Mình không anti course, tutorial nghe, mỗi bạn có mục đích khác nhau ví như học nhanh học gọn nhứt thì cứ tìm Crash Course mà học cho biết sơ sơ, nhanh gọn.   Sau si nghĩ như trên, mình cảm thấy là mọi người đang bỏ qua các “ĐẠI BẢN DOANH”, là các official document thì phải.   Tới đây cũng dài rồi, bài ni viết quần quần rứa cũng chỉ để giới thiệu là mình đang ấp ủ sê ri “Khám Phá Đại Bản Doanh Python” á mà, hihi   BeautyOnCode.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/buoi-si-nghi-nghiem-tuc-tai-dai-ban-doanh/",
        "teaser": null
      },{
        "title": "Làm quen Linux giành cho lập trình viên",
        "excerpt":"Chào mừng bạn đến với phần 2 của series “Linux giành cho lập trình viên”.   Trong phần Linux cơ bản, đầu tiên mình đã cùng làm quen với Linux qua bài viết “Giới thiệu về Linux”, nếu bạn chưa đọc qua thì hãy dừng ít phút ghé đọc để có cái nhìn tổng quan nhé.   Tiếp theo trong bài này, tụi mình sẽ làm quen câu lệnh và hệ thống tập tin trong Linux, bao gồm:   – Cấu trúc của một câu lệnh   – Giới thiệu hệ thống tập tin   – Điều hướng trong hệ thống tập tin   Tới công chiện rồi, vào thôi! Chúc các bạn đọc nội dung vui vẻ nhé ^^   Cấu trúc câu lệnh  Một câu lệnh sẽ bao gồm 3 phần:  **  **      Các options ở đây là các giá trị được định nghĩa sẵn sẽ thay đổi cách là việc của câu lệnh.   Các đối số sẽ là các giá trị truyền thêm vào.   Ví dụ:  Xem document của câu lệnh ls với man.      man ls    Ở đây, man là tên câu lệnh(viết tắt của manual), ls là đối số.   Kết quả là một document của ls xuất hiện trên màn hình.      Để đọc document này, ngoài cách dùng chuột kéo xuống xem nội dung thì mình còn có thể sử dụng các cách như:   – **** : di chuyển xuống dưới một màn hình   – **** : di chuyển xuống từng dòng   – **b + ** : di chuyển lùi một màn hình   – **/** : tìm kiếm với  ở nội dung tiếp theo   – **h + ** : hiển thị màn hình trợ giúp, tại đây có hướng dẫn cách điều hướng cho bạn   – **q + ** : thoát khỏi màn hình hiện tại   Hệ thống tập tin(filesystem)   Dù mục đích khi học về Linux của bạn là gì đi nữa, thì việc hiểu về hệ thống tập tin(filesystem) và di chuyển(navigate) giữa các thư mục khác nhau, cũng như việc quản lý các tập tin là điều cần biết.   Hiểu thêm về filesystem      Filesystem là cách các tập tin được tổ chức một cách có cấu trúc nằm trong những thư mục.    Linux có cấu trúc thư mục không phân chia theo ổ đĩa(C, D, …) như Windows mà có một thư mục gốc gọi là thư mục root(thường viết là /).      Từ / sẽ phân chia thành nhiều loại thư mục có mục đích dùng khác nhau.   Một số thư mục hay dùng đến là:   – /home: chứa nội dung của người dùng user   – /root: chứa nội dung của người dùng root   – /bin, /usr/bin: chứa các chương trình thực thi, hầu hết các câu lệnh hệ thống được chạy. Ví dụ “ls”   – /sbin, /usr/sbin: chứa các chương trình thực thi giành cho admin   Chuyện đặt tên   Nói đến hệ thống file, thì cũng nói luôn đến chuyện cân nhắc khi đặt tên cho thư mục(folder) hoặc tập tin(file) sao cho hợp lý.   Thường thì sẽ cân nhắc một số điểm sau:   – Tên thì sẽ phân biệt viết hoa và viết thường, ví dụ: text.txt và Text.txt sẽ là hai files khác nhau   – Tên được phép chứa các ký tự đặc biệt. Tuy nhiên khi đặt tên có khoảng cách hay các ký tự đặc biệt sẽ dễ sinh vấn đề, do đó nên hạn chế.   – Ký tự / đại diện cho thư mục root, và cũng dùng trong đường dẫn để chia bậc, cho nên cũng hạn chế sử dụng ký tự này.   – Tên được phép chứa các đuôi(extension) như là .csv, .txt, … Tuy nhiên, Linux và BASH shell thì không buộc có các đuôi này, nhưng nó sẽ có ích cho người dùng để dễ hiểu nội dung theo từng loại file.   – Một số tên thư mục được định nghĩa sẵn:   ~ là đại diện cho thư mục home của người dùng hiện tại   . là đại diện thư mục hiện tại   .. là đại diện thư mục cha của thư mục hiện tại   Điều hướng filesystem   Khi sử dụng môi trường command-line, thường bạn sẽ cần truy cập vào một file đang ở một thư mục nào đấy, hoặc là truy cập vào một thư mục để xem trong đó có gì.   Khi mở terminal lên(hoặc chương trình shell nào đấy, ví dụ iTerm chẳng hạn), thì bạn con trỏ sẽ tự động được đứng ở thư mục home của người dùng.         Câu lệnh pwd giúp kiểm tra vị trí hiện tại của thư mục.    Kết quả của câu lệnh này trên máy mình là “/Users/thanhnguyen” (máy bạn sẽ khác nha), chính là một đường dẫn(path hay pathname).   Thư mục mà con trỏ đang đứng thường được gọi là working directory hay current directory.   Và công việc mình muốn làm là di chuyển đến thư mục bin nằm trong usr/ chẳng hạn thì gọi là thay đổi thư mục(change directory).   Các loại đường dẫn   Đường dẫn thể hiện cách mình có thể tham chiếu với cấu trúc thư mục. Dấu / được dùng trong đường dẫn để phân cách từng bậc của cấu trúc này.   Có 2 loại đường dẫn bạn sẽ gặp là:   – đường dẫn tuyệt đối(absolute path) : đường dẫn này thể hiện vị trí của tệp liên quan đến thư mục root, do đó luôn bắt đầu với /.   Ví dụ: /usr/bin   – đường dẫn tương đối(relative path) : đường dẫn này thể hiện vị trí của tệp từ thư mục hiện tại, do đó sẽ bắt đầu từ thư mục hiện tại .   Ví dụ: ../../usr/bin   Vậy là có thể dễ dàng xác định loại đường dẫn bằng cách quan sát, nếu đường dẫn bắt đầu bằng / thì là tuyệt đối vì bắt đầu ở root, còn đường dẫn có chứa ` . hay ..` là tương đối vì sử dụng thư mục hiện tại.   Và thêm nữa, đường dẫn có thể giúp mình đến thư mục bin có thể là /usr/bin hoặc ../user/bin.   Tùy loại nào mình thấy nó tiện hơn thì mình dùng.   Ví dụ nếu từ thư mục hiện tại mà cần ra ngoài đến 4, 5 bậc thì mình nghĩ là absolute path sẽ tiện hơn, còn từ thư mục hiện tại chỉ ra ngoài 1,2 bậc thì sẽ ưu tiên dùng relative path.   Cách điều hướng   Để điều hướng trong filesystem, sử dụng câu lệnh cd đi kèm với đường dẫn của nơi muốn đến     cd     Nếu cd không có đường dẫn sẽ mặc định về thư mục ~   Điều hướng relative path   Cách làm: bắt đầu từ thư mục hiện tại, mỗi lần .. là di chuyển lên trên một bậc, là thư mục cha của thư mục hiện tại.   Ví dụ mình muốn di chuyển từ /Users/thanhnguyen đến /usr/bin   – .. lần 1 sẽ di chuyển ra đứng ở thư mục Users   – .. lần 2 sẽ di chuyển ra đứng ở /   – sau đó truy cập vào usr/bin   Nên cd ../../user/bin sẽ giúp mình chuyển từ thư mục hiện tại sang thư mục user/bin.    Điều hướng absolute path   Cách làm: thư mục bin nằm trong folder usr, và folder usr nằm trong folder root /, nên absolute path sẽ là cd /usr/bin        Nội dung bài blog này đến đây tạm hết rồi, tụi mình đã làm quen với hệ thống tập tin trong Linux cũng như cách điều hướng trong hệ thống này.   Trong bài viết tiếp theo của series “Làm quen Linux giành cho lập trình viên”, sẽ là tìm hiểu thêm về việc quản lý hệ thống tập tin trong Linux.  ","categories": ["linux"],
        "tags": [],
        "url": "/linux/lam-quen-linux-danh-cho-lap-trinh-vien/",
        "teaser": null
      },{
        "title": "",
        "excerpt":" ","categories": ["linux"],
        "tags": [],
        "url": "/linux/lam-quen-va-dieu-huong-he-thong-tap-tin-trong-linux/",
        "teaser": null
      },{
        "title": "Python có thể dùng để làm gì nhỉ?",
        "excerpt":"   Chào mừng mọi người đến với bài post đầu tiên của phần “Lượn lờ cùng Python” của series “Khám phá Đại Bản Doanh Python”   Lượn lờ mang nghĩa như cưỡi ngựa xem hoa vậy đó. Với mình thì học gì đó không phải cứ nhảy vô code liền, mà mình muốn tìm hiểu cái ngữ cảnh gắn với thứ mình học một xíu, ví dụ như cái mình học có thể dùng để làm gì, học Python thì tìm việc ở những vị trí nào, hay những ai đã thành công cùng nó rồi, hay với một người mới hoàn toàn thì mình nên bắt đầu từ đâu, …   Các câu hỏi mang tính chất định hướng như vậy mình thấy là rất quan trọng, vì thực tế con đường học hành với ngành lập trình không hề dễ dàng. Nếu bạn có càng nhiều câu hỏi định hướng và tìm hiểu kỹ hướng đi cho mình thì dù trên con đường ấy có nhiều chông gai nhưng hướng đi bạn đã xác định được rồi thì những cái gai đó cũng khó mà làm bạn lạc đường được.   Trong phần này, tụi mình sẽ cùng nhau dạo quanh quanh những phần ngoài lề trước khi tấn công vào các kiến thức Python cơ bản và nâng cao ở phần tiếp theo.   Mình sẽ đi tìm hiểu những câu hỏi sau trong “Lượn lờ cùng Python”:          Python có thể dùng để làm gì nhỉ?            Ai đã thành công cùng Python?            Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?       Những nội dung trong bài series này từ “Đại bản doanh Python” python.org, mình viết bằng ngôn ngữ của mình kèm theo những tài liệu khác mà mình thấy liên quan và hữu ích cho chủ đề của bài.   Bài dưới đây sẽ đi trả lời câu hỏi “Python có thể dùng để làm gì?”     Học Python đang là xu hướng của thế giới, Python được các ông trùm như Instagram, Netflix, Reddit, Lyft, Google, Spotify, New York Times và Bloomberg sử dụng.   Vậy nó có thể làm được gì mà người ta dùng nhiều quá vậy?   Python được ứng dụng rất rộng rãi, ở đây mình cùng tìm hiểu về 5 nhóm chính nơi Python được sử dụng phổ biến nhất:   → Phát triển Web và Internet(Web and Internet development)   → Khoa học và số học(Scientific and Numeric)   → Giảng dạy lập trình(Education)   → Các giao diện người dùng Desktop(GUI Desktop)   → Phát triển phần mềm(Software Development)   Năm lĩnh vực Python được ứng dụng phổ biến nhất   Phát triển Web và Internet   Có lẽ Python phát triển nhất trong lĩnh vực này, với nhiều sự lựa chọn như:   → Các frameworks phổ biến nhất là Django và Pyramid.   → Các micro-frameworks là Flask và Bottle.   → Và các CMS(hệ thống quản trị nội dung) như Plone, django CMS   → Thư viện Python còn hỗ trợ nhiều giao thức internet như là: HTML và XML, JSON, E-mail processing, rồi còn support FTP, IMAP, các internet protocols … và cũng dễ dùng socket interface nữa.   → Python có thư viện PyPI với nhiều thư viện hỗ trợ lập trình web được dùng phổ biến như Requests, BeautifulSoup, Feedparser, Paramiko, Twisted Python.   Khoa học và Số học   Python cũng được sử dụng rộng rãi trong khoa học và số học:   → SciPy là bộ sưu tập các gói dành cho toán học, khoa học, kỹ thuật   → Pandas là thư viện phân tích dữ liệu và mô phỏng   → IPython mà một trình shell mạnh mẽ có tính năng chỉnh sửa và ghi lại phiên làm việc một cách dễ dàng ngoài ra còn hỗ trợ trực quan và tính toán song song.   → Tổ chức The Software Carpentry Course, nơi dạy những kỹ năng cơ bản trong khoa học máy tính, cung cấp nhiều tài liệu học miễn phí và có cộng đồng mạnh.   Giảng dạy lập trình   Python là một ngôn ngữ tuyệt vời trong giảng dạy lập trình ở nhiều cấp độ từ cơ bản đến nâng cao.   Nhiều cuốn sách giảng dạy lập trình được viết với ngôn ngữ Python như là:   → How to Think Like a Computer Scientist   → Python Programming: An Introduction to Computer Science   → Practical Programming   Nhóm “Education Special Interest Group” là nơi thảo luận giành cho công tác giảng dạy về Python   Giao diện desktop   → Tkinter là thư viện dùng để viết GUI desktop được xây dựng bằng Python. Nếu bạn có hứng thú với side project build Desktop GUI với Tkinter có thể check qua Tkinter và video tutorial ở đây.   → Ngoài ra còn có các gói GUI toolkit khác sử dụng trên nhiều nền tảng như wxWidgets, Kvy, Qt thông qua pyqt, pyside, GTK+, win32 extensions.   Phát triển phần mềm   Các nhà phát triển thường dùng Python để quản lý, kiểm thử, thử nghiệm, và xây dựng phần mềm   → Scons là một công cụ xây dựng phần mềm   → Buildbot và Apache Gum dùng trong tự động biên dịch và kiểm thử   → ERP Roundup hay Trac cho kiểm soát lỗi và quản lý dự án   Xây dựng ứng dụng thương mại   Python cũng được sử dụng trong xây dựng ERP(Enterprise Resource Planning Software) và các hệ thống thương mại điện tử, như là:   → Odoo là phần mềm quản lý công ty nơi quản lý hàng loạt các ứng dụng kinh doanh cùng một chỗ tạo thành bộ ứng dựng quản lý doanh nghiệp hoàn chỉnh.   → Tryton là mô hình 3 lớp(Presentation, Business, Data) dành cho các nền tảng ứng dụng chung.   Ba ứng dụng chính của Python   Đây là một video giới thiệu về những thứ Python có thể làm cũng rất là hay ho và dễ hiểu từ kênh CS Dojo – một developer của Google   Trong video trên giới thiệu Python áp dụng trong 3 lĩnh vực chính là:   → Web Development: Web Framework(Django, Flask)   → Data Science, Data analysis/visualization           Machine Learning với scikit-learn, TensorFlow            Data analysis và visualization với matplolib       → Scripting   Ngoài ra, những ứng dụng khác như Game Development(PyGame), Desktop applications(Tkinter, QT), Embedded applications(Raspberry Pi)   Các vị trí công việc dành cho người học Python   Nếu bạn học Python, thì có khá nhiều công việc dành cho bạn, hãy tham khảo một số vị trí cùng với các nhiệm vụ chính của từng loại công việc ấy nhé.   Python developer  → Xây dựng trang web → Tối ưu hóa thuật toán, data → Giải quyết các vấn đề về phân tích dữ liệu → Thực hiện bảo mật và bảo vệ dữ liệu → Viết mã đơn giản, tái sử dụng được, hiệu quả hơn   Product Manager  Với người quản lý dự án, data đóng vai trò vô cùng quan trọng trong việc phân tích dữ liệu từ thị trường cũng như từ người dùng để lên kế hoạch xây dựng các sản phẩm tương ứng với nhu cầu. Khi tiến hành phân tích dữ liệu thì Python là một kỹ năng quan trọng.   Data Analyst  Data Analyst là người sẽ làm việc với khối lượng thông tin khổng lồ, nhiều công ty sẽ tìm kiếm những người có khả năng sàng lọc lượng lớn thông tin, với sự hỗ trợ của các thư viện Python như SciPy hay Pandas   Giáo viên dạy khoa học máy tính  Học Python còn phù hợp cho những công việc như dạy Python, dạy các kiến thức trong lĩnh vực khoa học máy tính.   Trong chương này, mình đã cùng tìm hiểu những lĩnh vực ứng dụng của Python cũng như các vị trí công việc khi mình học Python. Khi chọn mỗi vị trí công việc khác nhau thì sẽ học chuyên sâu hơn về kiến thức cũng như phần mềm sử dụng trong lĩnh vực đó.   Như mình, hiện mình đang làm việc ở vị trí là Python Developer, cụ thể hơn là mình đang làm bên Backend, sử dụng Python, Django để xây dựng API cho ứng dụng web.   Ở bài viết sau, là câu hỏi tiếp theo “Ai đã thành công cùng Python?”  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/python-co-the-lam-gi-nhi/",
        "teaser": "/assets/images/2020/12/2020-12-python-co-the-lam-gi-nhi-cover.png"
      },{
        "title": "Tài liệu học và nghiên cứu Python",
        "excerpt":"   Chào mừng mọi người đến với bài post thứ ba của phần “Lượn lờ cùng Python” của series “Khám phá Đại Bản Doanh Python“   Trong phần này, tụi mình sẽ cùng nhau dạo quanh quanh những phần ngoài lề trước khi tấn công vào document ở những phần tiếp theo nhé.   Mình sẽ đi trả lời nhưng câu hỏi sau trong “Lượn lờ cùng Python”:   ♣ Python có thể dùng để làm gì nhỉ?   ♣ Ai đã thành công cùng Python?   ♣ Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu? (bài hôm ni)   Những nội dung trong bài series này từ “Đại bản doanh Python” python.org, mình viết bằng ngôn ngữ của mình kèm theo những tài liệu khác mà mình thấy liên quan và hữu ích cho chủ đề của bài.   Bài dưới đây sẽ đi trả lời câu hỏi “Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?” nằm trong mục “Getting Started” nha   Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?  Dô dô, dô ngay và luôn, không đợi chờ gì nữa, học Python ngay thôi, lương nghìn lẻ một đô đang chờ ahihi   Ở phần “Bắt đầu với Python” này, gồm những nội dung chính sau:   – Python là gì thế ạ?   – Cách lượm Python về và chơi thử   – Chơi thử rồi, giờ là học thiệt nghe   – Tìm kiếm những ứng dụng làm sẵn   – Hỏi han thường gặp   Đi thôi mấy mọi người ơi!   Python là gì thế ạ?   Python là ngôn ngữ lập trình hướng đối tượng, có thể so sánh với Perl, Ruby, Scheme hoặc Java   Các tính năng đáng chú ý:   ♥ Cú pháp tao nhã, dễ đọc dễ viết   ♥ Viết chương trình một phát là có thể chạy liền   ♥ Thư viện chuẩn hỗ trợ các tác vụ phổ biến như kết nối server, tìm kiếm với các biểu thức(regular expression), đọc và chỉnh sửa file   ♥ Dễ dàng kiểm thử các đoạn code ngắn với Python interactive mode   ♥ Có thể thêm các mô đun khác được viết bằng ngôn ngữ khác như C, C++. Có thể nhúng vào ứng dụng khác để tạo giao diện sử dụng   ♥ Chạy trên đa nền tảng: Mac OS X, Linux, Windows, Unix. Miễn phí tải xuống, miễn phí sử dụng   Các tính năng đáng chú ý về ngôn ngữ:   ♥ Nhiều kiểu dữ liệu: number(floating point, complex, and unlimited-length long integers), string (both ASCII and Unicode), lists(danh sách), and dictionaries(từ điển). Kiểu dữ liệu động và mạnh mẽ, trộn các loại dữ liệu khác nhau sẽ báo lỗi ngay(như cộng string với number)   ♥ Hỗ trợ lập trình hướng đối tượng với lớp(classes) và nhiều lớp kế thừa(multi inheritances).   ♥ Code có thể nhóm thành các mô-đun, các gói. Bộ nhớ được quản lý tự động. Có hỗ trợ xử lý lỗi sạch đẹp   ♥ Python chứa các tính năng nâng cao của một ngôn ngữ lập trình như list comprehensions và generators   Cách lượm Python về chơi thử  Để lượm được Python về và chơi thử, mình phải cài đặt cái trình thông dịch của bạn ấy – Python Interpreter, đây là chương trình có thể đọc code Python và chạy. Ngoài ra, bạn ấy còn có kèm theo nhiều tài liệu có thể giúp mình hiểu hơn về Python nữa.   Thường thì Mac và Linux sẽ được tích hợp Python sẵn rồi, nhưng đó là bản lỗi thời rồi(Python 2.x), cho nên mình cần phải cập nhật lên bản mới(Python 3.x)(vui lòng kiểm tra ở trang Downloads này nhé).   Sau khi cài được python version 3 rồi, mình vô command line gõ “python” hoặc “python3” là đã được vô chế độ chơi thử cùng Python Interpreter rồi đó.   Vô đây chỉ là chơi thử thấy liền kết quả thôi, còn nếu bạn muốn lưu code lại và chỉnh sửa thì mình cần có IDE hoặc Code Editor để mở file đó, bạn có thể bắt đầu với Thony(một chương trình tích hợp sẵn Python Interpreter và IDE bundles), khá đơn giản và nhẹ nữa.   (Bonus)   Nếu bạn đang tìm kiếm một IDEs hay Text Editors để xài với Python, thì python.org cũng có nguyên hai list to bự chảng cho bạn tham khảo luôn:   ⇒ IDEs Python giới thiệu tên, nền tảng, lần cuối cập nhật và vài thông tin chính của IDE   ⇒ Python Editors giới thiệu tên, nền tảng, viết bằng ngôn ngữ gì, giấy phép nào, và vài thông tin chính của editor   Mình tạt qua giới thiệu cái IDEs với cái Code Editors xí nếu bạn chưa rõ thì đọc thêm nhé   IDEs là môi trường lập trình cung cấp những tính năng như mã hoá, biên dịch, gỡ lỗi, thực thi, tự động điền vào(autocomplete), các thư viện trong cùng một nơi giúp các tác vụ trở nên đơn giản và dễ dàng hơn   Các IDEs phổ biến có thể kể đến: PyCharm, Spyder, PyDev, Idle, Wing, Eric Python, Rodeo, Thonny   Trong khi đó, Code editors là một nền tảng để chỉnh và sửa mã nguồn\b, phổ biến dùng với Python có thể kể đến: Sublime text, Atom, Vim, Visual Studio Code   Bạn có thể xem qua những python IDE, code editors ở article này, có giới thiệu những features chính, ưu điểm, nhược điểm để mình lựa cái dùng cho phù hợp.   Chơi thử rồi, giờ là học thiệt nghe  Lựa được nơi code rồi, mình bắt tay vô code thôi. Á nhầm, mình phải đọc mấy cái hướng dẫn(tutorial) trước, rồi code theo xem nó chạy thế nào chớ. Về hướng dẫn thì có 2 hướng chính nè:   Mới học lập trình, hãy đi cùng Beginner Guide – Non Programmer   Có tí kinh nghiệm lập trình rồi, thì đi cùng Beginner Guide – Programmer   Trong mỗi hướng dẫn, đều gồm những mục như giới thiệu sách phù hợp cho từng đối tượng, các tutorials và các websites, các khoá học tương tác, tài liệu giành cho người nghiên cứu khoa học, các videos và tools.   Mình thấy bên Non Programmer thì các khoá học tương tác được xếp trước những tài nguyên khác chắc là muốn người bắt đầu tương tác làm quen Python trước.   Còn bên Programmer thì là hai link review những khoá học tốt nhất giành cho Python để nắm bắt nhanh nhất, nàm trên top có “Google Python’s class”(miễn phí) và  khóa “Complete Python Bootcamp: Go from zero to hero in Python 3” từ Udemy(có phí).   Bên cạnh đó, khi cần tìm kiếm thêm thông tin gì về Python thì online documentation là nơi bạn cần ghé. Ngoài ra, cũng có Python tutorial học những thứ cơ bản nhất và giúp mình bắt đầu với Python, mình sẽ cùng học tutorial này trong những bài blog tiếp theo.   Sau khi học và viết những thứ cơ bản rồi, đã đến lúc bạn nên tìm hiểu thêm về Syntax Python cùng series “The Python Language Reference” và những thư viện chuẩn của Python với “The Python Standard Library“.   Bạn có muốn biết những recipes(công thức) và patterns(mô hình) phổ biến trong Python, hãy ghé “ActiveState Python Cookbook” để xem.   Tìm kiếm những ứng dụng có sẵn  Nếu bạn muốn tìm kiếm những mô đun, package hay những ứng dụng được viết bằng Python rồi để tham khảo hay dùng trong ứng dựng của mình, thì nơi đầu tiên có thể ghé kiếm thử là PyPI – kho packages viết bằng Python sẽ tìm kiếm được những source code tốt nhất hoặc đơn giản chỉ cần hỏi thăm bác Google với những từ khoá như là “python package”, “python example”, “python recipes”, … là được rồi.   Nếu vẫn không tìm được thứ bạn cần, ngại gì không hỏi một câu trên Stackoverflow hay bất cứ ai bạn biết là họ biết nhiều Python hơn bạn nhỉ ^^.   Hỏi han thường gặp  Nếu bạn có câu hỏi nào về Python, thử kiểm tra trong phần “Hỏi han thường gặp” thử xem người ta đã trả lời chưa nhé.   Bonus cho bạn top câu hỏi Python trên StackOverflow nè.   Đây là bài cuối của phần “Lượn lờ cùng Python” rồi.   Tụi mình đã đi qua đám này hẳn mình đã hiểu cái độ quan trọng của Python và háo hức cho hành trình tiếp theo rồi đó.   Tiếp đến, mình sẽ gặm qua phần khó ăn nhất “Documentation”   Thực ra mình cũng ngán mấy cái documentation dữ lắm, cho nên mình không dại dột chi mà chui vô liền cái document lắm chữ đâu. Mình thấy ở đây còn có nhiều sự lựa chọn khác có vẻ dễ thương hơn nhiều, đó là “Audio/Visual Talks” và “Beginner Guide“. Phần ni gọi tên là “Làm quen kết bạn với Python” cho nó thân thiện ha.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/bat-dau-voi-python/",
        "teaser": "/assets/images/2020/02/2020-02-bat-dau-voi-python-cover.webp"
      },{
        "title": "Ai đã thành công cùng Python?",
        "excerpt":"   Chào mừng mọi người đến với bài post thứ hai của phần “Lượn lờ cùng Python” của series “Khám phá Đại Bản Doanh Python”   Mở bài  Trong phần này, tụi mình sẽ cùng nhau dạo quanh quanh những phần ngoài lề trước khi tấn công vào document ở những phần tiếp theo nhé. Mình sẽ đi trả lời nhưng câu hỏi sau trong “Lượn lờ cùng Python”:   ♣ Python có thể dùng để làm gì nhỉ?   ♣ Ai đã thành công cùng Python?    ♣ Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?   Những nội dung trong bài series này từ “Đại bản doanh Python” python.org, mình viết bằng ngôn ngữ của mình kèm theo những tài liệu khác mà mình thấy liên quan và hữu ích cho chủ đề của bài. Bài dưới đây sẽ đi trả lời câu hỏi “Ai đã thành công cùng Python?” nằm trong mục “Success Stories” nha.   Thân bài  Những ai đã thành công cùng Python?   Trong phần “Success Stories“, là những câu chuyện thành công cùng Python, bao gồm nhiều chủ đề khác nhau như “Web Development”, “Scientific”, “Business”, “Education”, “Goverment”, “Engineering”, “Art”.   Bạn cũng có thể thêm câu chuyện ở mình với “Submit Yours” đó.  Ba chủ đề được in đậm có nhiều câu chuyện nhất, mình chọn mỗi chủ đề một câu chuyện với vài tóm tắt.   [Web Development] Building an open-source and cross-platform Azure CLI with Python   Xây dựng mã nguồn mở và đa nền tảng Azure CLI(Microsoft) với Python   → Microsoft Azure là một nền tảng điện toán đám mây trải rộng hơn 50 trung tâm dữ liệu toàn cầu với hàng trăm dịch vụ. Là một dịch vụ cloud lớn, họ cung cấp rất nhiều công cụ để quản lý và triển khai hệ thống, một trong những công cụ được sử dụng rộng rãi nhất là Azure CLI(Azure “az” Command Line Interface).   → Azure CLI bao gồm hàng ngàn các lệnh cùng nhiều thư viện bên thứ 3, cho nên họ đã chuyển từ PowerShell cho Windows và Nodejs-CLI cho Mac, Linux sang dùng Python cho tất cả các nền tảng.   → Nhờ sự linh hoạt và hệ sinh thái của các gói(packages), Python giúp Azure cung cấp hàng trăm dịch vụ, mỗi dịch vụ cung cấp những phiên bản tương thích khác nhau kèm với hàng trăm nghìn dòng lệnh một cách nhanh nhẹn, hữu ích và dễ sử dụng thật sự là một thách thức lớn.   → Điều quan trọng nhất là Python cho phép họ tạo nên một công cụ có thể chạy trên nhiều nền tảng, hoạt động tốt, hỗ trợ mở rộng mạnh mẽ và làm hài lòng khách hàng của họ.   [Scientific] Python for Scientific Data Visualization   Trực quan hoá dữ liệu khoa học cùng Python – một side project trong 4 tháng của người không phải là lập trình viên, cũng không phải là nhà khoa học máy tính :D.   → Python đã được chọn vì syntax đơn giản, dễ maintain và là ngôn ngữ dễ học dễ sử dụng   → MayaVi được viết hoàn toàn bằng Python và nhờ tính linh hoạt của VTK, Python và Tkinter, hoạt động trên Linux, Unix và Windows.   → Người viết nhấn mạnh sự đơn giản, dễ học và cực kỳ mạnh mẽ của Python, bên cạnh đó trình thông dịch rất tiện cho việc thử nghiệm.   → Python giúp cho development cycle nhanh hơn, và không cần đợi code compile.   → Kiểu dữ liệu tự động trong Python giúp người dùng tập trung vào phát triển chức năng, giải quyết vấn đề thay vì học quá nhiều cú pháp và ngôn ngữ.   [Business] Python to Deliver Commercial Anti-Spam Software   Python đã giúp viết phần mềm chống thư rác trong thương mại   → Dự án Armadillo là một SMTP email filtering proxy hoạt động trên nhiều tên miền và nhiều nền tảng khác nhau, cung cấp dịch vụ lưu trữ email với proxy chống virut và spam. Do đó, Python được chọn như là một giải pháp cho xây dựng đa nền tảng này.   → The SMTP email filtering proxy bao gồm bộ đệm thông minh, các thư viện filter,  báo cáo spam, virut.   → Họ xây dựng Armadillo theo kiểu bất đồng bộ(asyncronous) và sử dụng thư viện “asyncore” của Python, cùng nhiều thư viện khác như Python recipes của ActiveState.   Dùng WingIDE như là môi trường phát triển và Nose tests cùng với thư viện unittest để xây dựng bộ test cho dự án.   Họ cũng sử dụng Python Shell trong suốt quá trình phát triển dự án để nhanh chóng kiểm tra và chạy code thử.   → Sau 4 tháng, sản phẩm hoàn thành sớm hơn dự định 3 tháng(so với kế hoạch giành cho C/C++) và được sử dụng bởi nhiều công ty, đánh bại đối thủ cạnh tranh và chứng minh rằng Python có khả năng phát triển ở các hệ thống thương mại, không còn là ngôn ngữ chỉ giành cho scripting nữa.     Như vậy là mình đã biết thêm về những cây chuyện thành công cùng Python rồi ♥   Thực ra thì có quá trời câu chuyện thành công với Python ngoài kia, nhưng những câu chuyện đó không cần kể ra, chỉ cần thấy sản phẩm của người ta thành công thế nào là đủ. Sương sương có thể kể đến những ông trùm Instagram, Netflix, Reddit, Lyft, Google, Spotify, New York Times và Bloomberg đều có dùng Python cả.   Giờ đến lượt tụi mình viết câu chuyện của chính mình đó. Nhưng trước hết, phải học đã rồi nói chuyện tiếp nhé :”&gt;   Ở bài viết sau, mình sẽ tiếp tục khám phá câu hỏi “Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?” cùng phần “Getting Started“.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/ai-da-thanh-cong-cung-python/",
        "teaser": "/assets/images/2020/03/2020-03-ai-da-thanh-cong-cung-python-cover.png"
      },{
        "title": "Tài liệu học và nghiên cứu Python",
        "excerpt":"   Chào mừng mọi người đến với bài cuối cùng của phần “Lượn lờ cùng Python” của series Khám phá Đại Bản Doanh Python   ♣ Tài liệu videos và audio cho người học và nghiên cứu Python   Những nội dung trong bài series này từ “Đại bản doanh Python” python.org, mình viết bằng ngôn ngữ của mình kèm theo những tài liệu khác mà mình thấy liên quan và hữu ích cho chủ đề của bài.   Bài dưới đây viết về trang “Audio/Video Instructional Materials for Python” ha.   Audio/Video Instructional Materials for Python Tài liệu videos và audio cho người học và nghiên cứu Python   Trong trang ni, đại bản doanh Python cho tụi mình nhiều nguồn khá chất lượng, mời các bạn ghé chơi, nhưng cũng có những nguồn hết hạn rồi, cũ rồi. Do đó, trong post này mình chỉ giới thiệu những xịn xò nhất theo mình thôi.   Podcast   Podcast là gì ấy nhỉ? Nó là một bản trình bày bằng âm thanh mà bạn có thể tải hoặc phát từ Internet, chỉ đơn giản vậy thôi.   Mình mê podcast dữ lắm, mê cái thể loại nghe tâm tình, cập nhật kiến thức hay đơn giản vì là cái cảm giác được tương tác với người chứ không phải với máy. Thật chứ code với làm online riết rồi làm dự án qua chat channel, các tools quản lý, liên lạc bằng email, … làm mình nhớ giọng con người đến lạ.   Tiêu chí của mình cũng đơn giản lắm, đầu tiên là cái trang nhìn được mắt tí, host cũng dễ thương tí, càng nhiều năng lượng tích cực càng tốt, có sub nữa thì đứa ngu tiếng Anh như mình mới càng yêu thích hơn.   Còn nội dung thì do trình độ mình có hạn nên mình thấy cái nào mà dễ dễ hiểu mình xem trước, cho nên có khi không hợp gu với tất cả mọi người, nếu ai muốn xem hết thì nhớ vô trang av để tìm kiếm thêm nha.   Hai bạn podcast hay ho có thể kể đến:  Talk Python To Me Podcast   Vài thông tin nhỏ:   – Host là Michael Kennedy, founder của Talk Python To Me, quê ở Portland, OR. Ông còn phát triển nhiều khoá học Python trực tiếp mang tên Talk Python Training. Michael là một doanh nhân, cha của ba cô con gái, là chồng, là người luôn học hỏi và là một giáo viên.   – Podcast Take Python To Me bắt đầu từ 3/2015, bài ra hàng tuần với các chủ đề liên quan đến Python, cũng như những chủ đề khác như MongoDB, AngularJS, DevOps. Mỗi bài post là một cuộc trò chuyện với những khách mời là các chuyên gia trong ngành.   Mấy cái mình ưng nhứt:   – Giọng chú host khá dễ nghe, nhiều năng lượng tích cực.   – Trong bảng Episodes có cột Guests nơi ghi rõ tên những người được mời trong từng bài.   – Podcast ni có transcript và được ghi theo thời gian. Vừa update kiến thức, vừa nghe tiếng anh với đọc sub cho quen, khó quá mình bỏ qua Google Dịch cho hiểu cũng được nữa.  The Python Podcast.init   Vài thông tin nhỏ:   – Host là Tobias Macey là một kỹ sư chuyên tận tâm với kinh nghiệm nhiều năm trong nhiều lĩnh vực. Hiện lãnh đạo và quản lý nhóm Technical Operations của MIT Open Learning, nơi anh thiết kế và xây dựng cơ sở hạ tầng đám mây để truy cập trực tuyến vào hệ thống giáo dục của cộng đồng MIT toàn cầu. Ngoài ra anh cũng là chủ của Boundlass Notions, LLC nơi anh thiết kế, đánh giá, triển khai cơ sở hạ tầng dữ liệu và tự động hoá điện toán đám mây. Ngoài Podcast.init thì “Data Engineering Podcast” là nơi anh khám phá những thách thức mới mà các kỹ sư về dữ liệu(data engineer) hay đối mặt và đưa ra nhiều cách giải quyết.   – Podcast.init bắt đầu từ 3/2014, mỗi tuần một tập, mang đến những câu chuyện về những người làm cộng đồng Python trở nên tuyệt vời, cung cấp nhiều thông tin hữu ích về những dự án, những nền tảng, và các bài thực hành mà các kỹ sư(lập trình viên), các lãnh đạo, các nhà khoa học dữ liệu cần biết để học hỏi và phát triển sự nghiệp.   – Các chủ đề đa dạng bao gồm: khoa học dữ liệu(data science), DevOps, ứng dụng web(web application), nghiên cứu khoa học, mã nguồn mở, khoa học máy tính(machine learning), …   Mấy cái mình ưng nhứt:   – Podcast này có transcript đó mọi người, cái này ưng nhất với người có ngôn ngữ hạn chế như mình. Vừa nghe vừa theo dõi sub thì level tiếng Anh sẽ lên đó, cố lên, à nhớ bật follow chỗ transcript nghe.   – Podcast này có chỉnh tốc độ nghe nữa, mình có thể nghe chậm hơn nếu theo không kịp.   – Trang ni ít quảng cáo, vô cái là bấm nghe được liền.   Videos   Trong phần này, python official website giới thiệu 2 nguồn, đó là: pyvideo.org và một kênh youtube channel pycon08.   Về pycon08, kênh này khá cũ(11 năm trước) và nội dung cũng như chất lượng thời điểm đó không được tốt lắm nên mình xin phép không giới thiệu gì nhiều.   Thứ mình thích là pyvideo.org, đây quả là một nguồn đáng đồng tiền bát gạo, cơ mà nó là free đó mấy bác ơi!   Ở đây có một lượng video về python phải gọi là khổng lồ, mười mấy nghìn video, trong số đó gồm nhiều videos đến từ hơn 400 sự kiện về Python trên toàn thế giới.   Xịn chưa xịn chưa, vô coi đi!   Mình thích cái cột thống kê bên trái của pyvideo.org lắm, nó cho phép mình đến nơi mình cần đến ngay lập tức.   Bạn đang tìm kiếm gì? Videos từ những sự kiện gần nhất   →  PyData Austin 2019(34 videos)   →  PyData New York City 2019(2014 – 2019)(70 videos)   →  PyCon SE 2019(32 videos)   (Danh sách các sự kiện ở đây)   Videos từ những diễn giả tích cực nhất   → Russell Keith-Magee(67 videos)   → James Powell(48 videos)   → Kevin Markham(43 videos)   → Dustin Ingram(42 videos)   → Andrew Godwin(42 videos)   Hay video từ những tags được nhiều người quan tâm nhất   → lightning talks(459 videos)   → talk(360 videos)   → tutorial(292 videos)   → django(219 videos)   → python(197 videos)   Đây thực sự là một nguồn tư liệu media khổng lồ và có giá trị.   Đội ơn bác “Đại Bản Doanh Python”.   Mình hi vọng mọi người cũng như mình sẽ chú trọng đến những thứ giá trị như thế này nhiều hơn nữa, thay vì lên Google và Youtube mà tìm kiếm rồi những sản phẩm được quảng cáo đập thẳng vô mặt, tụi nó hay thiệt đó, cơ mà tốn kém cũng không ít đâu các bác ạ.     Bonus   Trong quá trình tìm hiểu mình thấy nguồn này khá hay ho, kiểu hay không chịu nổi, không thể không lưu lại ở đâu đó, nên để đỡ vô phần bonus ni.   sentdex   Đây là một channel hướng dẫn lập trình Python đồ sộ nhất mà mình được thấy, cả channel có khoảng 1000 videos và đa số hướng dẫn về Python, từ năm 2012 đến nay. Anh này người Mỹ và nói tiếng Anh giọng Mỹ rất dễ nghe.   Tại đây không những có dạy về Python cơ bản, mà còn nhiều nội dung liên quan đến ứng dụng Python vào những lĩnh vực khác nhau như là: machine learning, tài chính, phân tích dữ liệu, robot, phát triển web, trò chơi …   Dưới đây là những series phổ biến nhất:           Learning programing with Python(15 videos) Learning programing with Python            Django Web Development with Python(12 videos) Django Web Development with Python            Machine Learning with Python(72 videos) Machine Learning with Python       – Deep Learning with Python, TensorFlow, and Keras tutorial(11 videos)    – Data Analysis w/ Python 3 and Pandas(6 videos)    – PyGame with Python 3 Game Development(29 videos)    – Python Programming for Finance(28 videos)    – NLTK with Python 3 for Natural Language Processing(21 videos)    – Practical Flask Web Development Tutorials(35 videos)    – Matplotlib Tutorial Series – Graphing in Python(32 videos)    Mình viết tới đây mình mình trở thành fan hâm mộ chính thức của sentdex rồi các bạn ạ, một resource quá đáng để chia sẻ phải không!   Kết bài  Bài viết hôm nay tạm dừng ở đây ha, cám ơn các bác ghé nhà em chơi. Ở bài viết sau, mình sẽ cùng “Chiếc máy tính PI” cùng phần The Python Tutorial nhé.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/tai-lieu-hoc-va-nghien-cuu-python/",
        "teaser": "/assets/images/2020/04/2020-08-tai-lieu-hoc-va-nghien-cuu-python-cover.webp"
      },{
        "title": "Mô đun và Gói trong Python",
        "excerpt":"Chào mừng mọi người đến với bài tiếp theo của phần “The Python Tutorial” của series “Khám phá Đại Bản Doanh Python“.   Bài trước, mình đã học thêm về “Cấu trúc dữ liệu trong Python”. Hôm ni, mình học tiếp về bạn “Mô-đun” nha.   (Những nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại hoặc dịch lại theo ngôn ngữ của mình)   Mô-đun   Khi thoát khỏi PI, các dự liệu(biến, hàm, …) được khai báo trước đây sẽ bị mất như ví dụ sau:      Do đó, cần chuẩn bị đầu vào cho trình thông dịch để có thể dùng được bất cứ khi nào mình cần, các file chứa những đoạn mã như vậy được gọi là các script   Để làm được như vậy, cách mình cần làm với Python là tạo một file có đuôi là “.py” rồi bỏ code vào đó. File này được gọi là mô-đun.   Một mô-đun có thể được sử dụng trong một mô-đun khác, cũng có thể sử dụng trong trình thông dịch PI.   Tên của mô-đun được lưu dưới biến name của chính mô-đun đó.      Mô-đun là tệp chứa các định nghĩa và các câu lệnh Python       Trên đây là cách dùng một mô-đun trong PI, mình cần nạp nó vào bằng lệnh “import”.   Lưu ý nhỏ: Đến đây, mình đã cần sử dụng đến trình soạn thảo(editor) để tạo file và viết những đoạn code dài hơn. Editor mình đang dùng là “Visual Studio Code“   Cách nạp mô-đun để sử dụng   Nạp mô-đun vào đâu để sử dụng? Là nạp vào mô-đun khác hoặc nạp vào khi mình đang ở trong trình thông dịch PI như ví dụ trên đây.   Khi mình nạp một mô-đun, các thành phần của nó sẽ được khởi tạo.   Mỗi mô-đun như một cái gói bọc hết các giá trị được khởi tạo của nó trong đó, do đó khi cần dùng mình phải trỏ từ tên mô-đun vào lấy các thành phần khác. Ví dụ, bạn muốn dùng biến “name” trong module “person”, thì nó là: “person.name”   Có nhiều cách nạp mô-đun và các thành phần của nó:   → Nạp luôn cả mô-đun: import person   Khi nạp một mô-đun như vậy, mình cần gọi các thành phần bên trong nó từ mô-đun này, ví dụ “person.first_name”   → Nạp từng thành phần của mô-đun với from person import first_name, last_name   Khi nạp từng thành phần như trên thì mô-đun person không có được nạp vào, chỉ có hai hàm first_name và last_name, nên không gọi person.first_name được, chỉ dùng first_name thôi nghen.   → Nạp hết tất cả thành phần với *: from person import *   Tương tự như trên, tất cả các thành phần trong mô-đun person được nạp vào nhưng chính bản thân nó thì không.   → Nạp mô-đun và sử dụng với tên khác với “as“: from person import full_name as name   Hàm full_name được kết nối với tên thay thế là “name”, nên gọi name chính là gọi full_name   ### Cách cập nhật nội dung của mô-đun   Khi làm việc với mô-đun trong PI, đôi khi mình sửa code nhưng không thấy kết quả được cập nhật, đó là do nội dung mô-đun bạn nạp trước đây vẫn tồn tại và bạn cần tải lại mô-đun để có nội dung mới nhất.   Có hai cách cập nhật nội dung của mô-đun:   Cách 1: thoát PI và tải lại mô-đun đó    Cách 2: gọi đến mô-đun importlib và gọi lệnh để reload mô-đun mình cần      import importlib; importlib.reload()       Thực thi một mô-đun như là một script   Ngoài cách vào trình thông dịch PI, nạp mô-đun mà gọi lệnh thực thi chương trình để kiểm thử, bạn có một cách khác nhanh hơn là viết sẵn chương trình bạn cần làm trong mô-đun luôn và gọi lệnh để thực thi script đó.   Để thực thi một mô đun trong PI, bạn dùng từ khoá “python”:         python calculator.py    Kết quả của lệnh trên sẽ là: Total 5   Gọi vậy thì mô-đun sẽ được thực thi như khi bạn import nó vào mô-đun khác.   Điều khác duy nhất khi thực thi bằng lệnh “python” là tên name của mô-đun sẽ được gán với giá trị main.   Bạn để ý chỗ ni xíu, vì khúc này liên quan tới một câu lệnh mình hay dùng mà hỏng hiểu tại sao, câu lệnh đó là:      if name == “main”:     # code thực thi đặt vào đây      Bạn có thấy câu lệnh ni quen không? Nếu bạn từng học qua Python hẳn bạn đã gặp rồi.   Người ta hay bỏ câu lệnh như vậy vào chương trình để mần chi nhỉ?   Để cho các code trong chỗ “#code thực thi thì đặt vào đây” ấy, chỉ được chạy khi mà mình chạy nó như một script với lệnh “python” thôi. Còn khi import nó vào mô-đun khác thì hỏng có chạy.   Đây là cách tiện hay dùng để kiểm thử một mô-đun đồng thời khi dùng nó trong mô-đun khác lại không bị ảnh hưởng.   Bạn thấy chỗ ni hay hông? Mình thấy siêu hay luôn, vì khúc ni trước mình xài mà hông có hiểu mấy ^^   Python tìm mô-đun ở đâu?   Khi làm việc với mô-đun, bạn \bcó thể sẽ gặp lỗi không tìm thấy mô-đun như thế này.      Khi một mô-đun nạp đúng, bạn có để ý PI biết chính xác mô-đun của bạn đang ở đâu.      Vậy thì PI đã tìm mô-đun ở những nơi nào?   → Đầu tiên, PI sẽ đi kiếm nó trong built-in mô-đun(là những mô-đun được Python xây dựng sẵn, hay còn gọi là những mô-đun tiêu chuẩn)   → Nếu tìm chưa thấy, nó sẽ tiếp tục tìm trong sys.path, sys.path được định nghĩa ở những nơi sau:      Thư mục hiện tại(nơi bạn đứng và truy cập vào PI) là giá trị của sys.path[0], nên được tìm kiếm đầu tiên.   PYTHONPATH   Thư mục cài đặt mặc định   Lưu ý: Nếu mô-đun trùng tên với built-in mô-đun, thì mô-đun ở folder hiện tại sẽ được nạp vào, chớ không phải built-ins mô-đun nghen.   Nếu bạn chưa nạp được mô-đun của mình trong PI, vui lòng hãy dòm qua cái sys.path thử có cái đường dẫn đến thư mục mô-đun của bạn chưa, nếu chưa có thì bạn đứng sai chỗ rồi đó.   Biên dịch các file .py   Quá trình biên dịch này diễn ra hoàn toàn tự động, cho nên khi làm việc với Python bạn sẽ thấy folder pycache này thường xuyên, mình cùng đọc cho biết thêm ha.   Để tăng tốc độ tải các mô-đun, Python lưu phiên bản biên dịch của từng version khác nhau của mô-đun dưới định dạng module.version.pyc trong thư mục pycache.   Quy ước đặt tên này cho phép Python có thể biên dịch lại từ các version khác nhau.   Ví dụ dưới đây thể hiện version python 3.8 mình đang sử dụng      Các mô-đun chuẩn   Python có sẵn thư viện của các mô-đun tiêu chuẩn, được viết ở “The Python Standard Library“, bao gồm những nhóm chính như là:   – Built-in functions: các hàm dựng sẵn   – Built-in constants: các biến dựng sẵn   – Built-in types: các kiểu dữ liệu dựng sẵn   – Built-in exceptions: các ngoại lệ dựng sẵn   – Data types: các kiểu dữ liệu …   Các mô-đun này có thể khác nhau tuỳ theo nền tảng chạy Python, ví dụ mô-đun winreg chỉ có ở hệ điều hành Window, hoặc hai giá trị sys.ps1 và sys.ps2 của mô-đun sys chỉ có trong PI, còn sys.path lại thể hiện các nơi có thể tìm kiếm mô-đun.   Trò chơi nhỏ: cùng xem sys.ps1 và sys.ps2 có giá trị gì trong PI của máy bạn sau đó gán nó bằng một giá trị bất kỳ rồi thử in ra một câu xem có gì thú vị sẽ xảy ra nhé.   (Nếu bạn đang không vui, hãy bỏ qua mấy trò nhảm của mình ạ)   Hàm dir()   Nhìn một mô-đun mình chẳng biết nó có gì cả, bạn dir() này như kiểu chụp X-quang cắt lớp xem cái mô-đun của mình chứa những biến gì, những hàm nào, nhưng ở dạng rất sơ khai, là một mảng các tên được sắp xếp theo thứ tự A đến Z.      Chưa hết, gọi dir() không có giá trị truyền vào trong PI sẽ thấy được những biến, hàm có thể sử dụng ở PI hiện tại:      Lưu ý nhỏ là dir() không list ra được những hàm và giá trị được dựng sẵn(mấy bạn built-ins). Muốn xem mấy bạn này, mình phải dùng cái gọi là dir(builtins)      Gói   Gói(package) là một nhóm các mô-đun khác nhau. Nó tương tự như thư mục chứa nhiều tệp tin vậy, nhưng cần phải đăng ký nhẹ với python để nó biết đó là gói, bằng cách thêm file init.py là python biết mình khởi tạo gói.   Một gói cũng có thể chứa nhiều gói con khác nằm bên trong nó.   Ví dụ mình muốn thiết kế một gói tên là “calculators” chứa hai gói con là máy tính “casio_fx115” và “casio_fx9750” đồng thời chứa các mô-đun “utils” thì sẽ có cấu trúc thư mục là:      Nạp gói, mô-đun và các lưu ý   Lỗi khi import mô-đun là lỗi khá phổ biến với người mới học. Do đó, khi thực hiện import, bạn hãy nhớ đến 2 câu thần chú: “Tôi đang đứng ở đâu? Thứ tôi cần đang ở đâu?”   Nghe khá tào lao nhưng bạn lấy thư mục/gói chứa điểm chung gần nhất của nơi bạn đứng và nơi bạn cần sẽ là điểm bạn thực hiện import từ đó.   Chắc bạn không hiểu đâu, để mình ví dụ nè:   (ví dụ hơi lộn xộn, bạn phải thật bình tĩnh khi đọc và dòm cái hình bên trên nữa nhé)   Ví dụ 1: Import hàm total từ utils.py vào total.py trong thư mục casio_fx115   Thì mình sẽ làm thế này:   – Mình xác định mình đang đứng ở “casio_fx9570/total.py” tức là đứng trong gói “casio_fx9570“   – Thứ mình cần đang ở “utils.py” là mô-đun của gói “calculators”   =&gt; Do đó, gói chung gần nhất của hai bạn này là “calculators”, vì bạn ni bọc bạn “casio_fx9570“.   Cho nên, mình sẽ import từ thằng cha, cụ thể là trong “casio_fx9570/total.py” cần:      from calculators.utils import total    Ví dụ 2: Import hàm “total_fx9750” từ mô-đun “total.py” trong thư mục “casio_fx9570″ vào mô-đun “total.py” nằm trong thư mục “casio_fx115″   Thì mình sẽ làm thế này:   – Mình xác định mình đang đứng ở “casio_fx115/total.py” tức là đứng trong gói “casio_fx115“   – Thứ mình cần đang ở “total.py” là mô-đun của gói “total_fx9750“   =&gt; Do đó, gói chung gần nhất của hai bạn này là “calculators”, vì hai bạn này đều là gói con của “calculators”. Cho nên, mình cần import từ gói cha, cụ thể trong “casio_fx115/total.py” cần:      from calculators. casio_fx115.total import total_fx9750    **Lưu ý 1: “from  import A\"**   Cú pháp **“from  import A“**, thì A có thể là:   – một gói con nằm trong “gói”   – một mô-đun con nằm trong “gói”   – một hàm, một biến nằm trong gói(nằm trong file init.py)   Thứ tự kiểm tra của câu lệnh import này là:   – Đầu tiên, cho A là gói và kiếm nó để nạp vào   – Nếu A không phải gói, nó lại giả định A là mô-đun và kiếm nó để nạp vào   – Nếu A không phải mô-đun, tiếp tục giả đinh A là hàm, là biến số để kiếm và nạp vào   – Nếu đến cuối vẫn không tìm thấy A, ImportError sẽ la làng lên.   Lưu ý 2: “import A.B.C”   Cú pháp “import A.B.C”, thì:   – A, B phải là các gói   – C có thể là gói hoặc mô-đun, nhưng C KHÔNG THỂ là một hàm, một biến được   Tệp init.py   Thường thường, init.py là một tệp rỗng, tuy nhiên init.py cũng có thể dùng để chứa code khởi tạo cho gói đó hoặc dùng để gán biến all , thể hiện khi import với * thì sẽ có những mô-đun nào được nạp. Nếu biến này không được gán, python hiểu là tất cả các mô-đun trong gói đều được nạp khi gọi import với *.   Ví dụ, trong gói calculators gán trong file init.py:      all = [“utils”]    thì khi gọi “from calculators import *” sẽ có mô-đun “utils” được nạp vào. _______________________________________________ Nội dung bài mô-đun trong Python Tutorial đến đây tạm hết rồi, cám ơn mọi người đã đọc.   Hôm nay mình tìm được một bản dịch The Python Tutorial qua tiếng Việt khá đầy đủ, bản dịch này của cộng đồng python Việt Nam, nó ở đây. Mọi người ghé đọc nhé, nội dung rất đầy đủ, kiểu như dịch từng chữ trong bản gốc ra luôn ấy, chứ không phải kiểu học hiểu ý rồi viết lại như mình.   Đọc bản dịch này làm mình cảm thấy thật là hổ thẹn với những thứ mình viết ra ở bài này và những bài trước. Và mình phân vân không biết có nên viết tiếp về ba phần chính còn lại của tutorial này là: “Đầu vào và đầu ra”, “Lỗi và các ngoại lệ”, “Lớp” hay không nữa vì bản dịch rất đầy đủ rồi.   Nghĩ từ chiều tới tối thì mình đã đưa ra quyết định là sẽ tiếp tục viết ba bài còn lại cho hoàn thành nội dung của The Python Tutorial theo ngôn ngữ của BeautyOnCode.   Thực sự là mình không có dịch hết nội dung của sê-ri, mình đọc làm và viết lại, hay gọi nôm na là thổi hồn và chút hài hước theo ngôn ngữ dân dã vô cái đám kiến thức khá là khô khan này.   Với mình, học xong, hiểu rồi, viết lại tốn khá là nhiều thời gian, nhưng càng làm mình lại càng thấm, mình thấy yêu thương từng câu từ, từng hình ảnh, demo, từng đoạn code mà mình viết và lập trình không còn khô khan nữa.   Mình lảm nhảm đến đây cũng tạm rồi hehe, chốt lại là có bản dịch đó, mọi người cứ vào đọc cho gọn, còn mình cứ tiếp tục học và viết theo cách của mình thôi à.   Thay lời tạm biệt, gửi bạn một bài blog của RealPython “Python Modules and Packages: Introduction” rất đầy đủ và bổ ích &lt;3  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/module-and-package-in-python/",
        "teaser": "/assets/images/2020/04/2020-08-tai-lieu-hoc-va-nghien-cuu-python-cover.webp"
      },{
        "title": "Chiếc máy tính PI(Python Interpreter)",
        "excerpt":" Chào mừng mọi người đến với phần “The Python Tutorial” của series “Khám phá Đại Bản Doanh Python”. The Python Tutorial mang đến những khái niệm và các tính năng cơ bản nhất của Python và cú pháp của nó.   Những nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại theo ngôn ngữ của mình.   Khai vị với Python   → Bạn đang cần cái gì đó có thể tự động giúp bạn hoàn thành một số công việc như là: tìm kiếm và thay thế một lượng lớn files hay đổi tên và sắp xếp lại một đống ảnh theo một cách nào đó.   → Bạn là một là lập trình viên và đang làm việc với một số thư viện như C/C++/Java nhưng thấy chu trình ghi, biên dịch, kiểm tra rồi lại biên dịch riết rồi thấy chán vì nó chậm quá, rồi  bạn muốn tìm một bạn nào đó ngon lành và có thể mở rộng nó trên phần tiếp theo của dự án mình đang làm mà chạy nhanh hơn.   Thứ bạn cần là Python đó, vì Python có thể giúp bạn:*   → Viết tập script shell Unix hay batch files cho Windows để hoàn thành một công việc nào đó như là duyệt qua các files, thay đổi văn bản, …   → Bạn có thể viết chương trình Python thành các mô-đun để dùng lại ở những nơi khác. Python cũng đi kèm với một bộ mô-đun tiêu chuẩn đã cung cấp sẵn để bạn sử dụng cho ứng dụng của mình hay đơn giản là dùng như những ví dụ thực thế khi học như là: file I/O, system call, sockets hay thậm chí là bộ mô-đun giành cho người dùng đồ họa như Tk.   → Python sẽ giúp bạn tiết kiệm thời gian cho việc biên dịch hay kết nối, vì nó tự dịch rồi. Trình thông dịch còn là nơi mình hay dùng để kiểm tra những đoạn code nhỏ hay dùng để tính toán nhanh chóng.   Chương trình Python thường ngắn và dễ đọc vì:   → không cần khai báo biến   → nhóm lệnh được phân biệt bằng cách tab đầu dòng   Chương trình Python có thể mở rộng với các bạn khác như C, C++   Cuối cùng nhưng góp phần phá tang định kiến về Python(đối với mình) là tên bạn ấy được đặt theo một chương trình BBC có tên “Monty Python’s Flying Circus” chớ không có bất kỳ liên quan tới loài bò sát(con trăn – tiếng anh là python) đâu nghe! Ơ cơ mà không phải cái logo nó hình hai con trăn hay sao (?!)   Dùng luôn Python   Gọi Python Interpreter(PI)   Có mấy cách giúp mình có thể gọi bạn này lên:   – Ở Windows: Gõ python ở Command Prompt   – Ở Linux: Gõ python3 ở cửa sổ Terminal   – Ở MacOS: Gõ python3 ở Terminal   Sau khi gọi được python interpreter lên, bạn sẽ thấy bạn đang ở primary prompt với ba dấu »&gt;, còn ba dấu … là thể hiện bạn đang ở secondary prompt, nơi những câu lệnh được tiếp tục viết.   Vì python phân biệt nhóm lệnh bằng tab đầu dòng nên với dấu … của nội dung trong nhóm lệnh nhớ tab vào nhé.      Xài Python như một chiếc máy tính nhỏ   Số(number)   Số trong Python:   → cộng(+), trừ(-) , nhân(*) , chia(/), chia lấy nguyên(//), chia lấy dư(%), luỹ thừa(**)   → nhóm phép toán với (), gán biến với =   → _ : kết quả cuối cùng trả ra trong PI, dùng làm ký tự đại diện cho tính toán tiếp theo   Python hỗ trợ: số nguyên(int), số thực(float), số thập phân(decimal), phân số(fraction), số phức(complex), …      Chuỗi(string)   Trong Python, string được bọc bởi dấu ngáy đơn ‘ hoặc dấu nháy kép “. Khi chuỗi có nhiều dòng nó được bọc bởi cặp ba dấu nháy đơn hoặc cặp ba dấu nháy kép.   Ký tự đặt biệt có thể escape với dấu \\, ví dụ \\n trong string thể hiện sự xuống dòng.   Khi gọi print() với chuỗi, thì chuỗi sẽ được in kèm định dạng của nó, ví dụ print(‘a\\nb’) sẽ in ra \\n là xuống dòng. Muốn print không kèm định dạng, thêm r trước dấu nháy đầu tiên thể hiện print raw string .      → Hai chuỗi có thể nối nhau bằng toán tử (+) hoặc hai chuỗi(literals – không chứa variable, phép toán) đứng gần nhau sẽ tự động nối vào nhau, ví dụ: ‘Py’ ‘thon’ sẽ nối thành ‘Python’   → Chuỗi trong Python là sequence types(iterable, kiểu data có thể dùng for để loop qua từng phần tử của nó được), do đó nó có thể indexed(theo chỉ số index), index bắt đầu từ số 0, duyệt từ trái qua phải. Nếu nó là số âm, thì sẽ duyệt từ phải qua trái, ví dụ: a = ‘abcde’ thì a[0] là ‘a’, a[-1] là e.   Khi truy cập index lớn hơn giới hạn của chuỗi, sẽ raise error “IndexError“, nhưng khi slice chuỗi mới index trên thì vẫn bình thường, ví dụ: a[2:52] là ‘cde’.   Built-in function len() dùng cho chuỗi trả ra chiều dài của chuỗi đó.   → Chuỗi trong Python là kiểu data immutable(bất biến, không thể thay đổi), do đó không thể gán giá trị cho chuỗi theo index, ví dụ: a = ‘abc’, không thể gán a[0] = ‘x’.   → Chuỗi còn hỗ trợ slicing(cắt thành chuỗi con) với : , ví dụ: a = ‘abcde’ thì a[2:4] là ‘cd’, start là a[2] luôn luôn được lấy, end là a[4] luôn luôn bị loại. a[2] là ‘c’, a[4] là ‘e’.   Khi start không có [:2] thì nó lấy default là 0, khi end không có [2:] thì nó lấy end là chiều dài của chuỗi đang được sử dụng. Điều này đảm bảo a[:i] + a[i:] = a.      Danh sách(list)   Python biết có nhiều kiểu dữ liệu hỗn hợp(được sử dụng để nhóm những kiểu dữ liệu khác với nhau), trong đó sử dụng nhiều nhất là list, được bọc bởi hai dấu ngoặc vuông mở đóng và các giá trị cách nhau bởi dấu phấy, ví dụ: list_a = [1, 2, 3, 4].   List cũng là sequence types, nên list cũng có thể indexed and sliced như string được, len() trả ra chiều dài của list. Có thể shallow copy một list với list_a[:]   Nối hai list lại với nhau bằng toán tử + cũng được luôn   List là mutable type, cho nên có thể thay đổi nội dung của bạn ấy được:   – gán trí trị trực tiếp, ví dụ: list_a[2] = 8, thì list_a sẽ trở thành [1, 2, 8, 4]   – thêm một giá trị mới với append()   – gán với slice, ví dụ: list_a[1:3] = [8, 9] thì list_a là [1, 8, 9, 4], nếu gán list_a[1:3] = [] thì list_a sẽ thành [1, 4]   – clear list_a bằng cách gán list_a[:] = []   Ngoài ra, list có thể chứa nhiều list khác gọi là nested lists      Lập trình cùng Python   Sau các phép toán đơn giản, là lúc bạn có thể tính toán phức tạp hơn, giải quyết nhiều bài toán khác nhau, và bước chân vào thế giới lập trình rồi đó.   Như mình có thể gán nhiều biến cùng lúc, ví dụ: a, b = 2, 3 thì a là 2 và b là 3   Rồi mình có thể dùng vòng lặp for, while để duyệt qua các sequences types(list, string, set, dict, …), nội dung trong vòng lặp sẽ quy định bằng khoảng cách là một tab.   Hoặc mình có thể viết những điều kiện với các dấu &lt;, &gt;, ==, &lt;=, &gt;=, !=   print function giúp mình in ra các giá trị để kiểm tra nữa   Từ những điều trên, bạn có thể viết một chương trình đơn giản rồi đấy.      Hôm nay, tụi mình cùng tìm hiểu Python đến đây thôi.   Ở bài viết sau, mình sẽ qua bài thứ hai của phần “The Python Tutorial” thuộc sê ri vĩ đại “Khám phá Đại Bản Doanh Python”.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/chiec-may-tinh-PI/",
        "teaser": "/assets/images/2020/05/2020-05-chiec-may-tinh-PI-cover.jpg"
      },{
        "title": "Bắt đầu với Python?",
        "excerpt":"   Chào mừng mọi người đến với bài post thứ ba của phần “Lượn lờ cùng Python” của series “Khám phá Đại Bản Doanh Python“   Trong phần này, tụi mình sẽ cùng nhau dạo quanh quanh những phần ngoài lề trước khi tấn công vào document ở những phần tiếp theo nhé.   Mình sẽ đi trả lời nhưng câu hỏi sau trong “Lượn lờ cùng Python”:   ♣ Python có thể dùng để làm gì nhỉ?   ♣ Ai đã thành công cùng Python?   ♣ Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu? (bài hôm ni)   Những nội dung trong bài series này từ “Đại bản doanh Python” python.org, mình viết bằng ngôn ngữ của mình kèm theo những tài liệu khác mà mình thấy liên quan và hữu ích cho chủ đề của bài.   Bài dưới đây sẽ đi trả lời câu hỏi “Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?” nằm trong mục “Getting Started” nha   Háo hức với Python quá ♥ Mình nên bắt đầu từ đâu?  Dô dô, dô ngay và luôn, không đợi chờ gì nữa, học Python ngay thôi, lương nghìn lẻ một đô đang chờ ahihi   Ở phần “Bắt đầu với Python” này, gồm những nội dung chính sau:   – Python là gì thế ạ?   – Cách lượm Python về và chơi thử   – Chơi thử rồi, giờ là học thiệt nghe   – Tìm kiếm những ứng dụng làm sẵn   – Hỏi han thường gặp   Đi thôi mấy mọi người ơi!   Python là gì thế ạ?  Python là ngôn ngữ lập trình hướng đối tượng, có thể so sánh với Perl, Ruby, Scheme hoặc Java   Các tính năng đáng chú ý:   ♥ Cú pháp tao nhã, dễ đọc dễ viết   ♥ Viết chương trình một phát là có thể chạy liền   ♥ Thư viện chuẩn hỗ trợ các tác vụ phổ biến như kết nối server, tìm kiếm với các biểu thức(regular expression), đọc và chỉnh sửa file   ♥ Dễ dàng kiểm thử các đoạn code ngắn với Python interactive mode   ♥ Có thể thêm các mô đun khác được viết bằng ngôn ngữ khác như C, C++. Có thể nhúng vào ứng dụng khác để tạo giao diện sử dụng   ♥ Chạy trên đa nền tảng: Mac OS X, Linux, Windows, Unix. Miễn phí tải xuống, miễn phí sử dụng   Các tính năng đáng chú ý về ngôn ngữ:   ♥ Nhiều kiểu dữ liệu: number(floating point, complex, and unlimited-length long integers), string (both ASCII and Unicode), lists(danh sách), and dictionaries(từ điển). Kiểu dữ liệu động và mạnh mẽ, trộn các loại dữ liệu khác nhau sẽ báo lỗi ngay(như cộng string với number)   ♥ Hỗ trợ lập trình hướng đối tượng với lớp(classes) và nhiều lớp kế thừa(multi inheritances).   ♥ Code có thể nhóm thành các mô-đun, các gói. Bộ nhớ được quản lý tự động. Có hỗ trợ xử lý lỗi sạch đẹp   ♥ Python chứa các tính năng nâng cao của một ngôn ngữ lập trình như list comprehensions và generators   Cách lượm Python về chơi thử  Để lượm được Python về và chơi thử, mình phải cài đặt cái trình thông dịch của bạn ấy – Python Interpreter, đây là chương trình có thể đọc code Python và chạy. Ngoài ra, bạn ấy còn có kèm theo nhiều tài liệu có thể giúp mình hiểu hơn về Python nữa.   Thường thì Mac và Linux sẽ được tích hợp Python sẵn rồi, nhưng đó là bản lỗi thời rồi(Python 2.x), cho nên mình cần phải cập nhật lên bản mới(Python 3.x)(vui lòng kiểm tra ở trang Downloads này nhé).   Sau khi cài được python version 3 rồi, mình vô command line gõ “python” hoặc “python3” là đã được vô chế độ chơi thử cùng Python Interpreter rồi đó.   Vô đây chỉ là chơi thử thấy liền kết quả thôi, còn nếu bạn muốn lưu code lại và chỉnh sửa thì mình cần có IDE hoặc Code Editor để mở file đó, bạn có thể bắt đầu với [Thony](https://thonny.org/(một chương trình tích hợp sẵn Python Interpreter và IDE bundles), khá đơn giản và nhẹ nữa. (Bonus)   Nếu bạn đang tìm kiếm một IDEs hay Text Editors để xài với Python, thì python.org cũng có nguyên hai list to bự chảng cho bạn tham khảo luôn:   ⇒ IDEs Python giới thiệu tên, nền tảng, lần cuối cập nhật và vài thông tin chính của IDE   ⇒ Python Editors giới thiệu tên, nền tảng, viết bằng ngôn ngữ gì, giấy phép nào, và vài thông tin chính của editor   Mình tạt qua giới thiệu cái IDEs với cái Code Editors xí nếu bạn chưa rõ thì đọc thêm nhé   IDEs là môi trường lập trình cung cấp những tính năng như mã hoá, biên dịch, gỡ lỗi, thực thi, tự động điền vào(autocomplete), các thư viện trong cùng một nơi giúp các tác vụ trở nên đơn giản và dễ dàng hơn   Các IDEs phổ biến có thể kể đến: PyCharm, Spyder, PyDev, Idle, Wing, Eric Python, Rodeo, Thonny   Trong khi đó, Code editors là một nền tảng để chỉnh và sửa mã nguồn, phổ biến dùng với Python có thể kể đến: Sublime text, Atom, Vim, Visual Studio Code   Bạn có thể xem qua những python IDE, code editors ở article này, có giới thiệu những features chính, ưu điểm, nhược điểm để mình lựa cái dùng cho phù hợp.   Chơi thử rồi, giờ là học thiệt nghe  Lựa được nơi code rồi, mình bắt tay vô code thôi. Á nhầm, mình phải đọc mấy cái hướng dẫn(tutorial) trước, rồi code theo xem nó chạy thế nào chớ. Về hướng dẫn thì có 2 hướng chính nè:           Mới học lập trình, hãy đi cùng Beginner Guide – Non Programmer            Có tí kinh nghiệm lập trình rồi, thì đi cùng Beginner Guide – Programmer       Trong mỗi hướng dẫn, đều gồm những mục như giới thiệu sách phù hợp cho từng đối tượng, các tutorials và các websites, các khoá học tương tác, tài liệu giành cho người nghiên cứu khoa học, các videos và tools.   Mình thấy bên Non Programmer thì các khoá học tương tác được xếp trước những tài nguyên khác chắc là muốn người bắt đầu tương tác làm quen Python trước.   Còn bên Programmer thì là hai link review những khoá học tốt nhất giành cho Python để nắm bắt nhanh nhất, nàm trên top có [“Google Python’s class”](https://developers.google.com/edu/python/(miễn phí) và  khóa “Complete Python Bootcamp: Go from zero to hero in Python 3” từ Udemy(có phí).   Bên cạnh đó, khi cần tìm kiếm thêm thông tin gì về Python thì online documentation là nơi bạn cần ghé. Ngoài ra, cũng có Python tutorial học những thứ cơ bản nhất và giúp mình bắt đầu với Python, mình sẽ cùng học tutorial này trong những bài blog tiếp theo.   Sau khi học và viết những thứ cơ bản rồi, đã đến lúc bạn nên tìm hiểu thêm về Syntax Python cùng series “The Python Language Reference” và những thư viện chuẩn của Python với “The Python Standard Library“.   Bạn có muốn biết những recipes(công thức) và patterns(mô hình) phổ biến trong Python, hãy \bghé “ActiveState Python Cookbook” để xem.   Tìm kiếm những ứng dụng có sẵn  Nếu bạn muốn tìm kiếm những mô đun, package hay những ứng dụng được viết bằng Python rồi để tham khảo hay dùng trong ứng dựng của mình, thì nơi đầu tiên có thể ghé kiếm thử là PyPI – kho packages viết bằng Python sẽ tìm kiếm được những source code tốt nhất hoặc đơn giản chỉ cần hỏi thăm bác Google với những từ khoá như là “python package”, “python example”, “python recipes”, … là được rồi.   Nếu vẫn không tìm được thứ bạn cần, ngại gì không hỏi một câu trên Stackoverflow hay bất cứ ai bạn biết là họ biết nhiều Python hơn bạn nhỉ ^^.   Hỏi han thường gặp  Nếu bạn có câu hỏi nào về Python, thử kiểm tra trong phần “Hỏi han thường gặp” thử xem người ta đã trả lời chưa nhé.   Bonus cho bạn top câu hỏi Python trên StackOverflow nè.   Đây là bài cuối của phần “Lượn lờ cùng Python” rồi.   Tụi mình đã đi qua đám này hẳn mình đã hiểu cái độ quan trọng của Python và háo hức cho hành trình tiếp theo rồi đó.   Tiếp đến, mình sẽ gặm qua phần khó ăn nhất “Documentation”   Thực ra mình cũng ngán mấy cái documentation dữ lắm, cho nên mình không dại dột chi mà chui vô liền cái document lắm chữ đâu. Mình thấy ở đây còn có nhiều sự lựa chọn khác có vẻ dễ thương hơn nhiều, đó là “Audio/Visual Talks” và “Beginner Guide“. Phần ni gọi tên là “Làm quen kết bạn với Python” cho nó thân thiện ha.   BeautyOnCode.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/bat-dau-voi-python/",
        "teaser": "/assets/images/2020/06/2020-06-bat-dau-voi-python.jpg"
      },{
        "title": "Các công cụ điều khiển luồng dữ liệu trong Python",
        "excerpt":"   Mở bài  Chào mừng mọi người đến với bài post tiếp theo của phần “The Python Tutorial” của series “Khám phá Đại Bản Doanh Python”.   The Python Tutorial mang đến những khái niệm và các tính năng cơ bản nhất của Python và cú pháp của nó.   Mình đã biết qua các kiểu dữ liệu cơ bản cũng như các phép tính liên quan ở bài trước. Trong bài này, mình học tiếp về những công cụ điều khiển luồng dữ liệu, còn gọi là Control Flow Tools đồng thời đi sâu hơn về function trong Python nữa.   Những nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại theo ngôn ngữ của mình. Có những từ tiếng anh chuyên ngành mình không chắc dịch có đúng không cho nên mình giữ nửa nạc nửa mỡ(vừa Anh vừa Việt) nghen ^^   Các công cụ điều khiển luồng dữ liệu trong Python   if, for, break, continue, pass, else trong loops và range()   Lệnh if, else hẳn là nhóm lệnh rẽ nhánh phổ biến nhất quả đất rồi, nó đại diện cho câu thần chú “Nếu … thì” của chúng ta. Nhưng không phải một nếu một thì là được, thế giới này phức tạp lắm, cho nên có khi phải nhiều nếu nhiều thì mới xong, thế là nhóm lệnh combo if … elif … elif … … else ra đời, nhóm lệnh này tương tự “switch … case” trong javascript vậy.   Còn với vòng lặp, đã có lệnh for, bạn có thể lặp qua từng phần tử trong một danh sách(list) hay một bộ từ điển(dict), thậm chí có thể lặp qua một chuỗi(string) và làm việc với từng phần tử của nó.   Tuy nhiên, khi lặp qua các giá trị mang tính chất reference như dict, list(không biết dùng chữ chi chỗ ni, giống kiểu dữ liệu ref tới một vị trí data trong js ấy) thì việc thay đổi giá trị của từng phần tử sẽ ảnh hưởng tới giá trị ban đầu cho nên người ta khuyến khích mình hãy tạo ra một bản copy mà xài, hoặc khởi tạo một giá trị mới để lưu những thay đổi thì hơn.   Mời bạn xem một ví dụ bên dưới:    Bên cạnh đó, có một function tiện lợi hay dùng để lặp qua chuỗi các số, đó là hàm range().   Theo mặc định, range(number) sẽ lặp qua từ 0 đến number, với bước lặp mặc định tăng thêm 1.   – Nếu bạn muốn bắt đầu từ một số khác 0, có thể viết range(start_number, end_number) như range(3, 5).   – Nếu bạn muốn một bước lặp khác 1, hãy đổi thông số thứ 3 thành giá trị bước lặp, ví dụ, range(0, 10, 3) sẽ lặp qua 0, 3, 6, 9.   Trước đây, người ta thường kết hợp range() và len() để lặp qua một list vì các chỉ số index thể hiện thứ tự của phần tử trong list tương ứng với range của chiều dài của list, như thế này: range(len())   nhưng sau này hay dùng hàm enumerate() thì tiện lợi hơn.      Với range(), nó là một object thuộc class “range”, và là một generator(cái có thể loop qua đó) chứ không phải là list như bạn nghĩ, muốn nó thành list bạn phải dùng list convert nó qua mới được hen.   break, continue và else trong vòng lặp và pass   Đã có vòng lặp thì hẳn là phải có cách nào đó để nhảy ra ngoài vòng lặp đó, hay tiếp tục lặp qua phần tử khác mà không cần đọc cho hết code của phần tử này, break và continue giúp bạn làm những chuyện đó. Ở Python có cái lạ, là else có thể đi cùng với for nữa.      Còn lệnh pass, nó đại diện cho sự “không làm gì cả”, “lơ đi”, nó có ích khi mình viết structure cho app, đặt tên class, function thoả mái rồi thêm pass ở phần body thì sẽ không có báo lỗi syntax đâu.   Hàm(function)   Trong Python, hàm được định nghĩa bằng từ khoá “def” theo sau là tên function và danh sách tham số bọc trong (). Thường mỗi function sẽ có docstrings ngay dòng đầu tiên của body mô tả function đó. Khi gọi hàm và truyền đối số, đối số sẽ được nhận tương ứng theo vị trí của nó hoặc theo keyword của nó(nếu vị trí đó chưa có đối số truyền vào).   Trong function, để trả về giá trị nào đó ta dùng return. Nếu không có giá trị nào cụ thể được trả về thì mặc định return là None.   Có những function mặc định của từng loại object trong python, ví dụ append() là function của object list. Ta có thể check bằng lệnh dir() của object đó.   Khi định nghĩa hàm, thường đi kèm đối số của hàm đó, có 3 dạng đối số được kết hợp sử dụng:   Đối số mặc định(Default Argument Values)   Là các đối số đi kèm với giá trị mặc định của chúng. Trong trường hợp không có giá trị tương ứng được truyền vào, thì giá trị của đối số đó chính là giá trị mặc định, ví dụ:   def ask_ok(promp, retries=4, reminder=”Please try again”)   tham số retries có giá trị mặc định là 4   tham số reminder có giá trị mặc định là “Please try again”   Lưu ý: giá trị mặc định chỉ được gán một lần, do đó khi giá trị này được gán bằng những loại mutable object(có thể thay đổi được) như list, dict hay class instance thì sẽ dễ gây hiểu lầm như ví dụ sau:      Đối số từ khoá(Keyword Arguments)   Theo mặc định, các giá trị truyền theo thứ tự của đối số tương ứng. Nếu đối số không có giá trị mặc định thì nó là đối số bắt buộc phải được truyền vào.   Đối số từ khoá có dạng kwarg=value, dùng từ khoá để định nghĩa giá trị truyền vào thuộc đối số nào mà không cần quan tâm tới thứ tự của nó.      Đối số theo vị trí phải đứng trước đối số theo từ khoá      Khi quá nhiều đối số, ta có thể sử dụng * hoặc ** kèm tên cho đối số đại diện, ví dụ def bananashop(kind, *args, **kwargs). Đối số đại diện là một list các đối số(tìm hiểu thêm bên dưới phần đối số là một danh sách).   Các đối số đặt biệt(Special parameters)   Vì đối số của một function có thể theo vị trí hoặc là theo từ khoá và cả hai loại này có thể ở riêng hoặc ở chung trong cùng một function. Cho nên thiết lập một công thức chung, để từ đó có thể nhìn vào và biết đâu là đối số theo vị trí, đâu là đối số từ khoá, và đâu là có thể một trong hai theo công thức sau:      Ở đây, / và * là không bắt buộc. Nếu được sử dụng, những đối số đặt biệt này chỉ ra cách mà các giá trị được truyền vào hàm:   → position only: chỉ gồm đối số chỉ vị trí   → positional or keyword: có thể là đối số chỉ vị trí hoặc đối số từ khoá   → keyword only: chỉ gồm đối số từ khoá   Ví dụ   Dưới đây là hàm có đối số tuỳ ý, có thể là đối số vị trí hay đối số từ khoá đều cho phép:      Dưới đây là hàm chỉ cho phép đối số vị trí tham gia, định nghĩa bằng từ khoá đặt biệt / và đối số đứng trước nó:      Dưới đây là hàm chỉ cho phép đối số từ khoá tham gia, định nghĩa bằng từ khoá đặt biệt * và đối số đứng sau nó:      Cuối cùng là hàm cho phép cả 3 loại(chỉ cho phép đối số vị trí, chỉ cho phép đối số từ khoá, cho phép cả hai loại) tham gia và phân chia cụ thể bằng hai từ khoá đặt biệt /, *      Tóm lại, hãy ghi nhớ công thức định nghĩa hàm trong Python:   def f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):   Và một vài chỉ dẫn sử dụng cho từng loại:           Đối số vị trí chỉ nên được sử dụng khi các tham số không biết đặt tên thế nào cho đúng(vì nó không có ý nghĩa cụ thể nào) .            Đối số từ khoá nên được ưu tiên sử dụng để định nghĩa các tên từ khoá dễ hiểu, rõ ràng.            Đối với API, chỉ sử dụng đối số vị trí để ngăn chặn việc thay đổi nếu các tên tham số có thể sửa đổi trong nay mai.       Đối số là một danh sách tuỳ ý   Đây là một loại đối số có thể dao động tuỳ vào giá trị được truyền vào(arbitrary argument lists), các giá trị này sẽ được bọc trong một tuple(args ở ví dụ bên dưới), ví dụ:   def write_multiple_items(file, separator, *args):        file.write(separator.join(args))   Thông thường, đối số này được đặt cuối danh sách và trong trường hợp phía sau nó còn những đối số khác thì đó phải là đối số từ khoá.    Giải nén một danh sách đối số   Ở trên, ta thấy những đối số được truyền riêng biệt nhau nhưng khi vào hàm thì chúng nó được bọc lại trong một tuple(là args). Và ngược lại, có khi mình truyền vào một list, hay một tuple và muốn giải nén nó ra trong function, quá trình này gọi là “unpacking”.   Ví dụ1: function range() cần hai đối số start và stop, nhưng args là một list nên ta unpacking nó bằng * khi dùng với range      Ví dụ 2: unpacking một dictionary với key là đối số từ khoá và value là giá trị truyền vào bằng **      Biểu thức lambda   Bên cạnh cách định nghĩa hàm bằng def, có thể dùng từ khoá lambda để định nghĩa một hàm không tên và được giới hạn định nghĩa trong một biểu thức duy nhất.   lambda function thường được dùng khi cần định nghĩa những function nằm lồng trong function khác một cách nhanh chóng, ví dụ như gán key nằm trong function sort với lambda function.      Docstrings của hàm   Docstrings là một loại ghi chú có thể mở rộng thành nhiều hàng, bắt đầu và kết thúc bằng “””(3 dấu ngoặc kép), thường được sử dụng ngay dưới khai báo hàm trong Python để diễn giải nội dung cũng như ý nghĩa các đối số và giá trị trả về.   Vài quy ước về nội dung và định dạng của nó như dòng đầu tiên là một câu có nội dung ngắn gọn súc tích thể hiện ý nghĩa chung, tiếp đến là một dòng trống, sau đó đến nội dung cụ thể hơn cho phần mô tả.   Function Annotations   Function Annotations là chú thích của hàm về các loại dữ liệu do người dùng định nghĩa trong function.   Annotations được lưu trong thuộc tính annotations của hàm, nó được định nghĩa sau dấu : của tên đối số và kiểu dữ liệu của hàm số trả về sẽ được định nghĩa với dấu -&gt;, ví dụ:   def full_name(first_name: str, last_name: str) -&gt; str:     return first_name + last_name  thì full_name.annotations sẽ có giá trị là:   {‘full_name’: &lt;class ‘str’&gt;, ‘return’: &lt;class ‘str’&gt;, ‘first_name’: &lt;class ‘str’&gt;, ‘last_name’: &lt;class ‘str’&gt;}   Coding Style   Trên đây mình đã học qua các lệnh và nhóm lệnh cũng như tìm hiểu về function từ đơn giản đến chi tiết, và đây là lúc nên nói đến phong cách code trong Python(vì code dài rồi không thể cứ thích viết sao thì viết được ^^):   Trong Python, PEP8 rất phổ biến như là một hướng dẫn về cách viết code Python mà hầu hết các dự án đều tuân thủ theo, giúp code dễ đọc và nhìn dễ chịu, dưới đây là một vài nội dung quan trọng bạn cần biết:   → Thụt lề là 4 dấu cách(không dùng tab)   →Một dòng không dài quá 79 ký tự   → Mỗi function, class cách nhau 2 dòng trống, và các đoạn code trong function/class cách nhau một dòng   → Chú thích nên đặt ngay trên dòng được chú thích, sử dụng docstring định nghĩa ý nghĩa của hàm và các thông tin liên quan   → Khoảng trắng được sử dụng xong quanh các toán tử và phía sau dấu , cho dễ đọc   → Tên class đặt dạng UpperCamelCase và tên function, method trong class đặt dạng lowercase_with_underscores. Luôn dùng self là tên của param đầu tiên của method trong class   → Dùng các loại mã hoá phổ biến như UTF-8, ASCII   → Không dùng các loại ngôn ngữ khác nhau trong mã code(ví dụ không comment bằng tiếng Việt @@)   Kết bài   Ngày nào cũng làm việc với Python, ngày nào cũng dùng control flow của nó và function, cơ mà đến đây mình mới thực sự có thể nói là mình từng học qua các bạn ấy ^^   Hôm ni các bạn cùng mình học Python đến đây thôi nhé, những nội dung này toàn là kiến thức cơ bản của Python mà mình vừa đọc vừa viết để luôn tiện ôn bài luôn hihi.   Ở bài viết sau, mình sẽ đi học tiếp về cấu trúc dữ liệu của Python nằm trong “The Python Tutorial” thuộc sê ri tào lao vĩ đại “Khám phá Đại Bản Doanh Python” nha.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/dieu-khien-luong-du-lieu-python/",
        "teaser": "/assets/images/2020/06/2020-06-bat-dau-voi-python.jpg"
      },{
        "title": "Cấu trúc dữ liệu​ trong Python",
        "excerpt":"   Chào mừng mọi người đến với bài post tiếp theo của phần “The Python Tutorial” của series Khám phá Đại Bản Doanh Python. The Python Tutorial mang đến những khái niệm và các tính năng cơ bản nhất của Python và cú pháp của nó.   Mình đã biết qua về những công cụ điều khiển luồng dữ liệu và hàm ở bài trước. Trong bài này, mình học tiếp về các cách mà Python có thể giúp mình lưu trữ những dạng dữ liệu khác nhau nhé.   (Những nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại hoặc dịch lại theo ngôn ngữ của mình)   Cấu trúc dữ liệu   Cấu trúc dữ liệu là cách Python giúp tụi mình thể hiện, sắp xếp dữ liệu như thế nào.   Python có nhiều dạng cấu trúc khác nhau như: list, tuples, set, dictionary. Mỗi loại này sẽ thích hợp để thể hiện những dạng dữ liệu khác nhau tuỳ vào đặc điểm của loại dữ liệu đó.   Note: Trong PI(Python Interpreter), để kiểm tra những thuộc tính của như phương thức của một giá trị ta dùng dir() hoặc help() để xem tài liệu liên quan đến nó.   Lists(danh sách)   List là kiểu dữ diệu danh sách, kiểm tra nhanh cách phương thức được hỗ trợ bởi list bằng lệnh dir() ta thấy có .append(), .clear(), .copy(), .extend(), .index(), .insert(), .pop(), .remove(), .reverse(), .sort() là các phương thức chính.   Lưu ý nho nhỏ ở đây mình không nói đến những phương thức đặt biệt trong Python, những phương thức bắt đầu và kết thúc bằng __ như “add()”, “str()”. Mời bạn đọc thêm về các phương thức đặt biệt này tại Special Method Names.      Để biết rõ hơn các phương thức trên hoạt động ra sao, mình dùng help() để xem tài liệu về chúng.   Bạn có thấy đối số đặt biệt / bên dưới chứ, hi vọng bạn biết chúng dùng để làm gì ^^(nếu chưa rõ mời bạn ghé đọc phần Function trong bài này nhé)      Một vài cách tiếp cận tương đương:      list.append(x) tương đương với a[len(a):] = [x] hoặc a.insert(len(a), x)     list.extend(iterable) tương đương a[len(a):] = iterable     list.clear() tương đương với del a[:]     list.copy() tương đương với a[:]     list.pop(x) sẽ xoá một giá trị có index là x ra khỏi list và trả về giá trị đó     còn del(a[x]) sẽ đi xoá giá trị có index là x của list a, hoặc có thể xoá cả list a với del(a).    Những phương thức gọi có thể gây lỗi như list.remove(x), list.index(x) raise ValueError nếu x không tồn tại.   Những phương thức như insert(), remove(), sort() trả về None(vì làm thay đổi các dữ liệu gốc)   Với list, ta có thể sử dụng nó như là một ngăn xếp(stack), thêm giá trị vào ngăn xếp với append(), lấy giá trị mới nhất được thêm vào ra ngoài ngăn xếp bằng pop().   Với list, cũng có thể dùng như một hàng đợi(queue), thêm giá trị vào hàng đợi với append(), lấy bạn đợi lâu nhất ra trước với popleft().   Ngoài ra, list comprehension là cách tạo list đơn ngắn gọn, ví dụ: numbers = [x for x in range(10)] sẽ tương đương với       numbers = []     for x in range(10):      number.append(x)      Tuples   Tuple cũng là một kiểu dữ kiệu chuỗi và các giá trị được bọc bên trong hai dấu ngoặc đơn ngăn cách bằng dấu phẩy, ví dụ: a = (‘hi’, ‘there’)   Tuple tương tự như list, chỉ khác là tuple là kiểu dữ liệu immutable(không thay đổi được), còn list thì mutable(có thể thay đối).   Là kiểu dữ liệu immutable nhưng tuple có thể chứa các dữ liệu mutable được, ví dụ: b = ([1,2], [3,4])   Tuple có khả năng packing(tự nối lại được), như sau: a = ‘hi’, ‘there‘ hay c = ‘hi’   (chú ý dấu phẩy ở cuối trong trường hợp tuple chỉ chứa một phần tử con)   Và ngược lại, nó cũng có khả năng unpacking(tự tách ra được):** x, y = a** thì x sẽ có giá trị là ‘hi’ và y là ‘there’.      tuple là kiểu dữ liệu không thay đổi được nên nó chỉ có phương thức count() và index()   Sets   Set là bộ sưu tập không theo thứ tự các phần tử không trùng nhau, được bọc bởi hai dấu ngoặc nhọn {} hoặc khởi tạo bằng set().   Set có hỗ trợ các phương thức của tổ hợp như là phép toán giao, phép toán hợp, phép đối xứng, phép loại trừ.   Set có hỗ trợ set comprehensions.   Lưu ý không khởi tạo set rỗng bằng {} được, phải dùng set(), vì {} thể hiện cho kiểu dữ liệu dict         Dictionary(từ điển)   Nếu như list, tuple, set là các kiểu dữ liệu có thứ tự là các chữ số thì dict là kiểu dữ liệu có thứ tự là các từ khoá, và từ khoá là kiểu dữ liệu immutable như strings, numbers, tuples(không chứa giá trị mutable).   Có thể hiểu đơn giản dictionary là một bộ sưu tập của các giá trị key: value, với điều kiện key là không trùng nhau.   Dict khai báo với dict() hoặc {}, ví dụ: dict(name=’Thanh’) hay {‘name’: ‘Thanh’}         Kỹ thuật lặp qua các loại dữ liệu có trình tự   Ta thường làm việc với các loại dữ liệu có trình tự bằng cách duyệt qua tất cả các phần tử của nó với for và kết hợp:   → dùng .items() để lặp qua key, value của một dictionary      → dùng enumerate([‘a’, ‘b’, ‘c’]) để lặp qua chỉ số index và giá trị của chỉ số đó trong một list    → dùng zip() có thể lặp qua nhiều loại dữ liệu trình tự, ví dụ: zip([1, 2, 3], [‘a’, ‘b’, ‘c’])      → dùng reversed() có thể lặp theo thứ tự ngược lại      → dùng sorted() có thể tạo list mới theo thứ tự mà không làm thay đổi mảng ban đầu.      Các dạng so sánh   Trong các câu lệnh điều kiện, thường đi cùng với các dạng so sánh:   → bằng/lớn hơn/nhỏ hơn với “==“,  “&gt;“, “&lt;“   → giá trị thuộc một kiểu dữ liệu có trình tự với “in“, “not in“   → so sánh hai đối tượng với “is” hoặc “is not“   Kết hợp nhiều dang so sánh với nhau bằng “and“, “or“. Phủ định bằng “not“.   Bài học cơ bản về các kiểu dữ liệu trong Python đến đây là hết rồi.   Ở bài viết sau, mình sẽ đi học tiếp về “mô-đun, các dữ liệu vào/ra kết hợp quản lý lỗi và các ngoại lệ” trong Python.   “The Python Tutorial” thuộc sê ri “Khám phá Đại Bản Doanh Python” học mãi vẫn chưa hết, cố lên nào!  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/cau-truc-du-lieu-python/",
        "teaser": "/assets/images/2020/06/2020-06-cau-truc-du-lieu-python-cover.webp"
      },{
        "title": "Input/Output(I/O)​ trong Python",
        "excerpt":" ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/input-output-python/",
        "teaser": "/assets/images/2020/06/2020-06-cau-truc-du-lieu-python-cover.webp"
      },{
        "title": "Khám phá Đại Bản Doanh Python Series Overview",
        "excerpt":" (Image by Ajay kumar Singh from Pixabay)   Và từ đó, sê ri “Khám Phá Đại Bản Doanh Python” ra đời   Chuyện là mình học Python cũng được hơn hai năm rồi và đang làm dự án về Python và Django. Lần đầu viết blog về tech, chẳng biết viết gì nên mình đi nghiên cứu trang python.org để lưu lại kiến thức từ khi bắt đầu học để hiểu rõ hơn về cái mình đang học và làm.   Mình chọn ra các chủ đề dưới đây mà mình cho là hay ho nhất để viết những bài về “Đại Bản Doanh Python”, bao gồm:   Phần 1: Lượn lờ cùng Python(Applications, Getting Started, Help, Success Stories)   → Python có thể dùng làm gì nhỉ?   → Ai đã thành công cùng Python?   → Bắt đầu với Python   → Tài liệu videos và audios cho người học và nghiên cứu Python   Phần 2: Hẹn hò cùng Python(The Python Tutorial)   → Chiếc máy tính PI(Python Interpreter)   → Các công cụ điều khiển luồng dữ liệu trong Python   → Cấu trúc dữ liệu trong Python   → Đầu vào và đầu ra(I/O) trong Python   → Lỗi và xử lý ngoại lệ trong Python   → Không gian tên(namespace) và phạm vi(scope) trong Python   → Lớp trong Python   → Iterable, Iterator, Generator trong Python   Phần 3: Thăm nhà bạn Python   → Tham quan thư viện chuẩn của Python   → Tham quan thư viện chuẩn của Python(phần 2)   → Tạo môi trường ảo khi làm với dự án Python   Phần 4: Đọc thêm về người bạn đời của tôi   → PEPs must-read   → PyPI, news Python, events, jobs   Mấy bài có link là bài em học qua rồi á, còn mấy cái list sẵn vẫn đang được học ạ.   BeautyOnCode.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/dai-ban-doanh-python-series-overview/",
        "teaser": "/assets/images/2020/07/2020-07-dai-ban-doanh-python-series-overview-cover.jpg"
      },{
        "title": "Lỗi và xử lý ngoại lệ trong Python",
        "excerpt":"Hôm ni, mình học tiếp về bạn “Lỗi và ngoại lệ”, bài blog tiếp theo nằm trong series “Khám phá Đại Bản Doanh Python”, thuộc phần Python Tutorial nha.   Ở bài này, mình sẽ đi tìm hiểu các loại lỗi và ngoại lệ trong Python cũng như cách xử lý và tạo ngoại lệ riêng của mình.   (Những nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại hoặc dịch lại theo ngôn ngữ của mình)   Nếu bạn đọc từ đầu sê-ri đến đây, hẳn là bạn có thấy vài đoạn code mình cố tình ví dụ cho nó xuất hiện lỗi, trong bài “I/O trong Python”:       Hình trên cho mình thấy có hai loại lỗi có thể phân biệt được, đó là: “lỗi cú pháp” và “ngoại lệ“.   Lỗi cú pháp   Lỗi cú pháp là lỗi xảy ra khi phân tích cú pháp, là loại lỗi mình hay gặp nhất.  Trình phân tích cú pháp sẽ lặp lại dòng bị lỗi và hiển thị một dấu mũi tên nhỏ tạo vị trí là thời điểm sớm nhất trong dòng nơi lỗi được phát hiện.   Ở ví dụ trên thể hiện lỗi được phát hiện tại vị trí hàm print được gọi, lý do là bị thiếu dấu “:”   Đôi khi lỗi syntax nhưng không có vị trí được phát hiện, ví dụ như ở đầu bài “SyntaxError: positional argument follows keyword argument” thể hiện phải đặt biến theo vị trí trước biến theo từ khoá.   Ngoại lệ   Ngay cả khi cú pháp đã đúng, mã vẫn có thể gây ra lỗi trong quá trình thực thi. Những lỗi phát hiện trong quá trình thực thi code được gọi là các ngoại lệ.      Như bạn thấy ở trên thì ngoại lệ có nhiều loại khác nhau và sẽ được in kèm thông tin của lỗi.   Ở ví dụ trên, tụi mình có các ngoại lệ như là “ZeroDivisionError“, “NameError“, “TypeError“   Xử lý ngoại lệ   Khi viết chương trình với Python, đôi khi mình sẽ cố tình để ngoại lễ xảy ra để xử lý chúng. Như ở ví dụ dưới đây, đầu vào được nhập từ phía người dùng có thể gây ngoại lệ “ValueErrror” và mình đi xử lý bằng cách gửi thông tin cho người dùng biết họ đã nhập sai.      Ở ví dụ trên đã dùng nhóm lệnh “try … except” để bắt và sử lý ngoại lệ.   Đoạn code trên hoạt động như sau:   – Đầu tiên, mã trong mệnh đề “try” được thực hiện   – Nếu không có ngoại lệ xảy ra, mệnh đề “except” sẽ bị bỏ qua và kết thúc chương trình(như khi mình nhập 9)   – Nếu có ngoại lệ xảy ra trong lúc thực thi mã trong mệnh đề try thì các đoạn mã bên dưới nó sẽ bị bỏ qua. Nếu lỗi ngoại lệ trùng với lỗi mình bắt(sau từ khoá “except”, ở đây là ValueError), thì đoạn mã trong except sẽ được thực thi(in ra “Oops! …”). Và đoạn mã trong try sẽ tiếp tục được thực hiện.   – Còn nếu ngoại lệ xảy ra nhưng không trùng với ngoại lệ mình đã bắt thì chương trình sẽ dừng lại và in ngoại lệ ra màn hình(ngoại lệ chưa được xử lý).   Vì có thể có nhiều ngoại lệ xảy ra nên:   – một “try” có thể đi cùng với nhiều “except”: hay sử dụng khi mình muốn xử lý từng except khác nhau.   – một except có thể bắt nhiều loại ngoại lệ, ví dụ: except(RuntimeError, TypeError): hay sử dụng khi mình muốn gom nhiều loại except vào sử lý một lần.   Xe cấp cứu nào đến trước   Có hai đoạn code như hai hình dưới đây, cùng đoán thứ tự in ra khi hai example 1, 2 được thực thi nhé 😀   Lưu ý là “RotDH_NV1” được extend từ class Exception      Bạn nghiên cứu kỹ chưa, đã đoán được thứ tự in ra ở hai ví dụ là gì chưa nhỉ?   Trước khi dòm đáp án, hãy cố thử đưa ra kết quả của mình trước nha.    Đây là đáp án của mình, để mình làm thử coi đúng không hen:   Đầu tiên là cả thứ tự kế thừa của mấy bạn này:   Exception &gt; RotDH_NV1 &gt; RotDH_NV2 &gt; RotDH_NV3   Như vậy là khi vòng lặp thực thi từng đối tượng:   Example 1:   – raise RotDH_NV1 thì kiểm tra:   -&gt; trùng với except RotDH_NV3 -&gt; False, đi tiếp   -&gt; trùng với except RotDH_NV2 -&gt; False, đi tiếp   -&gt; trùng với except RotDH_NV1 -&gt; True, đi in ra “RotDH_NV1“   – raise RotDH_NV2 thì kiểm tra:   -&gt; trùng với except RotDH_NV3 -&gt; False, đi tiếp   -&gt; trùng với except RotDH_NV2 -&gt; True, đi in ra “RotDH_NV2“   – raise RotDH_NV3 thì kiểm tra:   -&gt; trùng với except RotDH_NV3 -&gt; True, đi in ra “RotDH_NV3“   Vậy kết quả in ra ở example 1 là:      RotDH_NV1     RotDH_NV2     RotDH_NV3    **Example 2: **   – raise RotDH_NV1 thì kiểm tra:   -&gt; trùng với except RotDH_NV1 -&gt; True, đi in ra “RotDH_NV1“   – raise RotDH_NV2 thì kiểm tra:   -&gt; trùng với except RotDH_NV1 -&gt; True, đi in ra “RotDH_NV1“   – raise RotDH_NV3 thì kiểm tra:   -&gt; trùng với except RotDH_NV1 -&gt; True, đi in ra “RotDH_NV1“   Vậy kết quả in ra ở example 2 là:      RotDH_NV1     RotDH_NV1     RotDH_NV1    Từ ví dụ trên, mình thấy được khi có ngoại lệ được raise lên, đụng bạn nào là bạn ấy thực thi trước, nó cũng giống như việc cấp cứu vậy, xe cấp cứu nào đến trước thì chở người ta đi bệnh viện trước.   Đôi khi sẽ có lỗi xảy ra nhưng mình chưa đoán được loại exception đó là gì, và mình thường xử dụng “except:” không đi kèm với loại ngoại lệ nào, để hốt trọn mấy bạn còn lại.   Tuy nhiên nhớ cẩn trọng khi xài bạn này nha, vì bạn ấy hốt cả rổ nên sẽ dễ che dấu lỗi của chương trình và gây khó khăn cho việc kiểm lỗi ý.   Do đó, tốt nhất là nên dùng bạn ấy cho tụi còn lại, in lỗi ra ngoài và raise lại bạn ấy lên để biết mà chủ động bảo vệ code nha.   Làm ri nè: bắt coi mặt mũi thằng lỗi ra sao rồi raise error lên lại để cho bạn lỗi ngoài ý muốn không cứ thế mà lặng thinh lơ đi.   except:       print(‘Lỗi chi mà hông rõ nè”, sys.exc_info()[0])       raise   Đoạn ni cho mình lưu ý xí nữa nha. Có bạn nào hay xài “except Exception as e:” để bắt các loại ngoại lệ còn lại không nhỉ?   Khi mình xài cái “except Exception as e:” thì có cái tiện là mình có thể truy cập vào các thuộc tính của đổi tượng “e” như e.message hay e.args.   Nhưng bạn lưu ý xíu là cái “except Exception as e:” nó khác với cái “except:” nha. Cụ thể:   – “except:” bắt tất cả các loại ngoại lệ.   – “except Exception:” hoặc “except Exception as e:” bắt tất cả các loại ngoại lệ nhưng TRỪ “BaseException”, “SystemExist”, “KeyboardInterupt” và “GeneratorExist”(Có nghĩa là gặp các bạn bị trừ đi này vẫn la làng  chứ không có im lặng đâu nha)   Làm cho tôi điều này nếu không bị dính ngoại lệ nào(Do it if no exception raise)   Ngoài ra, nhóm “try … except” còn có một mệnh đề đi kèm không bắt buộc là “else”, đi sau tất cả các loại “except”.   Mệnh đề này thường chứa các đoạn mã cần thực thi nếu mệnh đề try không có bất cứ ngoại lệ nào.   try:    # code cần thực thi except OSError:    # xử lý ngoại lệ OSError else:    # thực thi đoạn này dù ngoại lệ có bị bắt hay không   Dùng mệnh đề else như trên thì tốt hơn so với việc bỏ đoạn code cần thực thi đó luôn trong mệnh đề try như thế này:   try:    # code cần thực thi    # thực thi đoạn này dù ngoại lệ có bị bắt hay không except OSError:    # xử lý ngoại lệ OSError   Chụp cắt lớp ngoại lệ   Khi ngoại lệ xảy ra, bạn ấy có một vài giá trị để thể hiện mình, kiểu như mình tên gì, nhà ở đâu hay gia đình có mấy người ý, mấy bạn này hay được gọi với tên tiếng anh là “exception’s argument”.   Mình có từng nhắc đến các bạn này ở trên đoạn “except Exception as e” có e.message và e.args ý ạ.   Ngoài mấy bạn mặc định được trả ra như trên, thì khi mình raise ngoại lệ, mình cũng có thể truyền cho bạn ấy những giá trị cụ thể như sau: “raise Exception(“value 1”, “value 2″)”   Để cho tiện thì các giá trị được truyền vào này mặc định sẽ được trả ra ở hàm khởi tạo __str__() của exception, cho nên khi gọi print(e) của e trong “except Exception as e”  thì nó có giá trị là (“value 1”, “value 2”). Hoặc e.args cũng có giá trị như trên.   La làng khi có ngoại lệ   Ở các nội dung trên, rất nhiều lần tụi mình đã la làng mỗi khi code có vấn đề, bạn đã biết cách la làng khi có ngoại lệ rồi phải không?   Đó chính là sử dụng cuộc gọi cấp cứu 115 =))   Mình đùa thôi, đó là dùng từ khoá “raise” đi kèm với ngoại lệ hoặc đi một mình bạn ấy cũng được.   Đổ lỗi   Ha ha, bạn có tin ngoại lệ đổ lỗi cho nhau được không?   Nếu bạn muốn thì nó được. Thật á!   Đây là ví dụ cho sự đổ lỗi, hay gọi hoa mỹ hơn là các ngoại lệ được xâu chuỗi với nhau, mời bạn xem đoạn code này:      Ở trên, rõ là exception IOError được bắt, nhưng mình cố tình đổi lỗi thành RuntimeError bằng cách sử dụng “from”, cú pháp giúp mình có thể xâu chuỗi lỗi IOError qua lỗi RuntimeError và in cả hai bạn này ra màn hình như trên.   Nhưng nếu bạn chỉ muốn in lỗi “RuntimError” thôi, và không muốn hiện lỗi IOError nữa, thì có thể dùng “from None” để vô hiệu hoá quá trình xâu exception của bạn from.   Khi đó nó sẽ làm việc như thế này:      Yeah, vậy là tụi mình có thể đổi lỗi trắng trợn mà không truy được nguồn gốc luôn(trừ khi nhìn vô code).   E hèm, tuy nhiên, bạn này khá là nguy hiểm nha vì đổi tứ tung lên cả lại làm khó khi debug ấy, nên thận trọng khi dùng thì hơn.   Ngoại lệ của mình   \bĐó giờ(ý là từ đầu bài tới chừ), mình làm việc với ngoại lệ của người ta(ngoại lệ mặc định của Python), giờ mình cũng thích tạo ngoại lệ của riêng mình rồi, đơn giản là nói tiếng người, á nhầm, tiếng của người dùng, và tiếng của lập trình viên thì đôi khi có ý nghĩa và thân thiện hơn mà, hihi.   Khi mình viết chương trình của mình, mình có thể tạo ngoại lệ bằng cách kế thừa từ lớp “Exception”, cả bằng cách trực tiếp lẫn gián tiếp.   Trực tiếp thì khỏi giải thích ha, còn gián tiếp là mình kế thừa từ bạn ngoại lệ nào đó đã kế thừa từ “Exception”, vậy hoai.   Thường thường, người ta hay tạo một base exception kế thừa trực tiếp, rồi những loại ngoại lệ khác kế thừa gián tiếp “Exception” bằng cái base exception đó.   À, còn về cách đặt tên, họ cũng đặt tên theo cùng họ luôn, ví dụ họ ở đây có thể là Error: Input Error, StupidError, NevermindError, … Kiểu vậy á 😀   Mọi người cùng dòm qua ví dụ nha:      Làm cho tôi điều này bất cứ giá nào(Do it no matter what)   Ở phần “Làm cho tôi điều này nếu không bị dính ngoại lệ nào”, tụi mình xài “else” sau except á nạ, nhớ hông, đó là mình thực thi code khi không có ngoại lệ xảy ra.   Còn ở đây, là “Làm cho tôi điều này bất cứ giá nào”, thì mình xài với “finally“, đó là mình thực thi đám code trong finally dù có ngoại lệ xảy ra hay không.   Tức là đoạn code ở finally này thể nào cũng phải làm, họ gọi là mát mẻ là “clean-up actions”.   Mời bạn xem ví dụ nha:      Bạn có thắc mắc vì sao gặp exception mà đoạn print vẫn in được không?   Đó là cơ chế của finally đó, cùng mình tìm hiểu thêm về cách hoạt động của bạn ấy nào.   Nếu có mệnh đề “finally” xuất hiện, thì code thuộc mệnh đề này sẽ thực thi như là công việc cuối cùng trước khi lệnh try kết thúc.   Dưới đây là cơ chế hoạt động cho những tình huống khá phức tạp với finally:   – Nếu có ngoại lệ xảy ra trong khi thực thi nhóm lệnh trong “try”, nếu ngoại lệ la làng lên nhưng chưa bị bắt lại bằng “except”, thì nhóm lệnh trong “finally” vẫn chạy trước, sau đó ngoại lệ mới được la làng sau đó.   – Nếu có ngoại lệ xảy ra bởi nhóm lệnh trong except hoặc else. Một lần nữa, nhóm lệnh trong finally được chạy trước sau đó  ngoại lệ trong đám phát sinh này mới được la làng lên.   – Nếu khối lệnh trong try có các lệnh đặt biệt như “break”, “continue” hay “return” làm dừng thực thi giữa chừng thì nhóm lệnh trong finally cũng thực hiện trước khi đám này được gọi.   – Nếu khối lệnh trong finally có chứa lệnh “return” thì giá trị trả về sẽ là giá trị từ finally chứ không phải giá trị trả về từ khối code trong try.   Trong thực tế, finally là nơi chứa các nhóm lệnh phục vụ cho việc giải phóng các tài nguyên như là file hay các kết nối mạng, bất kể các tài nguyên này có được dùng hay không.   Một vài ví dụ thú vị về finally đây ạ:  &gt;&gt;&gt; def bool_return(): ...   try: ...      return True ...   finally: ...      return False ... &gt;&gt;&gt; bool_return() False   &gt;&gt;&gt; def divide(x, y): ...     try: ...         result = x / y ...     except ZeroDivisionError: ...         print(\"division by zero!\") ...     else: ...         print(\"result is\", result) ...     finally: ...         print(\"executing finally clause\") ... &gt;&gt;&gt; divide(2, 1) result is 2.0 executing finally clause &gt;&gt;&gt; divide(2, 0) division by zero! executing finally clause &gt;&gt;&gt; divide(\"2\", \"1\") executing finally clause Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;   File \"&lt;stdin&gt;\", line 3, in divide TypeError: unsupported operand type(s) for /: 'str' and 'str'   Nè, nhớ nghiền ngẫm bạn finally trước khi đi tiếp nha.   Dòm lại lần nữa coi có hiểu ví dụ hông?   Định nghĩa trước công việc làm sạch   Trong Python, có một vài loại object được định nghĩa sẵn các hành động làm sạch để trả lại tài nguyên khi mình không xài nữa mà không cần biết tài nguyên đó có được sử dụng thành công hay không(như khi chính ta thực hiện làm sạch tài nguyên với finally ở trên).   Loại object như vậy có thể kể điển hình là khi mình làm việc với một file.   Thường thì khi mình mở một file mình sẽ dùng open(“filename.txt”). Vấn đề ở đây là tụi mình mở người ta rồi nhưng không nhớ mà đóng lại để thu hồi tài nguyên bộ nhớ về, và có thể gây vấn đề về bộ nhớ cho các dự án lớn hoặc file quá nặng.   Với lệnh “with” cho phép những object như là file có thể đảm bảo việc bộ nhớ sẽ được giải phóng mỗi khi thực thi xong đoạn code nằm trong nhóm lệnh này. Do đó đảm bảo tài nguyên được thu hồi kịp thời và chính xác.   Hãy nhớ ví dụ này nha, và luôn dùng bạn ấy khi mở file như là best practice.    Hôm nay mình đã biết thêm ít kiến thức về lỗi và các ngoại lệ rồi.   Sau phần này, tụi mình sẽ cùng nhau đọc tiếp phần “Lớp trong Python” nhé.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/loi-va-xu-ly-ngoai-le-python/",
        "teaser": null
      },{
        "title": "Iterable, Iterator và Generator trong Python",
        "excerpt":"Chào cả nhà 🥳! Chào BeautyOnCode  🤣   Just for vui tí, thực ra đó là cách gia đình mình chào nhau dạo gần đây lol   Ba bảo: “Chào Minh Hoàng!”. Chicken bảo: “Chào Ba Lộc!” . Mẹ Út bảo: “Chào Minh Hoàng”. Chicken bảo: “Chào Mẹ Út” 🤣   Hôm nay tụi mình sẽ cầm gương lên, dũng cảm xông pha ra trận chém con thú hai đầu, một đầu nó có màu hồng tên là “Iterator“, một đầu màu xanh tên là “Generator“.   Để mình kể bạn nghe, đây là một câu chuyện có thật, từ chiếc ti vi, kênh Cartoon Network, chương trình hoạt hình “Biệt đội Titan xuất kích”. Hai bạn quái vật này được nhốt trong một cái hộp thần bí, Raven đã dặn các bạn không được mở nó ra vì nó rất nguy hiểm, nhưng StarFire đã không kiềm được tò mò và mở ra. Hai bạn này siêu dễ thương luôn, cùng vui chơi với các bạn nhỏ, nhưng khi hai bạn đó được StarFire không kiềm được mà hôn cho một cái thì lập tức hai bạn biến hình thành một con quái vật có hai đầu đi phá thành phố. Sau đó, StarFire đã nói ra những lời đau lòng đến mức từ con quái vật hai đầu khổng lồ hai bạn càng ngày càng thu bé lại và biến thành hai con tiểu yêu khóc nức nở vì không được yêu thương nữa.   Câu chuyện vậy đó, khi mình soạn bài này tự dưng mình thấy cũng trùng hợp ghê, hai bạn “Iterator” và “Generator” này cũng dễ thương như vậy, nhưng cũng có thể biến thành quái vật khi mình chủ quan về các bạn ấy đúng không nào. Còn mình mà đã hiểu á, thì sẽ biến lại thành hai bạn tiểu yêu xinh xắn dễ cưng thôi.   Cho nên là hôm nay, mình cùng quyết tâm chinh phục con quái thú hai đầu này nha! 👻  Ý quên, còn gặp cả sư phụ của tụi nhỏ nữa đấy.   Bài blog này thuộc series “Khám phá Đại Bản Doanh Python”.   (Image by artemtation from Pixabay)   Mở đầu  Trong nội dung bài “Các công cụ điều khiển luồng dữ liệu”, mình đã biết cách lặp qua các phần tử của các kiểu dữ liệu là tập hợp nhiều phần tử trong đó, như là string, list, dict rồi, dùng for phần_tử in danh_sách. Và mình cũng đã học cách sử dụng enumerate() để có thể vừa lặp qua vừa sử dụng chỉ số index của phần tử, ví dụ:   &gt;&gt;&gt; a = [\"Thanh\", \"has\", \"a\", \"blog\"] &gt;&gt;&gt; for i, s in enumerate(a): ...     print(\"chuoi hien tai la:\", s) ...     if i &lt; len(a) - 1: ...             print(\"chuoi tiep theo la:\", a[i+1]) ...     else: ...             print(\"day la chuoi cuoi cung!\") ... chuoi hien tai la: Thanh chuoi tiep theo la: has chuoi hien tai la: has chuoi tiep theo la: a chuoi hien tai la: a chuoi tiep theo la: blog chuoi hien tai la: blog day la chuoi cuoi cung! &gt;&gt;&gt;  “a” đang là một danh sách. Nếu a là một set thì sao nhỉ? Cùng xem ví dụ ở trên với b có giá trị tương tự a nhưng là kiểu dữ liệu set nhé. (Đọc thêm về các loại dữ liệu ở bài “Cấu trúc dữ liệu trong Python” nhé)   &gt;&gt;&gt; b = {\"Thanh\", \"has\", \"a\", \"blog\"} &gt;&gt;&gt; for i, s in enumerate(b): ...     print(\"chuoi hien tai la:\", s) ...     if i &lt; len(b) - 1: ...             print(\"chuoi tiep theo la:\", b[i+1]) ...     else: ...             print(\"day la chuoi cuoi cung!\") ... chuoi hien tai la: blog Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 4, in &lt;module&gt; TypeError: 'set' object is not subscriptable &gt;&gt;&gt;   Ôi nó bị sao thế nhỉ, lỗi “TypeError: ‘set’ object is not subscriptable” có nghĩa là kiểu dữ liệu “set” không hỗ trợ truy cập phần tử theo chỉ mục index.   Hiểu nôm na thì nếu a là list, nó có thể truy cập đến phần tử đầu tiên bằng index là 0 với a[0], còn b là set thì nó không có chỉ số index như vậy nên b[0] sẽ báo lỗi như trên.     Thế còn kiểu dữ liệu dict thì sao nhỉ? Không biết bạn này có hỗ trợ truy cập theo chỉ mục index không ta?   &gt;&gt;&gt; a = {\"name\": \"Thanh\", \"age\": 29} &gt;&gt;&gt; for i, key in enumerate(a): ...     print(\"tu khoa: \", key) ...     print(f\"gia tri cua tu khoa {key} la: {a[key]}\") ...     print(f\"gia tri cua a tại index {i} la: {a[i]}\") ... tu khoa:  name gia tri cua tu khoa name la: Thanh Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 4, in &lt;module&gt; KeyError: 0 &gt;&gt;&gt;   Úi, vậy là kiểu dữ liệu dict cũng không truy cập theo chỉ mục index được.   Vậy là, trong Python cùng là kiểu dữ liệu có thể chứa nhiều phần tử(string, list, set, dict, …) nhưng các bạn này lại chia làm hai nhóm:   🥰  Nhóm dữ liệu tuần tự(sequence): string, list, … cho phép mình truy cập qua các phần tử trong bộ sưu tập bằng chỉ mục, hay gọi là số index, các bạn này có chỉ số index được đánh dấu từ 0 đến len – 1(chiều dài của nó trừ đi 1).   🥰  Nhóm dữ liệu tập hợp(collection): set, dict, … không truy cập được theo chỉ mục index.    Rồi sao nữa 😊  Hehe, rồi thì luật sinh ra là để lách luật đó mấy bạn 😅   Muốn lách luật tức là muốn duyệt có trình tự mấy kiểu dữ liệu tập hợp như set, dict trên, thì mình cần hiểu bản chất và cơ chế của luật này cái đã. Đây chính là sư phụ của hai bạn tiểu yêu trên, tớ tạm gọi là sư phụ iterable   Iterable   Thực ra nãy giờ mình từng gặp nhiều bạn là iterable rồi ấy 👉  a và b của những ví dụ trên đều là các iterable.   Một đối tượng là iterable nghĩa là nó có thể lặp qua, hiểu nôm na nếu a là một iterable thì:   👉  có thể lặp qua a được, tức có thể viết *“for x in a” *   👉  gọi iter(a), sẽ trả về một iterator   👉  a có phương thức __iter__ cũng trả về một iterator, hoặc đôi khi A có phương thức \\getitem\\ nếu a thuộc nhóm dữ liệu tuần tử có thể truy cập phần tử theo chỉ số index đã nói ở trên.   Xem ví dụ với iterable là list:   &gt;&gt;&gt; a = [\"Thanh\", \"has\", \"a\", \"blog\"]] &gt;&gt;&gt; a = [\"BeautyOnCode\", \"blog\"] &gt;&gt;&gt; for s in a: ...     print(s) ... BeautyOnCode blog &gt;&gt;&gt; iter(a) &lt;list_iterator object at 0x10b5dbd60&gt; &gt;&gt;&gt; a.__dir__() ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__add__', '__mul__', '__rmul__', '__contains__', '__iadd__', '__imul__', '__new__', '__reversed__', '__sizeof__', 'clear', 'copy', 'append', 'insert', 'extend', 'pop', 'remove', 'index', 'count', 'reverse', 'sort', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__'] &gt;&gt;&gt; a.__iter__() &lt;list_iterator object at 0x10b5dbd60&gt; &gt;&gt;&gt; a.__getitem__(0) 'BeautyOnCode' &gt;&gt;&gt;   Tiếp theo b là một dict nè:   &gt;&gt;&gt; b = {\"name\": \"Thanh\", \"age\": 29} &gt;&gt;&gt; for x in b: ...     print(x) ... name age &gt;&gt;&gt; iter(b) &lt;dict_keyiterator object at 0x10b61cc20&gt; &gt;&gt;&gt; b.__dir__() ['__repr__', '__hash__', '__getattribute__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__iter__', '__init__', '__len__', '__getitem__', '__setitem__', '__delitem__', '__contains__', '__new__', '__sizeof__', 'get', 'setdefault', 'pop', 'popitem', 'keys', 'items', 'values', 'update', 'fromkeys', 'clear', 'copy', '__reversed__', '__doc__', '__str__', '__setattr__', '__delattr__', '__reduce_ex__', '__reduce__', '__subclasshook__', '__init_subclass__', '__format__', '__dir__', '__class__'] &gt;&gt;&gt; b.__iter__() &lt;dict_keyiterator object at 0x10b61cc20&gt; &gt;&gt;&gt; b.__getitem__(0) Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; KeyError: 0   Bạn đã thấy sự khác nhau chưa, vậy là điểm chung duy nhất của các iterable là có nhiều phần tử và cho phép mình lặp qua chúng nó đấy.   Tuy nhiên, số lượng phần tử trong iterable có thể là hữu hạn hoặc vô hạn, ở các ví dụ trên rõ là chúng nó có số lượng hữu hạn. Giờ thì cũng đi qua một ví dụ với số lượng phần tử vô hạn nhé.      Trong ví dụ này, mình sử dụng hàm count từ itertools để tạo một bộ đếm là bội của 3.   Khi thực hiện lặp qua bộ đếm này với vòng lặp for và in các phần tử ra thì nó sẽ chạy mãi mãi cho đến khi mình ngừng chương trình hoặc mình phải thêm điều kiện dừng cho vòng lặp for là khi n &gt; 200 thì thoát khỏi vòng lặp như trong ví dụ trên.   Với số lượng phần tử vô hạn như vậy thì mình không thể chuyển các bạn ấy về kiểu danh sách được. Chưa kể với số lượng phần tử quá lớn sẽ gây hại cho bộ nhớ và hiệu suất của chương trình.   Hehe, thực ra tớ chuyển thử rồi, và nó kill luôn PI và tự thoát ra ngoài luôn 😅   &gt;&gt;&gt; list(multiples_of_three) [1]    5953 killed     python   Vì những nguyên nhân đó, sư phụ Iterable đã nhận một đệ tử đầu tiên, chính là bạn tiểu yêu màu hồng, bạn mà sau này biến thành quái thú màu hồng trong con quái thú hai đầu đó, bạn ấy tên là Iterator.   Cùng xem bạn Iterator giúp giải quyết vấn đề trên ra sao nhé!   Iterator  Thực ra iterator là một khái niệm trong lĩnh vực khoa học máy tính đấy nhé. Đây là xuất thân của Iterator từ Wikipedia:      In computer programming, an iterator is an object that enables a programmer to traverse a container, particularly lists.    Mình tạm dịch là: Trong lĩnh vực khoa học máy tính, một iterator là một đối tượng cho phép các nhà lập trình có thể duyệt qua một vùng chứa các dữ liệu, như danh sách.   Còn trong Python, iterator được định nghĩa trong Python wiki là:      iterator là đối tượng có phương thức __next__, và phương thức này sẽ trả về phần tử tiếp theo của đối tượng, nếu đối tượng không còn phần tử nào để lặp qua thì nó sẽ báo lỗi StopIteration.      Bạn đã thấy iterator lần nào chưa nhỉ?   Thực ra mình đã thấy bạn ấy khi mình gọi iter(a) ở ví dụ trên đấy, cùng xem mình gọi __next__ thì bạn ấy sẽ trả ra gì nhé:   &gt;&gt;&gt; a = [\"BeautyOnCode\", \"blog\"] &gt;&gt;&gt; x = iter(a) &gt;&gt;&gt; x &lt;list_iterator object at 0x10b5dbd60&gt; &gt;&gt;&gt; x.__next__() 'BeautyOnCode' &gt;&gt;&gt; x.__next__() 'blog' &gt;&gt;&gt; x.__next__() Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; StopIteration &gt;&gt;&gt;   Ồ hay chưa, mình có thể đi qua các phần tử trong a bằng phương thức __next__, thay vì dùng for nè. Khi đi đến phần tử cuối cùng rồi, thì nó sẽ báo lỗi StopIteration để báo cho mình biết hết đồ để đi tiếp rồi nghen 🤣   Thêm nữa, iterator cũng là iterable đó, cùng xem tớ lặp qua nó với for nè, và cả gọi iter() cho x thì nó trả về chính nó luôn.   &gt;&gt;&gt; a = [\"BeautyOnCode\", \"blog\"] &gt;&gt;&gt; x = iter(a) &gt;&gt;&gt; for s in x: ...     print(s) ... BeautyOnCode blog &gt;&gt;&gt; iter(x) &lt;list_iterator object at 0x10b5a84f0&gt; &gt;&gt;&gt; x &lt;list_iterator object at 0x10b5a84f0&gt; &gt;&gt;&gt;   Ra vậy, để lặp qua một iterable vô hạn, như cái ví dụ bội số của 3 ở trên, mình cần biến nó thành iterator bằng hàm iter(), rồi sau đó có thể dùng __next__() hoặc next() để đi qua lần lượt các phần tử. Nhưng vì đang nói đến iterable vô hạn, cho nên nó sẽ không bao giờ có ngoại lệ StopIteration luôn ấy.   Cùng xem cách mình đã lặp qua “multiplesofthree” dùng iterator thay cho for nhé:      Thật thú vị đúng không nào, mình không dùng for mà vẫn lặp qua các đối tượng của một iterable đấy.   Và bật mí với các bạn, đây cũng chính là cơ chế lặp được sử dụng nhiều trong Python đấy, cụ thể là cho vòng lặp for nè, rồi xác định nhiều giá trị trong tuple nè, rồi list comprehension(ví dụ cho bạn nào quên nè, [i +1 for i in a]), ….   Trước khi đi tiếp mình xin tóm tóm lại một xíu cho bạn đỡ ngợp nha.   Mình đã tìm hiểu qua về: Iterable, Iterator   😊  Iterable được xác định bằng 3 cách:           dùng được với for            iter(X) không báo lỗi            có phương thức __iter__       😊  Iterator được xác định bằng:           Y = iter(X), với X là một iterable, thì Y là một iterator            next(Y) sẽ trả về giá trị phần tử tiếp theo hoặc ngoại lệ StopIteration, thì Y là iterator.            iter(Y) sẽ trả về Y, thì Y là iterator(tức iterator cũng chính là iterable)       Nhìn tóm tắt trên bạn thử hình dung xem nếu mình muốn tạo một iterable cho riêng mình thì mình cần phải định nghĩa những gì để Python hiểu nó là một iterable nhỉ?   Để xem nào, hẳn là nó cần có một phương thức là __iter__, và phương thức này cần trả về một bạn iterator.   Cùng mình thử sức định nghĩa một iterable của riêng bạn nhé!     class BlogPostIterator:     def __init__(self, blogpost):         self._blogpost = blogpost         self._current = 0      def __next__(self):         \"\"\"Trả về bạn post tiếp theo nhé\"\"\"         # Số posts trong blog nè         posts = self._blogpost._posts         if self._current &lt; len(posts):             # lấy phần tử với chỉ sổ index là _current ra nha             next = posts[self._current]             # tăng _current lên 1 nhé             self._current += 1             return next          # Nếu chỉ số index vượt quá số posts có thì         # la làng ngoại lệ StopIteration         raise StopIteration  class BlogPost:     \"\"\"Posts in blog\"\"\"     def __init__(self):         self._posts = []      def add_post(self, posts):         \"\"\"Thêm posts vào nhé\"\"\"         self._posts += posts      def __iter__(self):         \"\"\"Trả về iterator nhé\"\"\"         return BlogPostIterator(self)   Ở trên, lớp BlogPost có thể tạo ra các đối tượng là iterable đó, cùng thử nghiệm nha:      Mình có thực hành và giải thích ở trên video này nè   Ui, mãi quần quật với hai bạn này mà mình sắp trễ thời gian rồi, nhanh nhanh đi tiếp đến chú tiểu yêu tiếp theo cần phải chinh phục, đó là chú màu xanh generator .   Generator   Đây là xuất thân của Generator từ Wikipedia:      In computer science, a generator is a routine that can be used to control the iteration behaviour of a loop. All generators are also iterators.    Mình tạm dịch là: Trong lĩnh vực khoa học máy tính, một generator là một bộ các quy trình các có thể dùng để kiểm soát hành động của một vòng lặp. Và tất cả generator cũng là iterators.   Còn trong Python, generator được định nghĩa trong Python wiki là:   generator hay gọi là hàm generator, cho phép bạn tạo ra một hàm hoạt động tương tự như một iterator, tức là nó cũng là iterable, và có thể dùng với vòng lặp for.   Dùng generator trong trường hợp nào   Mình là một bạn nhỏ hay thắc mắc, mình cũng rất tò mò lý do vì sao cần có hàm generator ấy nhỉ? Nó cũng tạo ra iterator đúng hem, thế sao không dùng luôn iterator thôi nhỉ?   Bạn đoán thử cùng mình xem sao?   Mình nghĩ là nếu tạo một iterator khoai như ở trên, thì buồn thật đấy, khi nào cũng viết phương thức __iter__ rồi nó phải trả về iterator, rồi muốn trả về iterator thì lại phải đi định nghĩa phương thức __next__ và viết cái logic khác nữa. Thật tình mà nói thì cũng hơi khó gặm đó nha 🥲.   Hẳn là mấy chú Python thấy thế bèn nghĩ ra một cách, hay là mình cho tụi nhỏ viết một hàm thôi, và hàm đó hoạt động như là một iterator, còn những thứ lằng nhằng kia hãy để các chú lo, phải không? 🥰   Hihi, đoán bậy vậy mà nó trúng rồi nha, chính xác là generator giúp mình tạo iterator một cách dễ dàng hơn nhiều. Và thêm nữa, generator sẽ thường sử dụng cho các trường hợp cần cân nhắc về chuyện hiệu suất của chương trình, ví dụ như là khi mình làm việc với số siêu lớn, hay làm việc với các file có dung lượng lớn cần xử lý.   Vì sao? Vì khi đó nếu dùng một kiểu dữ liệu tuần tự để lưu hay xử lý thì chương trình sẽ ngốn nhiều dung lượng RAM, dẫn đến tràn RAM và gây lỗi về bộ nhớ(Memory Error).   Nếu bạn gặp các trường hợp này, thì generator chính là chân ái của đời bạn đó, nhớ nhé 😘   Ví dụ giùm cái   Đề bài: tạo một danh sách các số từ 0 đến n, sau đó tính tổng của chúng nó. Hãy thử nghiệm với n = 1000000000 nhé.   Nào, giờ mình sẽ đi cùng với mọi người giải bài toán bằng ba cách nhé   Cách 1: dùng một danh sách để lưu các số.   def list_n_list(n):     num, nums = 0, []     while num &lt; n:         nums.append(num)         num += 1         return nums  sum(list_n_list(1000000000))   Và mình chạy thử xem nó tốn bao nhiêu time:   $ python list_n_list.py time execute 0:06:51.453351   Rồi, đoạn code này khá là đơn giản phải không, logic rất dễ hiểu, nhưng nó đang tạo một list với tất cả các phần tử từ 0 đến n, rồi cộng lại. Rõ là phương án này nhìn thì đơn giản, nhưng rất khó chấp nhận trong trường hợp n là một số siêu lớn, vì làm sao mà mình lưu tất cả 1000000000… phần tử trong bộ nhớ được.   Với n = 1000000000000000, chương trình sẽ bị đứng sau một hồi cố gắng hiu hiu, thương ghê!   $ python generator.py [1]    2247 killed     python generator.py   Cách 2: dùng iterator   Đầu tiên, mình sẽ tiếp cận cách số 2 với bạn iterator trước nha, vì bạn này cũng giúp mình không lưu cả dãy như ở trên, và vẫn có thể xử lý trong tình huống này ha.   Ôkê, vì bạn ni hơi cực, nên mình lại nhắc xíu là mình tính làm gì nha. Đầu tiên là mình cần tạo một lớp có phương thức __iter__ sau đó phương thức này trả ra iterator, ở đây là mình muốn gom hết vào một chỗ luôn, vì mình hiểu là iterator cũng là iterable nên mình sẽ return self ở đây. Sau đó mình sẽ tạo tiếp một phương thức __next__ để self chính là iterator.   Cùng xem code nha:   class list_n_iterator(object):     def __init__(self, n):         # giới hạn là n         self.n = n         # bắt đầu từ 0         self.next = 0      def __iter__(self):         # list_n vừa là iterable, vừa là iterator         # vì nó có phương thức __iter__ và __next__         return self      def __next__(self):         if self.next &lt; self.n:             # gán giá trị hiện tại của next             current = self.next             # tăng 1 cho next             self.next = current + 1             return current         raise StopIteration  sum(list_n_iterator(100000000))   Còn đây là thời gian chạy của đoạn code với iterator nhé:   $ python list_n_iterator.py time execute 0:06:08.411233   Và tất nhiên là đoạn code trên có thể hoạt động ổn hơn rồi.   Tuy nhiên có vài vấn đề mà mình từng đoán trước đây như là:   – Nhiều code quá, gồm lớp rồi phương thức, …   – Và logic khá rối, trừ khi bạn hiểu sâu về iterator, iterable còn không thì nhìn vào đã hoa mắt rồi   Chưa hết, nếu dùng đoạn code này lại ở nhiều nơi sẽ làm cho code càng dài hơn đấy. Vì thế, Python đã hỗ trợ mình bạn generator, bạn này được giới thiệu từ PEP255.   Cách 3: dùng người anh hùng generator, chân ái khi làm việc với số lớn và dữ liệu lớn   Cùng viết lại code trên với generator nhé! Bạn sẽ ngạc nhiên vì độ thanh lịch của nó đấy!   def list_n_generator(n):     num = 0     while num &lt; n:         yield num         num += 1  sum(list_n_generator(1000000000))   Và thời gian của bạn này chạy là:   $ python list_n_generator.py time execute 0:02:07.852190   *Lưu ý nhỏ là thời gian chỉ mang tính chất so sánh khách quan thôi nha, vì nó còn phụ thuộc vào máy của tớ nữa ý. *   Cách tạo generator   Cách 1: Dùng hàm generator   Đây chính là cách mà ví dụ ở trên dùng đấy.   Để tạo hàm generator thì mình tạo hàm như bình thường và thay vì dùng return để trả về giá trị thì mình dùng yield để trả về giá trị.   Cách 2: Dùng biểu thức generator   Ngoài ra còn có thể dùng biểu thức generator để tạo nữa, biểu thức này tương tự như list comprehension ấy, mà thay dấu [] bằng dấu () thôi   &gt;&gt;&gt; list_odds = [1, 3, 5, 7, 9] &gt;&gt;&gt; (x**2 for x in list_odds) &lt;generator object &lt;genexpr&gt; at 0x10b914b30&gt;   Vậy là hôm nay mình đã cùng gặp qua sư phụ iterable, và chiến đấu với hai bạn tiểu yêu iterator và generator rồi. Bạn quái thú hai đầu này dù có sự giúp sức của sư phụ iterable nữa nhưng vẫn đầu hàng trước sự cố gắng của tụi mình và cả ba đều biến thành các bạn tiểu yêu xinh xắn rồi đó. 🥳   Những khái niệm này dễ gây nhầm lẫn nên mình và các bạn hãy chú ý khi sử dụng nha.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/iterator-va-generator-trong-python/",
        "teaser": null
      },{
        "title": "Không gian tên(namespace) và phạm vi(scope) trong Python",
        "excerpt":"Khi mình ngồi học và dịch bài “Class trong Python” cho sê-ri “Khám Phá Đại Bản Doanh Python”, mình đã đụng hai bạn này, và các bạn thật là trừu tượng và khó gặm. Thế là mình tìm kiếm và viết bài này để hiểu rõ hơn về hai bạn ấy, hi vọng bạn đọc thêm để hiểu về Python nhé.   Không gian tên là gì?   Không gian tên(namespace) là một không gian chứa các tên =))   Thật đó, tên là các định danh, và không gian là các cấu trúc hay các tổ chức, hoặc hiểu đơn giản nó là một vùng nào đó.   Không gian tên trong Python giống như là bảng phân công theo dõi công việc của một nhóm người vậy đó. Bảng phân công thì theo dõi tên người, còn không gian tên trong Python thì theo dõi tên các đối tượng.   Thế đối tượng trong Python là gì nhỉ?   Có thể bạn đã biết, mọi thứ trong Python đều là đối tượng. Khi mình viết chương trình Python, chúng ta định nghĩa các lớp và mô-đun; sử dụng các cấu trúc list, dict; các thực thể và các hàm.  Tất cả bọn chúng đều là đối tượng cả đó.   Không gian tên trong Python thì theo dõi tên các đối tượng, chẳng hạn như các như các thực thể của đối tượng và các hàm chức năng. Dưới đây là vài đặc điểm quan trọng của khái niệm này:   Không gian tên thể hiện ở dạng từ điển   Vì không gian tên thể hiện ánh xạ giữa tên và đối tượng, do đó kiểu dữ liệu có thể thể hiện tham chiếu này chính là từ điển(dict), vì bạn ấy cũng có dạng tham chiếu key-value.   Ví dụ về không gian tên bằng gọi hàm globals(), locals():   &gt;&gt;&gt; a = [1, 2, 3, 4, 5] &gt;&gt;&gt; &gt;&gt;&gt; def foo(): ...     b = 11 ...     print(locals()) ... &gt;&gt;&gt; class Student: ...     pass ... &gt;&gt;&gt; student = Student() &gt;&gt;&gt; print(globals()) {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'a': [1, 2, 3, 4, 5], 'b': 'Hello World!', 'foo': &lt;function foo at 0x101fd93b0&gt;, 'foo0': &lt;function foo at 0x10200c7a0&gt;, 'foo1': &lt;function foo at 0x10200c7a0&gt;, 'tracked_namespaces': {'local': {}}, 'tracked_keys': dict_keys(['local']), 'ns': &lt;module 'namespaces_student' from '/Users/ycui/PythonProjects/namespaces_student.py'&gt;, 'working_hard': True, 'Student': &lt;class '__main__.Student'&gt;, 'Teacher': &lt;class 'namespaces_teacher.Teacher'&gt;, 'student': &lt;__main__.Student object at 0x102027490&gt;} &gt;&gt;&gt; foo() {'b': 11}   Hàm dựng sẵn globals() dùng để xem các định danh đi kèm với các đối tượng tương ứng của chính trong không gian tên hiện tại. Kết quả là danh sách các đối tượng được định nghĩa như list, function, class hay thực thể và các hàm dựng sẵn.   Bên cạnh globals() được sử dụng để theo dõi các đối tượng trong mô-đun như ở không gian tên toàn cục như trên, chúng ta còn có thể dùng locals() là hàm theo dõi các đối tượng trong một hàm nào đó như là không gian tên địa phương của hàm đó. Trong ví dụ, biến địa phương b được theo dõi trong không gian tên địa phương của hàm foo.   Không gian tên có tính linh hoạt   Không gian tên được dùng để theo dõi các đối tượng.   Trong Python code, chúng ta tạo ra các đối tượng cố định và xoá các đối tượng không còn được dùng nữa, do đó không gian tên cũng sẽ thay đổi theo dựa trên các thao tác này.   Cùng xem ví dụ khi thực hiện thao tác thêm và xoá các thuộc tính sẽ làm thay đổi không gian tên:   &gt;&gt;&gt; a = [1, 2, 3, 4, 5] &gt;&gt;&gt; print(globals().keys()) dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', 'a']) &gt;&gt;&gt; b, c = 'Hi', (1, 2) &gt;&gt;&gt; print(globals().keys()) dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', 'a', 'b', 'c']) &gt;&gt;&gt; del c &gt;&gt;&gt; print(globals().keys()) dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__annotations__', '__builtins__', 'a', 'b'])   Khi một hàm được gọi, nó tạo ra một không gian tên cục bộ, và không gian tên này sẽ mất đi khi hàm hoàn thành nhiệm vụ của mình(trả về giá trị hoặc raise lỗi). Khi đó, không gian tên cũng sẽ bị thay đối.   Phạm vi là hàng rào của không gian tên   Để cho dễ hình dung, bạn có thể nghĩ đến scope như là hàng rào quanh nhà bạn, còn namespace là toàn bộ đất trong đó, và trên đất có thể bao gồm cây cối, nhà cửa, …. là các đối tượng.      Bạn thấy không, không gian tên theo dõi các đối tượng trong mô-đun này, vì tụi này nằm trong không gian của nó, còn phạm vi chính là đường màu cam thể hiện hàng rào bọc ngoài không gian tên này.   Nói cách khác, nếu mình muốn sử dụng attr0 nằm trong mô-đun ở trên ở một hàm “bo” chẳng hạn, nếu hàm này không thể truy cập vào phạm vi này thì không thể dùng biến đó được.   Cùng xem một ví dụ nhé:   Đây là code trong file namespace_student.py   working_hard = True  class Student:    def study(self):       print(\"I'm studing.\")   Truy cập vào trình biên dịch PI:   &gt;&gt;&gt; print(f'working_hard: {working_hard}') Traceback (most recent call last):   File \"&lt;stdin&gt;\", line 1, in &lt;module&gt; NameError: name 'working_hard' is not defined &gt;&gt;&gt; import namespace_student as ns &gt;&gt;&gt; print(f'working_hard: {ns.working_hard}') working_hard: True &gt;&gt;&gt; print(globals()) {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': &lt;class '_frozen_importlib.BuiltinImporter'&gt;, '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;, 'ns': &lt;module 'namespace_student' from '/Users/thanhnguyen/Desktop/namespace/namespace_student.py'&gt;}   Khi mình làm việc trong PI, mô-đun mặc định ở đây là main, nơi không gian tên có __main__ là giá trị của __name__.   Dòng đầu tiên print, mình không thể truy cập vào biến working_hard vì tụi mình đang không đứng trong mô-đun namespace_student. Tuy nhiên, sau khi mình nạp mô-đun này vào, thì mình có thể truy cập tên này không qua tên mô-đun của nó vì ns đã thuộc không gian tên nơi mình đang đứng(main). Mình có thể kiểm tra điều đó bằng hàm in ra không gian tên globals như ở trên.   Vì mình có thể dùng tên của mô-đun để truy cập vào các thuộc tính trong đó, cho nên ở các mô-đun khác nhau hoàn toàn có thể chứa các tên giống nhau.   Bạn có thể hình dung nó kiểu như là nhà mình có một cái macbook, nhà hàng xóm cũng có một cái macbook y như vậy, thì hai cái macbook này mình có thể hoàn toàn phân biệt được đúng không nào 😀      Không gian tên và phạm vi đều phân cấp   Bạn có để ý thấy chỉ cần truy cập vào trình biên dịch là mình có thể sử dụng các hàm dựng sẵn của Python như print() hay các kiểu dữ liệu như dict(), list().   Vậy các bạn này từ đâu ra thế nhỉ ? Vâng, các bạn này thuộc không gian tên dựng sẵn(built-in) đó ạ.   Còn khi tạo một mô-đun, ta sẽ có không gian tên toàn cục(global) của mô-đun đó, khi tạo một hàm mình có không gian tên cục bộ(local) của hàm đó. Khi các không gian tên được tạo thì các phạm vi tương ứng của chúng cũng được tạo.      Đặc điểm quan trọng của không gian tên là chúng có mối quan hệ phân cấp như vậy.    Biểu đồ dưới thể hiện sự phân cấp này: không gian tên và phạm vi dựng sẵn bao trùm không gian tên và phạm vi toàn cục, và lớp này bao trùm không gian tên và phạm vi cục bộ.      Hiểu luật LEGB   Vì phạm vi xác định việc có thể truy cập đối tượng trong một ranh giới nhất định và chúng có tính phân cấp như trên, những điều này dẫn đến việc chúng cần hiểu và nắm quy luật LEGB – một nguyên tắc giúp xác định thứ tự các phạm vi.   LEGB là viết tắc của các phạm vi local, enclosing, global và built-in.   Ở trên, mình có đề cập đến các loại phạm vi: local, global, built-in rồi. Thế còn phạm vi bao quanh(enclosing) nghĩa là gì nhỉ?   Cùng nhìn ví dụ sau về phạm vi bao quanh nha:      Ở ví dụ trên, mình có hàm outer_function có hàm bên trong là inner_function, hàm này có phạm vi cục bộ của riêng nó. Với hàm inner_function, phạm vi của hàm outer_function gọi là phạm vi bao quanh(enclosing scope), tức nó bọc luôn hàm bên trong.   Do đó khi hàm inner_function được goi, dù local scope của nó không có hai biến a, b, nhưng trình thông dịch tiếp tục tìm kiếm ở enclosing scope và tìm được hai biến này, do đó kết quả trên được hiển thị ba biến a, b, c.   Nếu không thể tìm thấy biến cần tìm không enclosing scope, chương trình sẽ tiếp tục tìm kiếm ở global scope của mô-đun và nếu không có nữa sẽ tìm kiếm tới built-in scope.   Nếu tìm hết bốn scope mà vẫn không tìm ra thì chương trình sẽ báo lỗi NameError để chỉ cho mình biết giá trị này chưa được định nghĩa.   Do đó, nguyên tắc LEGB định nghĩa thứ tự tìm kiếm của tên theo thứ tự như sau:      Và thêm nữa, nếu tên đã được tìm kiếm ở cấp nào rồi, thì chương trình sẽ dừng việc tìm kiếm lại và sử dụng tên đó chứ không đi tìm ở những lớp trên nữa nha, vì tìm ra rồi thì dùng liền chớ hỉ.   Ví dụ như ở trên biến a gọi trong hàm inner_function sẽ có giá trị là 11, chứ chương trình không tìm tiếp cấp ở ngoài, nơi a có giá trị là 1 đó.   Kết   Nội dung bài không gian tên và phạm vi đến đây tạm hết rồi, cùng ôn lại hôm ni mình học được gì:           Không gian tên sử dụng dict để theo dõi các đối tượng cùng định danh của chúng            Không gian tên có thể tạo thêm hay xoá bớt một cách linh hoạt            Không gian tên có ranh giới chính là scope, định nghĩa phạm vi tên có thể tìm thấy            Thứ tự tìm tên tuân theo luật LEGB(local, enclosing, global, built-in)      ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/khong-gian-ten-va-pham-vi-trong-python/",
        "teaser": null
      },{
        "title": "Lớp trong Python",
        "excerpt":"Hôm ni, mình học tiếp về bạn “Lớp(class) trong python”, bài blog tiếp theo nằm trong series “Khám phá Đại Bản Doanh Python”(nội dung trong bài series này từ chủ yếu mình lấy từ python.org rồi viết lại hoặc dịch lại theo ngôn ngữ của mình)   Ở bài này, tụi mình sẽ học sâu hơn về cách tạo và sử dụng các lớp đối tượng này cùng các khái niệm liên quan nhé.     Lớp như là tinh tuý trong Python vậy đó, nó có quyền năng cực kỳ mạnh mẽ là cho phép tụi mình nhóm các dữ liệu(fields) và các hàm chức năng liên quan(methods) lại với nhau để tạo ra một loại nhà máy nơi mà có thể sản xuất ra vô số các thực thể đối tượng(instance).   Bạn có thể hình dung lớp như là một bản thiết kế mẫu cho một loại đối tượng nào đó, như bản thiết kế nhà chẳng hạn, từ bản thiết kể này mình có thể tạo nên những thực thể khác nhau, là những ngôi nhà khác nhau.   Tuy nhiên, trước khi học về class, có hai khái niệm là namespace, scope và một quy luật gọi là LEGB bạn cần biết để hiểu vì sao chương trình, hiểu sao class lại hoạt động như vậy. Kiến thức này khá trừu tượng và có nhiều nội dung nên mình đã tách các bạn ấy ra một bài post riêng tên là “Không gian tên(namespace) và phạm vi(scope) trong Python”, bạn hãy ghé đọc xong rồi quay lại học về lớp nhé.   5 phút trôi qua, … hi vọng bạn đã đọc hết bài trên nha, bạn có thể xạo với tớ không được xạo với chính bản thân mình đó nha =)) Okay, đã đến lúc mình dô nội dung chính của hôm nay rồi.   Cuộc hẹn đầu tiên với Cờ-lát   Trong lúc đang hẹn hò cùng Python, thì mình quen được anh chàng Cờ-lát, cậu ấy là đồng bọn chí thân với Python nhà mình.  Python đã kể với tớ rất nhiều về bạn này, có rất nhiều điều mới mẻ hay ho đấy, cùng tớ đi khám phá Cờ-lát nhé.   Cậu ấy nhìn như thế này này   class \bTenCuaLop:     &lt;lệnh-1&gt;     .     .     .     &lt;lệnh-N&gt;   Cờ-lát nói với tớ là, cậu ta là kiểu người đọc kỹ hướng dẫn sử dụng trước khi dùng, á nhầm, cậu ta là kiểu cần phải định nghĩa trước khi sử dụng, và bắt buộc phải định nghĩa với từ khoá “class“.   Một khi mà cậu ta được dùng á hả, là một không gian tên được khởi tạo, và nó được sử dụng như là một phạm vi nội bộ, nơi chứa tất cả các biến được khai báo trong cậu ấy.   Nghe hay ho phếch nhỉ. Thế cụ thể là như nào?   Ừ, thì cụ thể là, ví dụ một hàm được định nghĩa trong cậu ấy, tên của hàm này sẽ thuộc cái không gian tên kia, và mình có thể dùng nó từ cậu ấy được. Khi cậu ấy đã được định nghĩa(tức là viết hết tới  ở trên đó), **một lớp đối tượng được khởi tạo**. Lớp đối tượng này về cơ bản sẽ bao bọc tất cả thành phần của không gian tên được tạo bởi định nghĩa lớp này(phần tiếp học kỹ hơn khúc này).   Đại khái chỗ này là phạm vi cục bộ của class sẽ bật chế độ chơi ngay khi tên cậu ấy được sử dụng và đối tượng lớp ở đây được liên kết với tên class mà bạn ấy nhận được trong tiêu đề sau chữ class khi định nghĩa đó, ở đây là chữ “TenCuaLop”.   Cậu ấy là lớp của các đối tượng   Cờ-lát còn bảo với tớ, là ai quen cậu ấy đều biết cậu ấy có hai điểm mạnh:   – biết rõ bản thân mình   – biết cách khởi tạo cuộc sống của mình   Biết rõ bản thân mình   BIết rõ bản thân mình chính là cậu ấy biết cách tham chiếu thuộc tính(attribute references) sẵn có trong cậu ấy.   Cách cậu ấy hay dùng, là cách mà Python chỉ cho cậu ấy, là dùng dấu “.” để tham chiếu đến các thuộc tính của bản thân mình, ví dụ như là obj.name. Do đó, nếu Cờ-lát được định nghĩa như thế này:   class MyCoLat:     \"\"\"This is my class\"\"\"     ten = \"my class\"      def say_hi(self):         return \"Hi, nice to meet you\"   x = \bMyCoLatDating() x.counter = 1 while x.counter &lt; 10:     x.counter = x.counter * 2 print(x.counter) del x.counter   thì MyCoLat.ten, MyCoLat.say_hi là các thuộc tính tham chiếu, trả về giá trị là chuỗi(ten), và một hàm(say_hi).   Các thuộc tính của cậu ấy cũng có thể gán được, vì vậy mình có thể thay đổi giá trị của nó. Ngoài ra,  doc cũng là một thuộc tính, nó sẽ trả ra giá trị của đoạn mô tả “Class cua BeautyOnCode“, đây là thuộc tính mặc định của cậu ấy.   Khởi tạo cuộc sống của chính mình   Để khởi tạo cuộc sống cho chính mình, Cờ-lát của tớ sẽ bật chế độ “gọi hàm”, nhưng lúc này hàm đó không có tham số nào và sẽ trả về một thực thể mới của chính cậu ấy.   co_lat_empty = MyCoLat()   Dòng trên chính là Cờ-lát của tớ đã được khởi tạo thành một thực thể mới mang tên tạm gọi là “co_lat_empty”, lúc này “co_lat_empty” của tớ hoàn toàn trống rỗng nhé.   Ơ, thế Cờ-lát của mày biến hình à, hay là đa nhân cách? Vâng, chính thế đó, bạn nhìn ra nhanh vậy, Cờ-lát của tớ thuộc loại đa nhân cách siêu đẳng nhé.   Trong mỗi tình huống, hoặc mỗi ngữ cảnh, là cậu ấy có thể biến hình thành những con người hoàn toàn khác biệt đấy.  Chưa hết, cậu ấy còn có bí kíp để khởi tạo từng cuộc sống riêng cho chính mình, ví dụ như là đi biển thì sẽ mặc đồ bơi, đi chùa thì phải mặc quần dài, trời nắng thì đội mũ, trời mưa thì mang áo mưa, …   Và, chiếc túi Doraemon của cậu ấy, chính là hàm init đấy nhé.   Cùng xem hàm này giúp Cờ-lát của tớ biến hình ra sao:   def __init__(self):     self.language = \"Python\"   Khi Cờ-lát của tớ nắm trong tay hàm này, thì mỗi phiên bản biến hình của cậu ấy, não bộ sẽ tự động gọi qua hàm này để khởi tạo các thuộc tính là các đặc điểm, tính cách mà cậu ấy mong muốn.   Chưa hết, chỉ cần một ý nghĩ trong đầu như một dạng dữ liệu đầu vào là hàm này đã có thể nhận các giá trị khác nhau rồi nhé. Đây là Cờ Lát cải tiến của tớ với hàm init   class MyCoLat:     \"\"\"This is my class\"\"\"     ten = \"my class\"      def __init__(self, handsome_like=\"Hyun Bin\", love_exp=5):         \"\"\"Hàm khởi tạo\"\"\"         self.handsome_like = handsome_like         self.love_exp = love_exp      def keep_it(self):         return \"Hi, nice to meet you\"   Ví dụ khi cậu ấy muốn đi chơi với tớ, cậu ấy sẽ tạo ra một phiên bản của mình như sau:   &gt;&gt;&gt; from example import MyCoLat &gt;&gt;&gt; x = MyCoLat(\"Lee Min Ho\", 10) &gt;&gt;&gt; x.handsome_like, x.love_exp ('Lee Min Ho', 10) &gt;&gt;&gt;   Đấy, nhìn hẳn các cậu cũng hiểu rồi phải không, hihi. Bạn cờ lát của tớ sẽ biến hình thành handsome_like “Lee Min Ho” với 10 năm kinh nghiệm tình trường love_exp.   Đấy là khi cậu ấy suy nghĩ và đặt các giá trị cụ thể vào để biến hình, còn khi mà lười á, cậu ấy sẽ chả phải đặt gì vào cả, mặc định sẽ đẹp trai như “HyunBin” và có 5 năm tình trường đấy(cậu ấy đã không còn trống không như trước nữa rồi).   &gt;&gt;&gt; y = MyCoLat() &gt;&gt;&gt; y.handsome_like, y.love_exp ('Hyun Bin', 5) &gt;&gt;&gt;   Ui, nên tớ mê cậu ấy ngẩn tò te luôn ấy, quá ngầu mà phải không ^^.   Các phiên bản của đối tượng   Các bạn đã biết Cờ-lát của tớ có thể tham chiếu các thuộc tính và khởi tạo phải không nào. Thế còn các phiên bản biến hình của cậu ấy thì có thể làm gì nhỉ?   Các phiên bản là thực thể của cậu ấy hỗ trợ duy nhất một hoạt động là “tham chiếu thuộc tính”, tức là mỗi phiên bản này đều biết rất rõ các đặc điểm của bản thân mình và biết cách truy cập vào chúng.   Các đặc điểm này có thể chia làm hai lọại là:   Đặc điểm nhận dạng   Đặc điểm riêng của cậu ấy hay còn gọi là các thuộc tính dữ liệu(data attributes)   Các thuộc tính dữ liệu thì không cần khai báo, như là các biến địa phương, và chúng bắt đầu tồn tại kể từ khi chúng được gán.   Ví dụ, từ x là một thực thể của MyCoLat ở trên, mình tạo một thuộc tính dữ liệu cho nó mang tên “counter” nó bắt đầu tồn tại tại thời điểm mình gán giá trị và có thể sử dụng ngay sau đó.   &gt;&gt;&gt; x.counter = 1 &gt;&gt;&gt; while x.counter &lt; 10: ...     x.counter = x.counter * 2 ... &gt;&gt;&gt; print(x.counter) 16 &gt;&gt;&gt; del x.counter &gt;&gt;&gt;   Các hành động   Còn hành động của từng phiên bản như thấy gái là auto chảnh hay thấy người lớn là auto lịch sự  chính là các phương thức(methods).   Phương thức của đối tượng là một hàm thuộc về đối tượng đó.   Tên các phương thức của một đối tượng sẽ phụ thuộc vào lớp của đối tượng đó. Theo định nghĩa, tất cả các thuộc tính của lớp thể hiện các hành động của các đối tượng thì sẽ dùng phương thức để thể hiện.   Ở ví dụ của tụi mình, x.f là một tham chiếu phương thức f hợp lệ, vì \bMyCoLat.keep_it là một hàm   Nhưng MyCoLat.handsome_like thì không phải là tham chiếu phương thức, vì handsome_like chỉ là một thuộc tính dữ liệu.   **Thế còn x.keep_it và MyClassDating.keep_it có giống nhau? **   Hai bạn này khác nhau nhé ạ,   – với x.keep_it thì keep_it là phương thức của thực thể x   – với MyCoLat.keep_it thì keep_it là phương thức của đối tượng MyCoLat   Hành động của các đối tượng   Cờ-lát của tớ có thể tạo ra nhiều đối tượng là các phiên bản của cậu ấy, và cậu ấy cũng có thể tạo các hành động chung cho các loại phiên bản này.   Như ở trên, keep_it chính là một phương thức như vậy,  phương thức này có thể gọi ngay lập tức hoặc cũng có thể được gán vào một giá trị để sử dụng sau này.   – Khi gọi từ thực thể x, mình gọi x.keep_it()   – Khi muốn gán vào giá trị mình gán: y = x.keep_it, và có thể dùng giá trị y này như một biến số bình thường.   **Vậy thì, điều gì đã xảy ra khi phương thức này được gọi như thế này x.keep_it()? **   Bạn có thấy x.keep_it() được gọi mà không cần biến số nào, ngay cả khi keep_it được định nghĩa với một biến số là self.   Vì sao lại thể nhỉ? Có điều gì đó sai sai, có phải là thiếu biến số không? Nếu mà thiếu là Python nó la làng lên lỗi thiếu biến số rồi cậu à, dù cho biến này cậu không dùng nhưng Python nó sẽ vẫn yêu cầu phải có, gọi là required args ấy, cơ mà ở đây thì hoàn toàn không có lỗi nào, lạ thật.   Thực ra thì, mình tin bạn đã toán được câu trả lời rồi: có một điểm đặc biệt ngay chỗ phương thức này là thực thể mà gọi phương thức ấy sẽ được tự động bỏ vào cho biến self đó. Trong ví dụ, khi mình gọi x.keep_it() thì sẽ tương đương với gọi như vầy nè MyCoLat.keep_it(x).   Nói chung thì, khi gọi một phương thức từ các thực thể với các biến số sẽ tương đương với gọi phương thức đó từ class của nó cộng với chính thực thể đó được truyền vào ở vị trí đầu tiên, đại diện cho thực thể đó.     Nếu bạn vẫn chưa hiểu, bạn có thể xem về cách class thực thi có lẽ sẽ hiểu hơn ý.   Ví dụ nha, khi một thuộc tính không phải dữ liệu riêng của x được tham chiếu, ở đây là keep_it(nó của Cờ lát), thì chương trình sẽ đi tìm kiếm nó ở trong lớp của x, tức là nó nhảy vô trong bạn MyCoLat nó tìm, và nó nhận ra bạn keep_it chính là phương thức của lớp đối tượng(keep_it của MyCoLat), nên nó tạo một đối tượng phương thức mới bằng cách đóng gói x kèm với cái hàm đó lại, để cho tụi nó đi cùng nhau, tạo nên một đối tượng trừu tượng là phương thức của đối tượng(keep_it của x).   Khi x gọi phương thức này kèm với một danh sách đối số, một danh sách đối số mới sẽ được xây dựng bao gồm thực thể gọi và danh sách đối số đi kèm, rồi nó sẽ gọi phương thức của đối tượng trên bằng đám đối số mới này.   Hi vọng bạn sẽ hiểu 😅   Thuộc tính của Cờ-lát và thuộc tính của các phiên bản   Nói chung là, tính cách của cờ lát thì các phiên bản đều được kế thừa, còn tính cách của từng phiên bản thì chỉ là của riêng phiên bản đó thôi.   Dưới đây là một ví dụ:   class Dog:     \"\"\"Đây là cờ lát của các bạn chó\"\"\"     kind = \"chó ta\"  # biến ni của lớp sẽ được chia sẻ                      #với tất cả các thực thể tạo từ lớp này      def __init__(self, name):         self.name = name  # biến ni của từng thực thể được                           # khởi tạo bởi hàm __init__ sẽ tương ứng                           # với giá trị của từng thực thể truyền vào    &gt;&gt;&gt; from example import Dog &gt;&gt;&gt; v = Dog(\"Vàng\") &gt;&gt;&gt; m = Dog(\"Mili\") &gt;&gt;&gt; v.kind 'chó ta' &gt;&gt;&gt; m.kind 'chó ta' &gt;&gt;&gt; v.name 'Vàng' &gt;&gt;&gt; m.name 'Mili'   Như mình thấy ở trên, “kind” là một thuộc tính được chia sẻ. Với các thuộc tính chia sẻ như vậy, nếu nó là các kiểu dữ liệu có thể thay đổi được như là list, dict thì có khả năng sẽ tạo ra nhiều trường hợp mình không mong muốn, vì tính chất chia sẻ này.   Ví dụ mình thêm một thuộc tính nữa mô tả sở thích của các bạn chó là “interest”, là một dict:   class Dog:     \"\"\"Đây là cờ lát của các bạn chó\"\"\"     kind = \"chó ta\"  # biến ni của lớp sẽ được chia sẻ                      # với tất cả các thực thể tạo từ lớp này      interest = []  # biến ni của lớp sẽ được chia sẻ                    # với tất cả các thực thể tạo từ lớp này      def __init__(self, name):         self.name = name  # biến ni của từng thực thể được                           # khởi tạo bởi hàm __init__ sẽ tương ứng                           # với giá trị của từng thực thể truyền vào      def add_interest(self, interest_name):         self.interest.append(interest_name)   &gt;&gt;&gt; from example import Dog &gt;&gt;&gt; v = Dog(\"Vàng\") &gt;&gt;&gt; m = Dog(\"Mili\") &gt;&gt;&gt; v.add_interest(\"ngủ\") &gt;&gt;&gt; m.add_interest(\"ăn\") &gt;&gt;&gt; v.interest ['ngủ', 'ăn'] &gt;&gt;&gt; # Ở đây mình mong đợi v chi có một interest là \"ngủ\" thôi     # mà lại trả ra hai cơ, vậy là bị sai goài!   Như vậy, khi “interest” là một thuộc tính chung được chia sẻ với tất cả các phiên bản khác thì sẽ gây vấn đề phải không?   Vậy ở đây, mình cần phải đặt bạn “interest” này vào cho từng phiên bản một, bằng cách đặt thuộc tính này vào hàm init, do đó thuộc tính này sẽ được khởi tạo cho từng phiên bản riêng biệt, như thế này sẽ hoạt động như mong đợi là v chỉ có một interest là [“ngủ”] thôi nè:   class Dog:     \"\"\"Đây là cờ lát của các bạn chó\"\"\"     kind = \"chó ta\"  # biến ni của lớp sẽ được chia sẻ                      # với tất cả các thực thể tạo từ lớp này      def __init__(self, name):         self.name = name  # biến ni của từng thực thể được         self.interest = []  # biến ni của từng thực thể được      def add_interest(self, interest_name):         self.interest.append(interest_name)    &gt;&gt;&gt; from example import Dog &gt;&gt;&gt; v = Dog(\"Vàng\") &gt;&gt;&gt; m = Dog(\"Mili\") &gt;&gt;&gt; v.add_interest(\"ngủ\") &gt;&gt;&gt; m.add_interest(\"ăn\") &gt;&gt;&gt; v.interest ['ngủ']   Một vài lưu ý nữa nha  Cờ-lát và phiên bản có cùng tên thuộc tính, thì ưu tiên tên ở phiên bản   Nếu cùng một tên thuộc tính có mặt ở cả thực thể và cả lớp đối tượng thì thuộc tính thuộc thực thể sẽ được ưu tiên sử dụng nhé.   &gt;&gt;&gt; x = Dog(\"Beck\") &gt;&gt;&gt; x.kind 'chó ta' &gt;&gt;&gt; x.kind = \"chó ngoại\" &gt;&gt;&gt; x.kind 'chó ngoại   Ở đây sau khi mình tạo một phiên bản x là bạn chó có tên “Beck” rồi mình mới gán tiếp biến kind qua giá trị là “chó ngoại”, thì lúc này kind của x sẽ có giá trị mới này.   Một vài nguyên tắc về ngữ nghĩa   Biến số đầu tiên của phương thức trong class thường sẽ bắt đầu với self(như mình đã học ở trên).   Thế thì nếu không có self có được không nhỉ?   Câu trả lời là ĐƯỢC. Cơ mà, đây là quy định về mặt ngữ nghĩa của class trong Python, nên dù có viết được nhưng mình cũng hạn chế nhất có thể, vì sẽ gây hiểu lầm với người khác.   Thế còn mình có thể đặt code của các phương thức ở ngoài code của class được không?   Câu trả lời là ĐƯỢC luôn nghe, vì không ai bắt buộc phải đặt ở trỏng hết á. Người ta hay đặt bên trong cũng là cho dễ đọc thôi à.   # Hàm này được khai báo ở ngoài class nè def f1(self, x, y):     return min(x, x + y)  class C:     f = f1      def g(self):         return \"Hello\"      h = g   Gọi hàm  Có thể gọi hàm trong cùng một class với self   Phương thức này có thể gọi phương thức khác trong cùng một lớp đối tượng, sử dụng self để gọi.   Ví dụ dưới đây gọi hai lần hàm add trong hàm addtwice nè:   class Bag:     def __init__(self):         self.data = []      def add(self, x):         self.data.append(x)      def addtwice(self, x):         self.add(x)         self.add(x)   Gọi phương thức của lớp đối tượng   Các phương thức trong một lớp có thể tham chiếu toàn cục giống như các hàm thông thường với phạm vi toàn cục được liên kết với phương thức đó chính là mô-đun chứa định nghĩa của nó. Ví dụ như mình có thể gọi hàm add của Bag như thế này: Bag.add(1)   Cơ mà lớp đối tượng thì không bao giờ sử dụng như là một phạm vi toàn cục được nghen. \u001dTrong khi hiếm có lý do cho việc sử dụng phương thức của một lớp ở phạm vi toàn cục, thì có nhiều cách sử dụng phạm vi toàn cục hợp lý hơn: đơn cử như, các hàm và các mô-đun được nạp vào phạm vi toàn cục để có thể sử dụng trong các phương thức, cũng như việc định nghĩa các hàm hay các lớp trong phạm vi toàn cục.   Thường thì, lớp chứa phương thức được định nghĩa trong phạm vi toàn cục, và trong phần tiếp theo, mình sẽ tìm thấy thêm vài nguyên nhân tại sao phương thức lại tham chiếu đến lớp của chính nó.   Mỗi giá trị là một đối tượng, và do đó sẽ có một lớp(còn được gọi là type của nó), được lưu trữ dưới dạng đối tượng object.class.   Kế thừa   Khi nói đến lớp, tất nhiên sẽ nói đến kế thừa, vì đây là viên kim cương trong lập trình hướng đối tượng.   Để kế thừa một lớp rất đơn giản, chỉ việc bọc lớp mình tạo với lớp mình định kế thừa là xong, nó sẽ như vậy nè:   class DerivedClassName(BaseClassName):     &lt;statement-1&gt;     .     .     .     &lt;statement-N&gt;   Lớp cơ sở BaseClassName phải được định nghĩa trong phạm vi chứa lớp dẫn xuất DerivedClassName. Trong chỗ BaseClassName mình cũng cho phép một số dạng khác như là gọi lớp đó từ mô-đun nào đó, ví dụ: class DerivedClassName(modname.BaseClassName):   Việc thực thi định nghĩa của lớp dẫn xuất được tiến hành giống với lớp cơ sở. Khi lớp đối tượng được khởi tạo, thì nó sẽ nhớ lớp cơ sở của nó. Điều này sẽ dùng để giải quyết chuyện tham chiếu thuộc tính: nếu một thuộc tính được yêu cầu không tìm thấy trong lớp dẫn xuất, nó sẽ đi kiếm trong lớp cơ sở. Quy tắc này được áp dụng đệ quy nếu bản thân lớp cơ sở chính là lớp dẫn xuất từ các lớp cơ sở khác nữa.   Việc tạo một phiên bản mới từ lớp dẫn xuất cũng tương tự như mình đã học: DerivedClassName(). Các phương thức tham chiếu được giải quyết như sau: thuộc tính lớp tương ứng được tìm kiếm, đi sâu dần vào trong các lớp cơ sở nếu cần, và phương thức tham chiếu sẽ hợp lệ nếu quá trình này trả ra một đối tượng hàm.   Lớp dẫn xuất có thể ghi đè các phương thức của các lớp cơ sở của chúng. Vì các phương thức không có đặc quyền đặc biệt khi gọi các phương thức khác của cùng loại đối tượng, một phương thức của lớp cơ sở được phép gọi một phương thức khác được định nghĩa trong cùng lớp cơ sở đó có thể kết thúc bằng việc gọi một phương thức của lớp dẫn xuất ghi đè nó.   Một phương thức được ghi đè trong lớp dẫn xuất có thể muốn mở rộng hơn là chỉ thay thế phương thức cùng tên của lớp cơ sở. Một cách đơn giản để gọi phương thức từ lớp cơ sở một cách trực tiếp là gọi BaseClassName.methodName(self, đối số).   Python cung cấp hai hàm dựng sẵn để làm việc với sự kế thừa này:   Dùng isinstance() để kiểm tra loại của thực thể: isinstance(obj, int) sẽ trả ra True chỉ khi obj.class là int có lớp dẫn xuất từ int   Dùng issubclass() để kiểm tra sự kế thừa:  issubclass(bool, int) là True khi bool là lớp con của int. Tuy nhiên, issubclass(float, int) là False do float không phải là lớp con của int đâu nghen.   Kế thừa từ nhiều lớp   Python cũng hỗ trợ kế thừa nhiều lớp nữa.   class DerivedClassName(Base1, Base2, Base3):     &lt;statement-1&gt;     .     .     .     &lt;statement-N&gt;   Vậy ở đây việc kế thừa được thực hiện thế nào nhỉ?   Đối với hầu hết các mục đích, trong các trường hợp đơn giản nhất, bạn có thể nghĩ là việc tìm kiếm các thuộc tính được kết thừa từ lớp cha là tìm kiếm theo chiều sâu, từ trái sang phải, và không phải tìm kiếm hai lần trong cùng một lớp nơi có sự chồng chéo trong phân cấp.   Do đó, nếu một thuộc tính không tìm thấy trong DerivedClassName, thì nó sẽ đi kiếm trong Base1, sau đó tìm kiếm đệ quy trong các lớp cơ sở của Base1, và nếu không tìm thấy nó sẽ tìm kiếm trong Base2, và cứ thế cho đến hết.   Thực tế thì nó sẽ phức tạp hơn như thế, thứ tự giải quyết các phương thức thay đổi động để hỗ trợ các lệnh gọi hợp tác tới super().   Thứ tự động là cần thiết vì tất cả các trường hợp đa kế thừa đều thể hiện một hoặc nhiều mối quan hệ một cách chặt chẽ(trong đó có ít nhất một trong các lớp cha có thể được truy cập thông qua nhiều đường dẫn từ lớp dưới cùng).   Ví dụ: tất cả các lớp kế thừa từ đối tượng, vì vậy bất kỳ trường hợp đa kế thừa nào cũng cung cấp một đường dẫn để tiếp cận đối tượng. Để giữ cho lớp cơ sở không bị truy cập nhiều lần, thuật toán động tuyến tính hoá thứ tự tìm kiếm theo cách bảo toàn thứ tự từ trái sang phải được chỉ định trọng mỗi lớp, chỉ gọi lớp cha một lần và điều đó là đơn điệu(nghĩa là một lớp có thể được phân lớp mà không ảnh hưởng đến thứ tự ưu tiên của lớp cha của nó). Kết hợp lại với nhau, các thuộc tính này giúp bạn có thể thiết kế các lớp đáng tin cậy và có thể mở rộng với đa kế thừa. Để biết thêm chi tiết bạn có thể đọc thêm ở đây   Các biến riêng   “Các biến riêng tư thì không thể được truy cập trừ khi nó được truy cập từ bên trong một đối tượng”, điều này không tồn tại trong Python, như các ngôn ngữ hướng đối tượng khác.   Tuy nhiên, có một quy ước: một tiền tố là dấu gạch dưới(ví dụ: _spam) có thể được hiểu đây là phần không được công khai của API(nó có thể là một hàm, một phương thức hay một biến dữ liệu), và các thành phần này được xem là có thể thay đổi mà không cần báo trước.   Có một trường hợp hay gặp trong việc sử dụng các biến riêng là để tránh tên bị xung đột khi mình cùng định nghĩa tên đó ở lớp con. Do đó, có một cơ chế hỗ trợ việc xung đột trên, gọi là phân loại tên(“name mangling”), với định nghĩa ở dạng hai dấu gạch dưới __spam, biến này sẽ được thay thế bằng __classname__spam, việc phân loại này không liên quan đến vị trí cú pháp của mã định danh, miễn là nó nằm trong định nghĩa của lớp là được.   Việc phân loại tên như vậy khá hữu ích trong khi ghi đè các phương thức của lớp cha mà không làm ảnh hưởng tới các phương thức khác được gọi. Ví dụ:   class Mapping:     def __init__(self, iterable):         self.items_list = []         self.__update(iterable)      def update(self, iterable):         for item in iterable:             self.items_list.append(item)      __update = update   # private copy of original update() method  class MappingSubclass(Mapping):      def update(self, keys, values):         # provides new signature for update()         # but does not break __init__()         for item in zip(keys, values):             self.items_list.append(item)  Ở ví dụ trên, mình thấy dòng gán __update = update trong lớp Mapping chính là việc thực hiện phân loại tên __update của class này, chính là Mapping__update(bạn gọi Mapping.__dict__ sẽ thấy biến này).   Vì thế, dù phương thức update được ghi đè trong lớp con MappingSubclass thì phương thức init vẫn hoạt động bình thường mà không bị ảnh hưởng.   Thậm chí, dù mình có viết thêm một phương thức __update riêng của lớp MappingSubclass thì được code vẫn có thể hoạt động được, vì lúc này phương thức nó tên là _MappingSubclass__update.   Thật hay phải không nào? 🥳   Một lưu ý là, các nguyên tắc về phân biệt như vậy được thiết lập nhằm tránh các tình huống ngoài mong đợi. Việc truy cập và sửa đổi một biến riêng là hoàn toàn có thể. Điều này có khi sẽ hữu dụng trong tình huống mình cần gỡ lỗi gì đó.     Đôi khi, mình chỉ cần một lớp trống để sau đó gán các giá trị thuộc tính cụ thể vào:   class Employee:     pass  john = Employee()  # Create an empty employee record  # Fill the fields of the record john.name = 'John Doe' john.dept = 'computer lab' john.salary = 1000   Một phương thức của một thực thể đối tượng cũng có thuộc tính riêng của nó. Ví dụ mình tạo một thực thể mapping = MappingSubclass([]), thì mapping.update là một phương thức của nó, và mapping.update.self là thực thể mapping, còn mapping.update.func là hàm update của thực thể đó.   Dù còn một đoạn nội dung nói về iterator và generator nữa, nhưng bài viết về class đến đây đã khá dài rồi, mình sẽ để giành hai bạn này ở bài tiếp theo, sẽ nghiên cứu và viết kỹ càng hơn nha.  ","categories": ["Đại Bản Doanh Python"],
        "tags": ["python"],
        "url": "/%C4%91%E1%BA%A1i%20b%E1%BA%A3n%20doanh%20python/lop-trong-python/",
        "teaser": null
      },{
        "title": "",
        "excerpt":"Chào mừng bạn đến với series “Làm quen Linux giành cho lập trình viên”, đây là bài blog đầu tiên của series này nè. Hi vọng bạn ủng hộ nhé!   Giới thiệu về thế giới mã nguồn mở  Một trong những câu hỏi quan trọng khi bạn tạo ra các sản phẩm về phần mềm là “Phần mềm của bạn sẽ được phát hành với loại giấy phép nào?”.   Loại giấy phép bạn chọn sẽ quyết định các yếu tố như:   – cách người dùng sử dụng phần mềm của bạn sẽ như thế nào?   – mã nguồn của phần mềm có được xem hay không?   – những người lập trình viên khác có được sử dụng mã nguồn này không?   – người khác được quyền bán hay cải tiến và bán lại phần mềm phát triển dựa trên mã nguồn của bạn không?   Những câu hỏi trên thường được quy về một câu hỏi mà bạn chắc sẽ hay gặp:   “Phần mềm này là loại mã nguồn mở(open source) hay mã nguồn đóng(closed source)?”   Mã nguồn(source code) là gì?  Ví dụ bạn có một chương trình Python in ra một dòng là “Hello Linux” chẳng hạn, thì nó sẽ như thế này:      print(“Hello Linux”)    nội dung trên được gọi là source code(mã nguồn).   Source code này có thể được viết bằng nhiều loại ngôn ngữ khác nhau, như là HTML, CSS, SASS, JS, Python, C, C++, …   Một số ngôn ngữ cần được biên dịch trước khi chương trình có thể chạy như C, C++, … gọi là compiled languages, cũng có ngôn ngữ không cần biên dịch như Python, Javascript, … gọi là interpreted languages   Mã nguồn đóng(closed source)  Closed source hay còn gọi là “phần mềm độc quyền” với mục đích là bảo vệ mã nguồn của phần mềm này một cách chặt chẽ với lý do rõ ràng là nếu mã nguồn bị lộ thì rất nguy hiểm vì sẽ bị sao chép để cạnh tranh.   Thường thì thuật ngữ closed source được sử dụng thay thế cho thuật ngữ commercial software(phần mềm thương mại), tức là bạn phải trả tiền để có thể sử dụng chúng. Nhưng điều này chưa đúng lắm, lý do là cả open source hay closed source đều có thể được thương mại hóa.   Microsoft Windows, Adobe Photoshop, Apple MacOS là các ví dụ cho loại này.   Nếu phần mềm của bạn là closed source(mã nguồn đóng) thì bạn sẽ chỉ cung cấp cho người dùng những đoạn mã sau khi đã biên dịch(nếu là compiled language), còn nếu là interpreted language thì bạn sẽ không cung cấp cho người dùng source code.   Mã nguồn mở(open source)  Một phần mềm được cân nhắc là open souce khi mà cả mã nguồn gốc và mã đã biên dịch đều được cung cấp sẵn. Tùy theo loại lisence mà phần mềm này có thể được xem, sửa đổi hay có quyền phân phối.   Linux, Apache HTTP Server, Firefox, Git là các ví dụ cho loại này.   Open source có thể hiểu là khả năng truy cập vào mã nguồn, chứ không phải cách phần mềm có thể được sử dụng hoặc các chi phí liên quan đến phần mềm.   Nếu phần mềm của bạn là open source(mã nguồn mở) thì nó sẽ bao gồm tất cả source code của bạn, tức là gồm mã nguồn gốc và mã sau khi biên dịch(nếu có).   Phần mềm “miễn phí” (“free” source)  Free source thường được hiểu là sự tự do copy hay sự có thể thay đổi của chương trình, chứ không liên quan đến giá cả. FSF(Free Software Foundation) đã đưa ra định nghĩa cho chữ “free” dành cho phần mềm bởi Richard Stallman:   *“Từ “free” ở đây không liên quan đến giá, nó được hiểu là sự tự do.   Một, tự do sao chép chương trinh và tái phân phối đến người khác, và họ cũng có thể dùng sản phẩm như bạn.   Hai, tự do thay đổi chương trình, và bạn có quyền kiểm soát thay vì nó kiểm soát bạn, điều này cũng đồng nghĩa là họ có được mã nguồn.”  * Có 4 bậc của sự tự do hay gọi là FOSS, cụ thể là:   – Freedom 0: Tự do chạy chương trình bạn muốn, cho bất cứ mục đích nào.   – Freedom 1: Tự do học cách chương trinh hoạt động và thay đổi nó để tính toán như bạn muốn. Để làm được điều này tất nhiên bạn cần có quyền truy cập vào source code trước.   – Freedom 2: Tự do tái phân phối những bản sao.   – Freedom 3: Tự do phân phối các bản sao của chương trình bạn đã chỉnh sửa cho người khác. Để làm được điều này tất nhiên bạn cần có quyền truy cập vào source code trước.      Sơ đồ bên trên mô tả quyền tự do sửa đổi, phân phối và sử dụng của phần mềm open source.   Ngoài ra, việc chọn lựa các loại giấy phép cho phần mềm cũng liên quan đến các quyền tự do này. Bạn có thể tham khảo thêm ở choosealicense.com hay opensource.org nhé.   Các lợi ích của open source  – Open source có xu hướng kêu gọi sự tin tưởng vì source code sẽ được cả cộng đồng xem.   – Open source có thể tạo ra source code tốt hơn và giảm thời gian phát triển phần mềm, nhờ các lập trình viên khác review code, cho feedback, sửa lỗi hay cải thiện sửa đổi nhanh hơn.   – Open source miễn phí có thể tiếp cận nhiều người dùng hơn, đồng nghĩa với có nhiều người thử nghiệm sản phẩm hơn.   – Bạn vẫn có thể kiếm tiền từ các open source như các dịch vụ đi kèm về đào tạo, hỗ trợ, …   Giới thiệu về Linux  Nếu bạn tính phát triển phần mềm trên các hệ điều hành có nền tảng từ Linux(Linux-based operating system(OS)) thì việc tìm hiểu làm thế nào có thể tương tác để quản lý OS là việc quan trọng.   (vì trước sau gì bạn cũng sẽ ăn hành với chúng, như không biết mình đang đứng ở thư mục nào, \bhay thay đổi quyền của một cái file, …)   Linux là gì  Về mặt kỹ thuật, thì Linux là một phần mềm gọi là nhân(kernel). Cái kernel ni hắn làm mấy các việc như là khởi động hệ thống hay tương tác với các thiết bị phần cứng.   Còn bản thân cái kernel ni thì là không có làm việc liền với user được, mà là toàn bộ những thứ khác, thường gọi là OS bao gồm các file hệ thống và số lượng lớn các câu lệnh, mới là thứ cung cấp cho người dùng những tính năng hữu ích.   Dù cho Linux về mặt kỹ thuật chỉ là nhân, nhưng nhiều người lại hay gọi cả OS là Linux luôn.   Thực tế thì, tập hợp các phần mềm tạo nên hệ điều hành có tên là Linux distribution(distro).   Cài đặt và sử dụng Linux  Ở phần này, mình sẽ không giới thiệu chi tiết cách cài đặt distro hay gì, mình sẽ gợi ý một số cách bạn có thể bắt đầu truy cập và sử dụng Linux trên máy tính:   – MacOS: Hệ điều hành MacOS có nhân là UNIX-based(cụ thể là NeXTSTEP operating system). Linux cũng có nhân là UNIX-based(cụ thể là GNU) do đó nếu bạn dùng máy Mac thì rất đơn giản, gõ vào thanh tìm kiếm “Terminal” và mở phần mềm này lên. (xem thêm ở hình minh họa)   – Windows: Với máy windows, trước đây thì cần cài máy ảo(virtual machine – VM) với Virtualbox để có thể sử dụng hệ điều hành khác trên máy ảo. Tuy nhiên, cách này đã cũ rồi, hiện nay nếu bạn dùng windows thì có thể cài và sử dụng “Windows Subsystem for Linux(WSL)“   – Linux distro(Ubuntu, RedHat, …): thì mở “Terminal” lên thôi bạn.   Mình dùng máy MacOS nên những ví dụ minh họa(nếu có) trong series này sẽ là từ máy MacOS nha mọi người.    Bài blog hôm nay là bài mở đầu cho series về Linux, tụi mình đã làm quen với thế giới mã nguồn mở, Linux cũng như vài gợi ý để có thể bắt đầu sử dụng Linux rồi.   Trong bài viết tiếp theo, mình và các bạn sẽ đi tìm hiểu thêm về hệ thống tập tin(filesystem) trong Linux.   Nếu bạn thấy nội dung bài blog này hữu ích hãy upvote cho bài viết cũng như series để nội dung có thể đến với các bạn khác nhé.   Hẹn gặp các bạn trong bài viết tiếp theo.  ","categories": ["linux"],
        "tags": [],
        "url": "/linux/gioi-thieu-ve-linux/",
        "teaser": null
      },{
        "title": "Quản lý hệ thống tập tin trong Linux",
        "excerpt":"   Chào mừng bạn đến với blog số 3 của series “Linux dành cho lập trình viên”.   Trong các blog trước, mình đã đi qua các nội dung về:   – “Giới thiệu về Linux”   – “Làm quen câu lệnh và hệ thống tập tin trong Linux”.   Nếu bạn chưa đọc qua thì hãy dừng ít phút ghé đọc để có cái nhìn tổng quan và theo cùng nội dung chuỗi bài này nhé.   Tiếp theo trong bài này, tụi mình sẽ tìm hiểu về cách quản lý hệ thống tập tin trong Linux, cụ thể:   – Quản lý hệ thống tập tin   – Quản lý thư mục   – Quản lý file   – Các toán tử đại diện   Quản lý hệ thống tập tin(filesystem)   Sau khi đến được thư mục cần đến bằng câu lệnh với cd rồi, thì mình muốn xem những nội dung bên trong thư mục đấy có gì. Câu lệnh ls giúp mình:   – mặc định ls sẽ hiển thị tất cả các file trừ những file ẩn   File ẩn là những file môi trường có bắt đầu bằng . (ví dụ: ., .., .env, .gitignore)   – sử dụng -a để liệt kê tất cả các file(bao gồm các file bị ẩn)   – sử dụng -l để liệt kê ở long format, có thể hiểu là thêm các thông tin khác của file như có phải là thư mục hay không(d hay -), các loại quyền của từng loại user(rwxr-xr-x), user owner, group owner, kích thước, ngày tháng chỉnh sửa, filename, …   – sử dụng -la để kết hợp cả hai options trên lại, hiển thị tất cả các file ở long format      Ở hình trên có ghi chú chi tiết, về các thông tin được hiển thị với câu lệnh ls -l, cụ thể là:   – File type: d nghĩa là thư mục, – nghĩa là file   – Permissions: cho phép các đối tượng cụ thể các quyền truy cập vào file   – Hard link count: thông tin về liên kết của tệp   – User owner: người dùng là chủ sở hữu của file   – Group owner: nhóm người dùng có quyền truy cập thông qua các permissions   – File size: kích thước file theo bytes   – Modification timestamp: ngày giờ chỉnh sửa gần nhất   – File name: tên của file   Quản lý thư mục  Quản lý thư mục      mkdir  hoặc     Ví dụ: Giả sử mình đang đứng ở thư mục ~/Desktop/example-linux           tạo một thư mục có tên là manage-dir vào thư mục hiện tại với mkdir manage-dir              mkdir cũng có thể đi cùng với đường dẫn đến thư mục và tên của thư mục cần tạo.      tạo thêm một thư mục có tên là mkdir-example nằm trong thư mục manage-dir     Tuy nhiên, nếu đường dẫn này chưa tồn tại, ví dụ mình muốn tạo một thư mục mkdir-example trong thư mục manage-dir-not-exist chẳng hạn, thì sẽ báo lỗi:      Xóa thư mục trống với rmdir      rmdir  hoặc        Xóa thư mục bao gồm cả nội dung bên trong với rm   Để xóa được cả thư mục chứa nội dung bên trong, thì câu lệnh rmdir thôi sẽ báo lỗi folder này không trống.   Khi đó, bạn có thể dùng câu lệnh rm với option -r dùng để xóa tất cả files hay folders ở tất cả các cấp.   Ví dụ: mình muốn xóa folder manage-dir nơi có chứa một file test.txt      Lưu ý: đây là một câu lệnh khá nguy hiểm(thấy không? nó xóa hết mà không có bất kỳ thông báo gì hết như ví dụ trên) nên bạn hãy dùng man rm để đọc document và kiểm tra kỹ từng options có thể dùng nhé.   Ví dụ bạn có thể sử dụng thêm option -i để vào chế độ cho phép tương tác(interactive) tức là cho phép lựa chọn file để xóa với y(yes) hay n(no)      Ở ví dụ trên mình cố tình chọn y khi được hỏi remove manage-dir.  Dẫn đến lỗi là thư mục này không có trống để xóa được, vì mình đã chọn n tức là không cho xóa khi được hỏi manage-dir/test.txt, tức là folder này vẫn còn file test.txt ở trong.   Quản lý file   Sao chép file với cp      cp      Ví dụ: copy file test.txt trong folder manage-dir đến thư mục hiện tại là example-linux      Lưu ý: đây cũng là lệnh khá nguy hiểm, khi mà ở folder hiện tại bạn có một file cùng tên với file bạn tính copy đến, thì file mới đến nó ghi đè luôn, thế mà mất toai cái bạn cũ.   Ví dụ: lệnh cp ghi đè file cùng tên có sẵn      Bạn để ý kích thước file test.txt ban đầu là 55KB, với nội dung là đoạn text đó. Sau khi copy kích thước còn 0KB, và nội dung trống.   Bạn có thể sử dụng thêm option -i để vào chế độ cho phép tương tác(interactive) tức là được lựa chọn có ghi đè file cùng tên hay không      Sau khi mình chọn n để không cho ghi đè thì kích thước và nội dung file test.txt không thay đổi.   Di chuyển file với mv      mv      Xóa file với rm  Câu lệnh rm cho phép mình xóa file.      rm  hoặc     Tạo file trống với touch      touch     Toán tử đại diện  Khi thực hiện quản lý hệ thống tập tin, nhiều lúc mình sẽ cần làm việc với số lượng files, thư mục khá lớn, lên đến hàng chục hay hàng trăm nghìn.   Dưới đây là ví dụ với folder /etc có total 1560      Trong những trường hợp này, việc tìm kiếm bằng mắt các file hay thư mục là việc vô cùng khó khăn và tốn thời gian. Khi đó, các** toán tử đại diện** là cứu tinh của chúng ta.   Các toán tử đại diện thường dùng để tìm kiếm các file có chung đặc điểm nào đó, như là có chung đuôi file(phần mở rộng) là .conf hay có cùng một số ký tự nào đó trong tên chẳng hạn.   Toán tử *  Ví dụ mình muốn tìm kiếm tất cả các file có đuôi là .conf trong folder /etc ở trên, khi đó đường dẫn của mình sẽ là /etc/*/conf      Toán tử * đại diện cho “không chứa hoặc có chứa một hay nhiều ký tự”    Tức ***** ở đây có thể là không chứa gì hết, như file .conf hoặc có chứa một hay nhiều ký tự như nfs.conf hay pf.conf   Thường khi làm việc với một lượng lớn file như vậy, bạn sẽ cần copy những file tìm được vào một thư mục nào đó để dễ làm việc với chúng(những file copy) – cho an toàn – vì nếu đụng vô sửa mấy file hệ thống hay config bậy khá là nguy hiểm nha.   Vậy nên, để thực hiện thao tác này, là lúc câu lệnh cp tới công chiện.   Hãy cùng tạo một thư mục config trong example-linux rồi copy cái bạn này bỏ vào đó nhé(thử làm trước khi xem đáp án ha).      Toán tử ?      Toán tử ? đại diện cho một ký tự    Với ? đại diện cho một ký tự, vậy thì để tìm những file có đuôi là .conf và có tên đúng 3 ký tự thôi thì mình có thể sử dụng đường dẫn là /etc/???.conf   Toán tử [] đại diện cho một khoảng(range)  Thế còn có cách nào muốn kiếm file chứ ký tự với một số giá trị nào đấy không nhỉ?   Đến đây thì cái này [] vào công chiện nè, đường dẫn để kiếm tên file có đuôi .conf mà bắt đầu bằng a hoặc b sẽ là /etc/[ab]*.conf      Ngoài cách viết từng loại ký tự trong range [] như thế, có một cách gọn hơn để viết mội dãy các ký tự với **-**, cụ thể là **[abcd] **có thể viết thành **[a-d]**   Note: mấy ví dụ trên đây là mình dùng kèm câu lệnh cp để copy file được chọn về thư mục mới luôn, nếu bạn thích gọn hơn thì có thể dùng thằng câu lệnh ls thôi nhé, kiểu như: ls /etc/[ab]*.conf   Các toán tử đại diện được hiểu như thế nào khi câu lệnh thực thi?  Bạn nghĩ sao về câu hỏi này, bạn đoán thử nha.   Theo mình thì để có thể hiểu được các toán tử đại diện này hẳn là các câu lệnh phải có cách nào đó dịch ý nghĩa của chúng ra.   Ví dụ mình muốn tìm tất cả các files hay folder có bắt đầu bằng a hoặc b, sử dụng ls /etc/[ab]* , thì mình đoán là BASH sẽ dịch [ab] thành a hoặc b, xong qua dịch tiếp dấu * để hiểu * là như nào xong mới đi kiếm với ls được chứ. Hay là câu lệnh ls đi dịch cái nghĩa xong rồi mới kiếm ta?   Thực ra thì, mình đoán cũng gần đúng đó mấy bạn hehe.    Các toán tử đại diện sẽ không được dịch theo từng câu lệnh, mà thay vào đó nó là một phần của BASH shell. Điều này có ý nghĩa quan trọng vì nó cho bạn biết là bạn có thể dùng cái toán tử đại diện này ở mọi câu lệnh, đã chưa.   Ví dụ ls /etc/[ab]*.conf ở trên thì câu lệnh ls thậm chí còn không biết là bạn dùng toán tử hay gì hết.   BASH đầu tiên sẽ:   – đi đổi cái etc/[ab]*.conf qua thành **/etc/asl.conf /etc/autofs.conf /etc/aliases … **   – gọi lệnh ls /etc/asl.conf /etc/autofs.conf /etc/aliases …   Cùng xem kết quả nhé:    Ủa kỳ ta, sao nó hiện tùm lum vậy kìa =)) Hình như nó hiện cả các files trong mấy cái thư mục luôn phải không?   Thế thì, mình cần thêm option nào của ls để hiển thị tên thư mục thôi hả các chế?   Chắc bạn nhớ, dùng -d đó nha. Nếu không nhớ thì … man ls và đọc document nào.       Nội dung bài blog này đến đây tạm hết rồi, tụi mình đã tìm hiểu cách quản lý hệ thống tập tin trong Linux rồi ấy, cũng đơn giản đúng không nào.   Trong bài viết tiếp theo của series “Làm quen Linux giành cho lập trình viên”, sẽ là tìm hiểu thêm về việc chuyển hướng của câu lệnh trong Linux, tức là có thể sử dụng kết quả của câu lệnh này để thực thi một câu lệnh khác ấy, thú vị lắm.   Bài gốc của nội dung này nằm trên blog cá nhân của mình, mời bạn ghé chơi.  ","categories": ["linux"],
        "tags": [],
        "url": "/linux/quan-ly-he-thong-tap-tin-trong-linux/",
        "teaser": null
      },{
        "title": "",
        "excerpt":" ","categories": ["js"],
        "tags": [],
        "url": "/js/truc-quan-hoa-khi-chay-ma-chuong-trinh/",
        "teaser": null
      },{
        "title": "Chuyển hướng câu lệnh trong Linux",
        "excerpt":" Chào mừng bạn đến với blog số 4 của series “Linux dành cho lập trình viên”.   Trong các blog trước, mình đã đi qua các nội dung về:   – “Giới thiệu về Linux”   – “Làm quen câu lệnh và hệ thống tập tin trong Linux”   – “Quản lý hệ thống tập tin trong Linux”   Nếu bạn chưa đọc qua thì hãy dừng ít phút ghé đọc để có cái nhìn tổng quan và theo cùng nội dung chuỗi bài này nhé.   Tiếp theo trong bài này, tụi mình sẽ cùng tìm hiểu thêm về việc chuyển hướng trong Linux.     Các luồng dữ liệu của một câu lệnh   Quy trình làm việc cơ bản của bất cứ câu lệnh nào chính là nó sẽ nhận đầu vào(input) và trả về một đầu ra(output).   Một câu lệnh sẽ có 3 luồng dữ liệu gồm:   – standard input(stdin)   – standard out(stdout)   – standard error(stderr)   Đầu vào tiêu chuẩn(stdin)      Là dữ liệu được truyền vào câu lệnh.    Stdin thường là từ bàn phím, ngoài ra còn có thể từ file hoặc một process khác   Đầu ra tiêu chuẩn(stdout)      Là kết quả được trả về sau khi thực thi câu lệnh thành công.    Stdout thường xuất ra trên màn hình, ngoài ra còn có thể xuất ra file hoặc một process khác   Ví dụ: khi bạn gõ ls thì đây chính là stdin, còn stdout là kết quả bạn thấy trên màn hình      Lỗi(stderr)      Là lỗi được trả về sau khi thực thi câu lệnh và có lỗi gì đó xảy ra.    Stdout thường xuất ra trên màn hình, ngoài ra còn có thể xuất ra file hoặc một process khác      “Chuyển hướng” - Redirection là gì?     “Chuyển hướng” là một tính năng trong Linux cho phép chúng ta thay đổi đầu vào tiêu chuẩn(stdin) và đầu ra tiêu chuẩn(stdout) khi thực hiện một câu lệnh.    Ví dụ: bạn chạy một câu lệnh và muốn \blưu lại kết quả trả về của câu lệnh này để sử dụng trong tương lai.   Chuyển hướng vào file  Chuyển hướng đầu ra(stdout) vào file với dấu &gt;      Dùng dấu &gt; để chuyển hướng cho đầu ra(stdout)    Ví dụ: Chuyển kết quả của câu lệnh ls đã thành công và chuyển sdtout vào file là list.txt      Kết quả là mình không còn thấy stdout xuất ra màn hình nữa, mà stdout này đã được xuất vào file list.txt, file này được tự động tạo(nếu chưa có) hoặc sẽ ghi đè(nếu file này đã tồn tại).   Tiếp theo ví dụ trên, giả sử mình muốn chuyển stdout của câu lệnh “cal 03 2022” vào file list.txt      Vậy là kết quả của lệnh ls ban đầu đã bị ghi đè rồi.   Nếu bạn muốn ghi thêm vào thay vì ghi đè trong trường hợp này cần sử dụng dấu ».   Theo đó kết quả mới sẽ được thêm vào như dưới đây:      Chuyển hướng lỗi(stderr) vào file với dấu 2&gt;     Dùng dấu 2&gt; để chuyển hướng cho lỗi(stderr)    Ví dụ: Chuyển kết quả của câu lệnh “cal -1 2022” có lỗi(vì tháng là số âm) và chuyển sdterr vào file là cal.txt(nếu chưa có sẽ tạo mới, có file tồn tại sẽ ghi đè)      Thế nhưng không phải lúc nào chúng ta cũng biết chắc chắn là câu lệnh có lỗi để chuyển vào với dấu 2&gt;, khi đó có thể tách ra nếu stdout thì chuyển vào file sdtout-cal.txt và nếu stderr thì chuyển vào file stderr-cal.txt.      Nhắc lại chỗ này một tí là khi dùng &gt;, thì nội dung file có sẵn sẽ bị ghi đè. Tức là khi có lỗi xảy ra ở câu lệnh số 2, thì file stdout-cal.txt sẽ bị ghi thành file rỗng, vì nó không có output ở đây.   Cuối cùng là một ví dụ cho trường hợp mình không muốn ghi đè(ôn lại) với », kết quả là tất cả các output đều được thêm vào.      Chuyển hướng tất cả output, gồm stdout và stderr vào file với dấu 2&gt;&amp;1     Để chuyển hướng output cho cả stdout và stderr thì sử dụng dấu 2&gt;&amp;1    Ví dụ: Chuyển hướng stdout hay stderror vào file(tạo với nếu chưa có file, ghi đè nếu file đã tồn tại)      Ví dụ: Chuyển hướng stdout hay stderror thêm nội dung vào file   Một lưu ý là việc chuyển hướng tất cả đầu ra output(stdout, sdterr) vào chung một file rất thường gặp, đặc biệt là khi chương trình cần theo dõi log(để debug lỗi) của những câu lệnh được chạy, hoặc khi bạn muốn chạy lệnh nhưng bỏ qua các lỗi có thể xảy ra. Tất cả những nội dung output này sẽ được gom vào một file hay gọi là “bit bucket” hay “black hole”   Ví dụ về đầu vào tiêu chuẩn(stdin)  Hãy thử lệnh này: tr ‘a-z’ ‘A-Z’      Kết quả là chương trình nó đứng im như bị treo vậy á!?   Nhưng mà không phải đâu, thực tế là nó đang đứng đợi bạn truyền đầu vào vào ấy. Thử gõ một dòng chữ: “Have a nice day” vào và enter:      Kết quả là một dòng chữ mới in hoa được xuất ra, và chương trình tiếp tục đợi đầu vào tiếp theo.   Nếu muốn thoát khỏi lệnh này, bấm Ctrl+C.   Tại đây, chương trình đang sử dụng đầu vào tiêu chuẩn(stdin) là từ bàn phím nhập vào. Nếu đầu vào này thay đổi là một file thì sẽ tốt biết mấy, mình có thể chứa nhiều nội dung để chuyển thành chữ in hoa hơn.   Chuyển hướng đầu vào với dấu &lt;      Dùng dấu &lt; để chuyển hướng cho đầu vào(stdin)    Ví dụ: Chuyển đầu vào cho câu lệnh trên là kết quả của lệnh cal trong file mycal. Tức là mình muốn in ra màn hình lịch ở định dạng in hoa      Tiếp theo, nếu muốn chuyển hướng cho stdout(lịch ở định dạng in hoa) và một file mynewcal thì sủe dụng &gt; để chuyển hướng đầu ra      Chuyển hướng đầu ra của câu lệnh này thành đầu vào của câu lệnh khác                           **Dùng dấu         để chuyển hướng cho đầu ra vào câu lệnh khác**                  Bạn cũng có thể chuyển hướng đầu ra của câu lệnh này vào câu lệnh khác thay vì chuyển vào file như trên. Việc này rất hữu ích khi mà có nhiều câu lệnh cần nối chuỗi với nhau hay có kết quả quá nhiều.   Ví dụ: Kết quả của câu lệnh “ls /etc” rất dài và làm màn hình xuất hiện thanh scroll, gây khó trong việc tìm kiếm trong kết quả nhiều như vậy.      Để giải quyết vấn đề này, chúng ta có thể gửi kết quả này vào một câu lệnh khác là more để hiện thị thành nhiều trang. Và để qua trang mới, chỉ cần bấm phím Space.      Vậy là đầu ra của câu lệnh “ls /etc” đã trở thành đầu vào của câu lệnh “more”. Để thoát ra khỏi chế độ xem nhiều trang của more, bấm “q” và enter để thoát.   Piping  Quá trình chuyển hướng đầu ra của lệnh này thành đầu vào của lệnh khác như trên được gọi là piping.  Bạn có thể tạm dịch nó là dạng đường ống(piping) vì nó chuyển dữ liệu(output) giống như nước chảy từ ống này sang ống khác.   Để hiểu thêm về piping, mời bạn xem qua sự so sánh hai quá trình sau:   Quá trình của câu lệnh “ls /etc” với đầu vào và đầu ra tiêu chuẩn  Khi bạn gõ “ls /etc” từ bàn phím, kết quả sẽ được in ra màn hình. Dưới đây là quá trình này:      Quá trình của câu lệnh “ls /etc | more” với piping  Khi bạn gõ “ls /etc | more” từ bàn phím, kết quả lệnh ls nếu có lỗi sẽ được in ra màn hình, nếu không có lỗi sẽ chuyển đầu ra thành đầu vào của lệnh more và xuất kết quả ra màn hình.   Dưới đây là quá trình này:        Nội dung bài blog này đến đây tạm hết rồi, tụi mình đã tìm hiểu về cách điều hướng câu lệnh trong Linux rồi, thú vị thật nhỉ.   Trong bài viết tiếp theo của series “Làm quen Linux giành cho lập trình viên”, sẽ là tìm hiểu thêm về “Các câu lệnh Linux thường dùng”   Hẹn gặp các bạn trong bài viết sau.  ","categories": ["linux"],
        "tags": [],
        "url": "/linux/chuyen-huong-cau-lenh-trong-linux/",
        "teaser": null
      },{
        "title": "Trực quan hóa khi chạy mã chương trình",
        "excerpt":"Giả sử bạn cần giải một bài toán 35. Search Insert Position, tìm giá trị index của target trong một mảng được sắp xếp theo thứ tự tăng dần, nếu không có thì trả về giá trị index cần chèn target vào.   Sau khi tìm hiểu về binary search, bạn đưa ra một đoạn mã sau:   function searchInsert(nums, target) {     let l = 0, r = nums.length - 1;     while(l &lt; r) {         let m = l + (r - l) % 2;         if (nums[m] == target) {             return m;         }         if (nums[m] &lt; target) {             l = m + 1;         } else {             r = m - 1;         }     }     return l   };   Giả sử mảng được truyền vào là [1,3,5,6] và target là 5, gọi searchInsert([1,3,5,6], 5) trả về kết quả là 2 , là giá trị index đúng của 5   Tuy nhiên, cũng với mảng trên, target là 2 , tức gọi searchInsert([1,3,5,6], 2), trả về 0 là sai. Kết quả mong đợi là 1.   Vậy làm sao để debug đoạn mã trên?   Giới thiệu đến bạn một công cụ Visualize Code Running có tên là pythontutor.com giúp bạn xem được từng bước được mô tả một cách trực quan. Dù là pythontutor nhưng công cụ này hỗ trợ nhiều loại ngôn ngữ như Python, JavaScript, C, C++, and Java.   Bạn vào trang pythontutor.com sau đó chọn Start writing and visualizing code now và chọn ngôn ngữ muốn viết.   Ở đây mình chọn JavaScript và copy/paste đoạn mã trên vào. Lưu ý là nhớ gọi searchInsert([1,3,5,6], 2) để hàm có thể thực thi nhé.   Tiếp theo nhấn nút Visualize Execution để bắt đầu xem code thực thi ra sao. Bấm Next để di chuyển đến bước tiếp theo.   Hình minh họa:      Nửa màn hình bên trái chứa code, các nút bấm để di chuyển đến bước tiếp theo Next, bước trước đó Prev, bước cuối cùng Last và bước đầu tiên First   – Mũi tên xanh lá câu nhạt chỉ dòng vừa mới thực thi   – Mũi tên đỏ chỉ dòng sẽ thực thi tiếp theo   Nửa màn hình bên phải là visualize code thực thi   – Global Frame chứa hàm searchInsert   – Khung màu xanh nhạt chứa các thông tin khi gọi hàmsearchInsert như nums, target, l, r, m   – Từ nums có mũi tên trỏ xuống mảng màu vàng chính là giá trị của danh sách nums   Sau khi quan sát từng bước thì mình phát hiện bước này có giá trị l và r đều là 0 dẫn đến thoát khỏi vòng lặp      Và giá trị trả về là l, tức 0      Vậy vấn đề ở đây là nếu l và r đều có giá trị bằng nhau thì vẫn cần nằm trong vòng lặp while để có thể xác định vị trí của l là m+1 nếu giá trị này nhỏ hơn target.   Cập nhật điều kiện while (l &lt;= r) và thử lại ta thấy l ở dòng 9 sẽ bằng m+1 tức 0+1 là 1      Khi đó l là 1 không nhỏ hơn r là 0 nên thoát ra khỏi vòng lặp và trả về 1 là kết quả đúng.     Trên đây là một ví dụ cụ thể về cách bạn có thể sử dụng pythontutor để debug một đoạn logic và xem từng bước chạy như thế nào.   Thay vì đi console.log mọi nơi thì cách này xịn xò hơn hẳn phải không?   Lại chúc mọi người debug vui vẻ và giải thêm được nhiều bài toán thú vị nhé.   Bài viết gốc nằm ở blog cá nhân của mình, mời bạn ghé chơi.     If you think these contents are helpful, you could send me an encouraging by:     Support me            ☕️ Buy me a coffee       😇 Send a hi on Momo       👀 Visit support page           Visit my blog at beautyoncode.com   Follow me on:            Careerly       fanpage       linkedin           🤘 Chat with me 🤘   See you around, friends!  ","categories": ["js"],
        "tags": [],
        "url": "/js/chien-luoc-tai-thuc-thi-code-javascript/",
        "teaser": null
      },{
        "title": "Giới thiệu về CLI và các câu lệnh làm việc với file trong Linux",
        "excerpt":"Chào mừng bạn đến với blog số 5 của series “Linux dành cho lập trình viên”.   Trong các blog trước, mình đã đi qua các nội dung về:   – “Giới thiệu về Linux”   – “Làm quen câu lệnh và hệ thống tập tin trong Linux”   – “Quản lý hệ thống tập tin trong Linux”   – ”Chuyển hướng câu lệnh trong Linux”   Nếu bạn chưa đọc qua thì hãy dừng ít phút ghé đọc để có cái nhìn tổng quan và theo cùng nội dung chuỗi bài này nhé.   Tiếp theo trong bài này, tụi mình sẽ làm quen CLI và một số câu lệnh khi làm việc với tập tin(file)   Giới thiệu về CLI (Command Line Interface)  Trong những bài viết trước đây, chúng ta đã cùng làm quen với Linux và thực hành một số câu lệnh trên môi trường dòng lệnh(đã được mình giới thiệu ở bài “Giới thiệu về Linux”), bạn này đây:      Môi trường này có tên đầy đủ là Command Line Interface(CLI), nơi cung cấp rất nhiều câu lệnh có thể dùng(khoảng 10,000).   Tại sao lại sử dụng CLI?  Thường thì mọi người sẽ sử dụng các hệ thống thiên về giao diện(GUI-based systems) như là Windows, vì nó khá dễ tiếp cận, dễ làm quen và sử dụng chỉ với vài cú nhấn chuột. Và nghĩ CLI như là một cái gì đó lỗi thời, kiểu thuộc về các thập niên trước.   Tuy nhiên, CLI vẫn tồn tại và có vị trí của nó trong các hệ thống hiện đại, với các lý do:   – Tính ổn định: Nhiều câu lệnh Linux được dùng từ Unix và vẫn rất thiết yếu dù cả mấy thập niên đã trôi qua. Sự ổn định này giúp lập trình viên có thể tập trung vào việc làm ra nhiều công cụ hơn là phải viết lại những tính năng đã có sẵn.   – Tốc độ phát triển sản phẩm: Phát triển sản phẩm với CLI tốn ít thời gian hơn sử dụng GUI based tools.   – Tốc độ sử dụng: Có thể bạn không tin nhưng bạn thực sự có thể làm các công việc của mình nhanh gọn với các câu lệnh. Thường thì các GUI-based tools sẽ cần sự kết hợp của chuột và bàn phím. Còn command line thì chỉ cần bàn phím là đủ.   – Siêu năng lực: Bạn có thể kết hợp các câu lệnh để làm nhiều việc thú vị, hoàn thành công việc nhanh gọn và hiệu quả hơn.   Trong những nội dung tiếp theo của series học Linux này, mình sẽ cùng nhau tìm hiểu những câu lệnh thông dụng mà lập trình viên nên biết và sử dụng thành thạo, đầu tiên là làm việc với tập tin.     Trong Linux, mọi thứ đều được hiểu là file, cả thư mục cũng là một loại file có một đặc điểm riêng thôi. Cho nên việc học những câu lệnh để xem, tìm kiếm, so sánh file là cần thiết.   Các lệnh sử dụng để xem file  Lệnh “file”  Với một tập tin, việc xem định dạng của tập tin đó trước tiên có thể giúp chúng ta bước đầu xác định đó có phải là cái mình muốn tìm hay không.   Có nhiều loại định dạng như text, code, database, …      Lệnh file giúp xem kiểu định dạng của file       Trong ví dụ trên là một số kiểu định dạng khác nhau của file: zip, directory, ASCII text.   Những tập tin có kết quả trả về từ câu lệnh “file” có chứa “text” thì bạn có thể sử dụng những câu lệnh tiếp sau đây để xem chúng.   Lệnh “cat”      Lệnh cat giúp xem nội dung của một file.       Nếu muốn hiển thị số dòng, bạn có thể sử dụng thêm lựa chọn -n      Lệnh “cat” sẽ thường được dùng để mở một file nhỏ, vì khi mở file với cat thì nếu file lớn quá sẽ có thanh kéo hiện lên và để xem hết file thì bạn cần scroll ngược lên trên để xem nội dung(hình bên dưới).   Do đó, với file có kích thước lớn, việc chia trang để xem với hai câu lệnh more, less sẽ tiện hơn.      Lệnh “more” và “less”      Lệnh more và less giúp hiển thị nội dung file theo từng trang    Vì sao có cả more và cả less nhỉ? Trong khi hai câu lệnh này về cơ bản là trả ra kết quả như nhau.   Dành cho ai có thắc mắc này thì câu lệnh less là phiên bản nâng cấp của câu lệnh more. (Tuy nhiên, tính năng nâng cao này mình sẽ không tìm hiểu ở đây. Cho nên, tạm thời mình cứ tạm xem hai câu lệnh này là giống nhau đi nhé.)   Bên cạnh đó, câu lệnh more hoạt động như thế nào thì mời bạn có thể xem lại nội dung trong bài “Chuyển hướng câu lệnh trong Linux” để hiểu rõ hơn nhé.   Dưới đây là kết quả của câu lệnh cat text.txt | more    Bên trên giúp mình xem nội dung với chế độ phân trang với more, less.   Ngoài ra, bạn có thể sử dụng các câu lệnh để điều khiển việc hiển thị một phần nội dung với head, tail hay là hiển thị những thông tin thống kê như số dòng, số từ, số ký tự với lệnh wc   Lệnh “head” và “tail”      Lệnh head và tail giúp hiển thị phần đầu hay phần cuối nội dung của file    Mỗi phần nội dung mặc định là 10 dòng. Nếu muốn điều chính số dòng, sử dụng lựa chọn -n.   Ví dụ: Giả sử đây là toàn bị nội dung của file text.txt    “head”     Lệnh head giúp hiển thị phần đầu nội dung của file       “tail”     Lệnh tail giúp hiển thị phần cuối nội dung của file       hiển thị với số dòng với -n  Muốn hiển thị với số dòng cụ thể nào đó, có thể sử dụng kết hợp với option -n      Lệnh “wc”      Lệnh wc giúp hiển thị các thông tin thống kê của nội dung file, như số dòng, số từ, số ký tự       Kết quả của lệnh wc text.txt ở trên là file có 34 dòng, 249 từ và 898 ký tự   898 ký tự cũng có thể hiểu là 898 bytes. Vì 1 character = 1 byte   Các options   Lệnh “wc” có những lựa chọn như:   -c: hiển thị số bytes   -m: hiển thị số ký tự   -l: hiển thị số dòng   -w: hiển thị số từ   Các lệnh sử dụng để tìm kiếm file  Khi muốn tìm một file nào đó mà bạn chỉ nhớ tên của nhó chứ không nhớ chính xác là nó ở đây, bạn có thể sử dụng command locate hoặc find để tìm trong hệ thống các file của máy.   Lệnh “locate”   Câu lệnh locate sẽ tìm kiếm file trong một database có sẵn.   Mỗi ngày, một cơ sở dữ liệu(database) sẽ tự động tạo và chứa danh sách các tập tin và thư mục trong hệ thống. Câu lệnh locate sẽ giúp bạn tìm kiếm trong cơ sở dữ liệu này.   Nếu bạn còn tò mò nữa thì cơ sở dữ liệu này nằm ở “/var/db/locate.database”   Ví dụ mình muốn tìm cuốn sách của mình với “Developers.pdf”      Câu lệnh locate sẽ trả về đường dẫn tuyệt đối. Bạn cũng có thể dùng option “-c” để đếm số file được tìm thấy trong database      Với câu lệnh locate, kết quả được trả ra khá nhanh chóng do bạn ấy tìm trên một cơ sở dữ liệu có sẵn.   Tuy nhiên, locate có nhược điểm lớn đó là “Data đôi khi sẽ không chính xác”   Lý do 1:  khi tìm kiếm với locate, user đi tìm sẽ là “nobody”, điều này đồng nghĩa với nó không thể tìm kiếm được những nơi mà user nobody hay group nobody không có quyền đọc thì những files này sẽ không được tìm thấy.      Ví dụ: Ở hình trên, thực hiện tìm “cli-interface.png” trong folder  “example-linux/file-formats”, và locate không thể tìm ra file này, lý do là vì nobody không có quyền đọc file này.   Bài “Quản lý hệ thống tập tin trong Linux” có giải thích về các quyền này, bạn có thể ghé đọc thêm.   Lý do 2:  cơ sở dữ liệu được tạo mới mỗi ngày, do đó nếu file được tạo sau đó thì cũng sẽ không được tìm thấy vì chưa có trong cơ sở dữ liệu. Lúc này cần phải cập nhật lại cơ sở dữ liệu bằng tay với câu lệnh   “sudo /usr/libexec/locate.updatedb”.   Ví dụ: Mình muốn tìm file hello-training.sh ngay trong thư mục mình vừa mới tạo.      Kết quả là không tìm thấy dù cho nobody có quyền thực thi như ở trên hình. Lý do mình đã nói ở trên là do những file này được tạo sau nên trong cơ sở dữ liệu của locate chưa có data, do đó tìm không thấy.   Thực hiện cập nhật cơ sở dữ liệu(chạy hơi lâu, vì là của toàn hệ thống), rồi thì tìm lại mới có thể tìm thấy được.    Vì cái sự bất tiện của locate như thế, nên đã đến lúc bạn cần biết thêm về câu lệnh tìm kiếm chủ động hơn, là find   Lệnh “find”  Câu lệnh find sẽ tìm kiếm trực tiếp trên toàn hệ thống, do đó nó sẽ tốn nhiều thời gian, nhưng nó sẽ tìm kiếm chính xác hơn.   Cú pháp:      find [vị trí bắt đầu] [các lựa chọn, đối số]    Ví dụ: Mình tìm file text.txt ở thư mục hiện tại với câu lệnh find      Một vài gợi ý để việc tìm với find nhanh hơn:  1. Hạn chế tìm từ root /, hoặc folder có số lượng file quá lớn, khoanh vùng phạm vi tìm kiếm càng hẹp càng đỡ tốn thời gian.   2. Xử lý output để có kết quả trả về sạch sẽ hơn, bạn có thể tạm thời trả tất cả error về /dev/null black hole với 2&gt;.   Ví dụ:      Về black hole /dev/null, nó là một null device của unix-system, hay còn gọi là black hole hay bit bucket nơi tất cả các data đều được ghi thành công tuy nhiên sẽ không có dữ liệu nào được ghi lại. Bạn có thể tưởng tượng nó như một cái hố sâu không đáy vậy(đọc thêm ở đây).   null device này thường được sử dụng để loại bỏ các đầu ra không mong muốn, trong tình huống này là các output về warning permission, và sử dụng kết hợp với câu lệnh chuyển hướng như ở trên.   (Đọc thêm về 2&gt; trong cách chuyển hướng câu lệnh trong Linux ở “Chuyển hướng câu lệnh trong Linux”.)   3. Sử dụng một số lựa chọn để thu hẹp loại file tìm kiếm.   Những lựa chọn của find là:   -name: tìm kiếm với tên   -delete: tìm xong rồi xóa luôn   -ls: hiển thị file tìm được ở dạng long list   -exec { } \\; thực thi một câu lệnh gì đó với kết quả tìm kiếm. Ví dụ hiển thị kết quả ở với more sẽ là: -exec more { } \\;   Ví dụ:      Các lệnh sử dụng để so sánh file   Khi làm việc với file, việc cần so sánh hai file có giống nhau hay không, nếu khác nhau thì khác nhau như thế nào rất phổ biến. Mời bạn làm quen với hai câu lệnh giúp bạn công việc này “cmp” và “diff”   Lệnh “cmp”  Nếu chỉ muốn xem hai file có khác nhau không, thì câu lệnh cmp là đủ.   Nếu hai file hoàn toàn giống nhau, câu lệnh trả về rỗng, nếu khác nhau sẽ trả về một số thông tin về sự khác nhau này.      Lệnh “diff”  Nếu muốn xem sự khác nhau giữa hai file là gì, sử dụng câu lệnh diff      Kết quả ở trên ý nói: “Nếu bạn thay đổi dòng test.txt ở file list.txt thành test2.txt thì kết quả sẽ file text2.txt”   Còn 17c17 có nghĩa là: thay đổi(c) dòng 17 ở file đầu tiên để giống với dòng 17 của file số hai.     Nội dung bài blog này đến đây tạm hết rồi, tụi mình đã tìm hiểu thêm về CLI và một số câu lệnh cần dùng khi làm việc với file.   Trong bài viết tiếp theo của series “Làm quen Linux giành cho lập trình viên”, sẽ là tìm hiểu thêm về “Shell Variables và Permission” nhé.   Hẹn gặp các bạn trong bài viết sau.   Nếu bạn thích có thể like fanepage này để theo dõi bài viết mới. Trên đây mình cũng hay đăng các bài viết ngắn về kỹ thuật, kỹ năng ấy.  ","categories": ["linux"],
        "tags": [],
        "url": "/linux/gioi-thieu-ve-cli-va-mot-so-cau-lenh-lam-viec-voi-file-trong-linux/",
        "teaser": null
      },{
        "title": "Điều gì xảy ra khi chạy một chương trình JavaScript?",
        "excerpt":"   Mọi thứ trong JavaScript diễn ra bên trong một “Execution Context”(ngữ cảnh thực thi)    Có hai giai đoạn trong “Execution Context” gồm:   – Giai đoạn “Memory Creation” (cấp phát bộ nhớ): là lúc tất cả các biến và hàm được cấp phát bộ nhớ dưới dạng key: value.   Một tên khác cho phần này là “Variable Environment”   – Giai đoạn “Code Execution” (thực thi code): là lúc code được thực thi theo thứ tự từ trên xuống dưới, từng dòng một.   Một tên khác cho phần này là “Thread of Execution”   Vì thế:      JavaScript is a synchronous single-threaded language      Giả sử có chương trình tính bình phương như sau:   1. let n = 2; 2. function square(num) { 3. \tlet ans = num. * num; 4. \treturn ans; 5. } 6. const square2 = square(n); 7. const square4 = square(4);   Khi chương trình JS khởi chạy, một execution context ở global sẽ được tạo.   Ở giai đoạn “Memory Creation Phase”, bộ nhớ được cấp cho tất cả các biến và các hàm.   Chương trình bắt đầu đọc từ trên xuống dưới và cấp bộ nhớ:   – Dòng 1 cấp biến n với undefined   – Dòng 2 cấp cho hàm square bộ nhớ cho toàn bộ nội dung của nó,   – Dòng 6 cấp biến square2 với undefined   – Dòng 7 cấp biến square4 với undefined      Tiếp tục qua giai đoạn “Code Execution”, code sẽ được thực thi theo thứ tự:   – Dòng 1, gán 2 cho biến n   – Dòng 2 đến 5 bỏ qua vì không có gì để thực thi   – Dòng 6, hàm square(2) được gọi, một execution context giành riêng cho hàm này được tạo, mình tạm gọi là “square execution context”   – Giai đoạn Memory Creation Phase của “square execution context”, cấp bộ nhớ cho num và ans      – Giai đoạn Code Execution của “square execution context”, thực thi:   – Dòng 2, num được gán giá trị là 2 từ đầu vào khi gọi hàm square(n)   – Dòng 3, ans được gán giá trị 2 * 2, là 4.   – Dòng 4, trả về giá trị của ans cho global execution context ở dòng số 6, là nơi gọi hàm square(n). Sau khi trả về giá trị, toàn bộ square execution context bị xóa đi.      – Dòng 7, hàm square(4) được gọi, một execution context giành riêng cho hàm này được tạo, mình tạm gọi là “square 4 execution context”   – Hai giai đoạn tương tự như khi gọi square(2) ở trên   – Dòng 4, trả về giá trị của ans cho global execution context ở dòng số 7, là nơi gọi hàm square(4)      Quá trình ở trên thường được gọi là call stack   Mỗi execution context được tạo sẽ được bỏ vào(push) vào ngăn xếp(stack)   Mỗi execution context bị xóa sẽ được lấy ra khỏi(pop) ngăn xếp(stack)         Call Stack maintain the “order of execution” of execution context    Bạn có thể trực tiếp xem được callstack của chương trình với devtools của Chrome. Hình minh họa sau được mình lấy bằng cách chạy chương trình trên với breakpoint ở dòng số 4 trong hàm square khi gọi với square(n)      Call Stack còn có nhiều tên tương tự khác như là: “Execution Context Stack”, “Program Stack”, “Control Stack”, “Runtime Stack”, “Machine Stack”   Đây chính là cách JS Engine thực thi code.   (Ref: https://www.youtube.com/watch?v=iLWTnMzWtj4)  ","categories": ["js"],
        "tags": [],
        "url": "/js/dieu-gi-xay-ra-khi-chay-mot-chuong-trinh-javascript/",
        "teaser": null
      },{
        "title": "Hoisting trong JavaScript",
        "excerpt":"   Điều khiến JavaScript khó hiểu với những người mới hay chuyển từ ngôn ngữ khác qua chính là JavaScript cho phép sử dụng biến và hàm ngay cả trước cả khi bạn khai báo chúng.   Ví dụ ở đoạn code này:   1. console.log(a) 2. aFunction() 3.  4. var a = 3; 5. function aFunction() { 6. \tconsole.log(\"Hello\") 7. }   Chương trình khi chạy không báo lỗi gì và kết quả in ra ở Console là:   undefined Hello  Lưu ý ở đây mình dùng var , nếu sử dụng let hay const thì sẽ bị lỗi Uncaught ReferenceError: x is not defined vì với let hay const của ES6 thì chỉ sau khi bạn khai báo mới sử dụng được chúng.   Vậy điều gì đã khiến bạn có thể truy cập vào các biến và hàm ngay cả khi chúng chưa được khai báo?   Chính là cơ chế Hoisting trong JavaScript.   Vậy cụ thể thì hoisting là như thế nào?   Bạn có nhớ hai giai đoạn của một “Execution Context” là Memory Creation và Code Execution đã được giới thiệu trong bài “Điều gì xảy ra khi chạy một chương trình JavaScript” không?   Hoisting trong JavaScript được thực hiện trong giai đoạn cấp phát bộ nhớ – Memory Creation. Các biến và hàm sẽ được cấp bộ nhớ trước khi code được thực thi, biến được cấp bộ nhớ với giá trị undefined , còn hàm thì sẽ được cấp bộ nhớ cho toàn bộ nội dung bên trong hàm f aFunction().   Vì thế, bước vào giai đoạn thực thi Code Execution, thì các giá trị này đã có sẵn để sử dụng, nên gọi các hàm và biến này đã được hoist lên trước khi code được thực thi.     Bạn có thể kiểm tra trực tiếp trên devTools bằng cách đặt một breakpoint ngay tại dòng số 4, ngay trước khi code của biến và hàm được khai báo.   Khi chương trình chạy, gặp breakpoint dừng lại, hãy kiểm tra tab Global và tìm a , aFunction , tại đây tìm thấy biến a và hàm aFunction đã được cấp phát bộ nhớ và sẵn sàng để sử dụng.      Một lưu ý ở đây, nếu aFunction được khai báo ở dạng biểu thức dưới tên một biến   var aFunction = function() {}   thì aFunction sẽ có giá trị ban đầu là undefined như với một biến bình thường, và chương trình này sẽ báo lỗi.   Hoisting trong JavaScript sẽ dễ gây hiểu nhầm nếu bạn không hiểu về JavaScript Engine nên bạn cần tìm hiểu cơ chế này để dễ debug chương trình của mình nhé.   Thêm nữa, ở phiên bản ES6, cung cấp let và const để yêu cầu bạn chỉ sử dụng biến sau khi đã khai báo chúng nên sẽ tránh được các sử dụng không mong đợi như trên.   Vì thế, bạn nên ưu tiên sử dụng let và const thay thế cho var.   (Ref series Namaste JavaScript)  ","categories": ["js"],
        "tags": [],
        "url": "/js/hoisting-trong-javascript/",
        "teaser": null
      },{
        "title": "CSS trong JS là gì?",
        "excerpt":"CSS trong JS hay CSS-in-JS là một thuật ngữ mô tả việc viết code style CSS trong code JS, tức viết vào file .js , .jsx thay vì viết code CSS vào file .css như bình thường.   CSS trong JS ra đời khi nào?   CSS-in-JS ra đời khi mà trang web ngày càng phức tạp và việc duy trì tất cả các CSS của toàn bộ hệ thống trang web (code base lớn) trở nên khó khăn.   Vì tất cả CSS sẽ nằm chung trong một scope global document (hay global scope selectors) gây nhiều xung đột (khi trùng tên class, id) và việc ghi đè CSS trở nên khó khăn hơn (ghi đè nhiều lớp, sử dụng !important, …) .   Thêm vào đó xu hướng component-based development (hay component driven development) ngày càng phát triển với React khiến việc style từng thành phần (component) càng trở nên cấp thiết.   CSS-in-JS đã giúp giải quyết các vấn đề này như thế nào?   CSS-in-JS sẽ trích xuất CSS theo từng component thay vì theo document như CSS.   styled-components là một thư việc CSS-in-JS được sử dụng phổ biến nhất. Ngoài ra còn có Aphrodite, Radium, Glamorous, JSS   Một ví dụ với thư viện Styled Component (styled-components):   Tạo Text mặc định sẽ nhận thẻ p, với font size là 16px.   import styled from 'styled-components'  const Text = styled.p`   font-size: 16px; `   và truyền thẻ h2 vào thuộc tính “as” để Text sử dụng:   &lt;Text as='h2'&gt;This is a H2 heading&lt;/Text&gt;  Khi đó code CSS sẽ tự động tạo một class duy nhất và được gắn vào DOM như sau:  &lt;style&gt;   .gZxhj123 {     font-size: 16px;   } &lt;/style&gt;   Ưu điểm khi sử dụng CSS-in-JS   → Code ngắn gọn và nhất quán hơn   → Giảm xung đột CSS   → CSS dynamic với props   → Kế thừa style   → Cú pháp SASS giúp style dễ dàng với pseudo element và pseudo class   → Dễ dàng thay đổi theme với ThemeContext   → Tự động tạo prefix cho class CSS, không sợ bị trùng nhau   → Có thể viết unit test cho CSS   Nhược điểm khi sử dụng CSS-in-JS   → Sẽ không phù hợp với người chưa biết JS   → Tốn thời gian làm quen với thư viện, gây khó khăn cho người mới   → Khó khăn khi muốn debug bằng tên class   → Hiệu suất không tốt bằng CSS, do sử dụng nhiều thẻ style hơn, nặng code base hơn     Trên đây là vài note tóm tắt mình tìm hiểu được về CSS-in-JS.   Với mình, nếu dự án nhỏ, và làm việc với các bạn chưa có nhiều kinh nghiệm về JS, về OOP, … thì mình sẽ chọn CSS truyền thống (hoặc SASS – vẫn dynamic được) vì các bạn sẽ dễ tiếp cận hơn.   Còn dự án vừa và lớn, tính kế thừa cao, nhiều components, dev nhiều kinh nghiệm hơn thì mình sẽ chọn các thư viện CSS-in-JS như styled-components.   Bạn thấy sao về CSS-in-JS? Nếu được chọn thì bạn sẽ sử dụng styled-components hay CSS truyền thống để style cho ứng dụng React của bạn?  ","categories": ["js"],
        "tags": [],
        "url": "/js/css-trong-js-la-js/",
        "teaser": null
      },{
        "title": "Khai báo biến với var, let và const trong JavaScript",
        "excerpt":"   Ba cách giúp bạn khai báo biến trong JavaScript là sử dụng từ khóa var, let, const.   Bài viết này mình sẽ tóm tắt lại sự khác nhau của ba cách khai báo này và cách sử dụng.   Đồng thời cũng làm quen với các loại scoped như local scoped, global scoped, block scoped, khái niệm Temporal Dead Zone, và một số loại lỗi hay gặp khi làm việc với các từ khóa này như SyntaxError,  ReferenceError, TypeError   var và let   var   Thường thì sẽ so sánh var và let trước, vì cả hai đều dùng để khai báo một biến có thể thay đổi giá trị được.   Ví dụ:   var a = 1; let b = 2:   Khi khai báo với var, biến của bạn sẽ được hoisting trước khi gán giá trị, tức là biến này được định nghĩa ngay trước khi chương trình thực thi, trong giai đoạn Memory Creation trong ngữ cảnh thực thi.   Nếu chưa rõ bạn có thể đọc bài “Điều gì xảy ra khi chạy chương trình JS” và bài “Hoisting trong JavaScript”   1. console.log(a); 2. var a = 1; 3. console.log(a)   ở đây chương trình sẽ in ra giá trị undefined ở dòng số 1, và in ra số 1 ở dòng số 3   Bên cạnh đó, biến được khai báo với var sẽ nằm trong global scoped, chỉ khi khai báo với var trong hàm mới có scope là function scoped hay local scoped.   Đây là lý do vì sao nếu bạn khai báo như trên có thể dùng window.a hay this.a (với this này là window) để truy cập vào a vì nó nằm ở global scope.   let   Khi khai báo với let, biến của bạn và vẫn được hoisting, tuy nhiên biến này được lưu trong một khu vực gọi là Temporal Dead Zone và làm cho nó không truy cập được trước khi khai báo.   Ví dụ:   console.log(b); let b = 3;      ở đây chương trình sẽ bị lỗi ReferenceError không thể truy cập b trước khi được khởi tạo   Và biến được khai báo với let sẽ nằm trong block scoped   Ví dụ biến b dưới đây nằm trong một block scoped của if với {} và không thể sử dụng ở bên ngoài.        Một điểm khác nhau nữa của var và let nữa là việc khai báo hai biến cùng tên hay re-declaration. Có thể khai báo hai biến cùng tên với var, nhưng với let làm như thế sẽ báo lỗi Syntax Error và không cho phép chương trình thực thi.   Có thể khai báo hai biến cùng tên với var:      Nhưng với let sẽ báo lỗi Syntax Error và không cho phép chương trình thực thi.      let, var và const   let và var cho phép khai báo tên một biến mà không cần giá trị khởi tạo, còn const chỉ cho phép khai báo với một giá trị ban đầu.   Ví dụ:   var a;  let b; const c = 1;   Nếu không có giá trị khởi tạo cho const bạn sẽ bị lỗi SyntaxError.     Thêm nữa, bạn có thể thay đổi giá trị cho biến khai báo với let hay var, nhưng bạn không thể thay đổi giá trị cho biến khai báo với const.   Nếu bạn gán giá trị cho một biến khai báo với const bạn sẽ bị lỗi TypeError      Cuối cùng let và const là cú pháp của ES6.   Cách sử dụng var, let, const   Biết khác nhau thế nào rồi thì bạn sẽ sử dụng chúng như thế nào?   const: sử dụng khai báo hằng số, các giá trị không thay đổi trong suốt chương trình, và cố gắng dùng nhiều nhất có thể vì nó chặt chẽ nhất.   let: ưu tiên tiếp theo sau const, cố gắng sử dụng bất cứ khi nào có thể vì let có Temporal Dead Zone giúp bạn không truy cập trước khi khai báo tránh các lỗi về undefined như khi dùng với var   var: không nên dùng, hạn chế tối đa (hiểu để đọc code những chương trình viết với ES5)   Vậy làm sao để tránh lỗi ReferenceError khi sử dụng let?   Tốt nhất là hãy đặt tất cả các khai báo và khởi tạo về biến lên trên cùng của chương trình, module, hàm, scope.   Khi đó biến sẽ được khai báo trước khi sử dụng để đảm bảo bạn không truy cập trước khi nó được khai báo sẽ tránh lỗi trên.   let b = 3; console.log(b);   Chúc các bạn hiểu và tự tin khai báo biến mình cần sử dụng nhé.   (Ref)  ","categories": ["js"],
        "tags": [],
        "url": "/js/khai-bao-bien-voi-var-let-va-const-trong-javascript/",
        "teaser": null
      },{
        "title": "Chơi cùng JavaScript",
        "excerpt":"Khi học JavaScript bạn thử nghiệm các đoạn code nhỏ bằng các cách nào ?   Thử xem bạn đã dùng cách nào trong các cách sau nhé!   Cách 1: Chạy chương trình với browser  Tạo file index.html để chứa code của trang web.   Bạn có thể mở trực tiếp file hoặc “Go Live” với extension “Live Server” trên VSCode.   Cách 1.1: Viết nội dung JS trong thẻ &lt;script&gt;&lt;/script&gt;  File index.html:   &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt;   &lt;head&gt;     &lt;meta charset=\"UTF-8\" /&gt;     &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;     &lt;title&gt;Central Music&lt;/title&gt;   &lt;/head&gt;   &lt;script&gt;     console.log('Hello');   &lt;/script&gt;   &lt;body&gt;   &lt;/body&gt; &lt;/html&gt;   Cách 1.2: Viết nội dung JS file main.js  Viết một file main.js rồi sử dụng làm source, và dùng thuộc tính src của thẻ script truyền đường dẫn đến file main.js để sử dụng   &lt;script src=\"./main.js\"&gt;&lt;/script&gt;   Cách này thì khá cồng kềnh khi muốn thử nghiệm nhanh một đoạn logic nhỏ.  Tuy nhiên sẽ cần thiết nếu bạn thực hành liên quan đến DOM, styles.   Cách này không chia sẻ code online được.   Cách 2: Chạy chương trình với nodejs  Cài nodejs trên máy (thường sẽ có sẵn vì dev thường sử dụng npm)   Chạy lệnh node &lt;filename&gt;.js ở command line để thực thi      Cách này sẽ tiện hơn nếu muốn chạy một chương trình JS nhỏ không liên quan đến DOM.   Một tip được bạn hung.dev chia sẻ là có thể sử dụng gói nodemon để tự động load lại khi mình có chỉnh sửa trên file. Cám ơn nha bạn Hưng ^^   Chạy câu lệnh: npx nodemon example.js để vừa cài gói nodemon vừa thực thi code.   Bạn sẽ thấy dòng “Hello nodemon” bên dưới là code thực thi sau khi code trong file example.js của mình thay đối.      Cách 3: Sử dụng tab “Console” trên trình duyệt Chrome  Sử dụng browser Chrome, mở Console tab và thử nghiệm trực tiếp trên đó.   Cách này sẽ rất tiện khi mình muốn kiểm tra nhanh hay demo nhanh các đoạn code hay cú pháp của JS, vì trình duyệt có tích hợp sẵn để dùng.   Đặc biệt bạn có thể chơi với Web APIs như DOM, …      Cách 4: Sử dụng snippets  Nhờ một comment trên Viblo post, nhắc mình mới nhớ đến bạn này.   Snippets dành cho JavaScript trên Chrome là một công cụ mạnh mẽ giúp bạn lưu một đoạn code JS và chạy trên bất cứ trang nào mà không bị mất code khi reload như khi mình viết ở Console.      Bạn có thể tạo một snippets bằng cách vào Sources &gt; Snippets và chọn “+ New snippet”. Để chạy chương trình, bấm Cmd + Enter hoặc nút Run như trên hình.   Đọc thêm document Snippets ở đây.   Cách 5: Sử dụng editor trên trang w3schools.com  Tương tự cách 1 tuy nhiên có thể thực hiện trên w3schools.com vì trên đây có một editor có sẵn để thử nghiệm.   Dù công cụ này không được hiện đại lắm nhưng việc ôn nhanh kiến thức cơ bản và thử nghiệm ngay tức thì trên trang này cũng rất hữu ích.      Cách 6: Sử dụng javascript.makeup  javascript.markup cũng là một cách để có thể chơi với JS và kết quả cũng khá dễ nhìn.      Cách 7: Các công cụ online giúp viết và chia sẻ chương trình  Một số công cụ online như: JSBin, JSFiddle, Repl.it   Các công cụ này thường yêu cầu tài khoản để lưu và chia sẻ chương trình.   JSBin  https://jsbin.com/      JSField  https://jsfiddle.net/      Replit  https://replit.com/      Playcode.io  https://playcode.io/        Trên đây là một số cách mình biết và hay sử dụng.   Còn bạn thì sao, bạn hay thử nghiệm JS như thế nào?  ","categories": ["js"],
        "tags": [],
        "url": "/js/choi-cung-javascript/",
        "teaser": null
      },{
        "title": "Lexical environment trong JavaScript",
        "excerpt":"Trước khi tìm hiểu về scope, scope chain, hay cả closures, bạn cần hiểu về Lexical Environment.   Đây là một khái niệm nền tảng trong JavaScript.   Execution Context và Callstack  Nhắc lại từ bài “Điều gì xảy ra khi chạy một chương trình JavaScript ?”, mỗi khi chương trình JavaScript thực thi, sẽ khởi tạo ra các “Execution Context”   Và có hai giai đoạn của execution context là “Memory Creation” và “Code Execution”.   Ví dụ có đoạn code sau:   function x () {   var b = 10;   y();    function y () {     var c = 5;   } }  x();   thì sơ đồ mô tả các execution context và callback được tạo với chương trình trên như sau:      Lexical Environment &amp; Scope Chain   Mình đã chọn hình cover cho bài viết này là hình ảnh trái đất nhìn từ ngoài vũ trụ, là điểm tương đồng khi nói về lexical environment. Cùng tìm hiểu nhé!   Lexical là gì?   “Lexical” tiếng anh có nghĩa là sự kết nối từ bên ngoài theo một thứ tự nào đó.   Lexical Enviroment là gì?      “Lexical Environment” của hàm bao gồm local memory của hàm đó cộng với “Lexical Environment” của cha nó.    Ví dụ có hàm y ở trên nằm lồng trong hàm x (y con của x), và hàm x nằm bên trong global scope (x con của global).   Hay còn gọi y is lexically inside the x function. x is lexically inside global.   Ngay khi một “Execution Context” khởi tạo, một “Lexical Environment” cũng đồng thời được khởi tạo.   Cùng xem parent’s lexical environment tương ứng ở ví dụ trên:      Và Lexical Environment sẽ gồm local memory và parent lexical environment được biểu diễn với vòng tròn màu tím bên dưới.      Scope Chain   Nhìn vào hình trên bạn có thấy được cách chương trình tìm kiếm các giá trị của biến không ?   Thứ tự tìm sẽ từ vòng tím của y sang vòng tím của x rồi sang vòng tím của global và vẫn tìm không thấy thì sẽ gặp null và kết thúc quá trình tìm kiếm này.   Giả sử tại vòng tím x không tồn tại c như trên, thì chương trình sẽ tiếp tục tìm kiếm xem ở các vòng tím y, rồi đến global.   Nếu vẫn không tìm thấy sẽ báo lỗi. Nếu có tìm thấy tại đâu trước thì sẽ ưu tiên dùng giá trị tại chỗ đó.   Đây chính là các mà JS Engine tìm kiếm từ trong ra ngoài, gọi là Scope Chain.   Hay nói đơn giản hơn Scope Chain chính là chuỗi nối của các Lexical Environment.   Nếu biến không được tìm thấy ở local memory của execution context thì nó sẽ tiến hành tìm kiểm ở các lexical environment cho đến hết chuỗi thì thôi.   Tổng kết   – Lexical Environment được tạo cùng Execution Context   – Lexical Environment = local memory + parent’s Lexical Environment   – Chain of Lexical Environment gọi là Scope Chain     Vậy còn scope thì sao ? Scope có liên quan đến lexical environment này không ?   Mời các bạn đón đọc bài tiếp theo về scope nhé!  ","categories": ["js"],
        "tags": [],
        "url": "/js/lexical-environment-trong-javascript/",
        "teaser": null
      },{
        "title": "Scope trong JavaScript",
        "excerpt":"   Scope liên quan trực tiếp bởi Lexical Environment bởi scope liên quan đến phạm vi truy cập của biến.   Mời bạn ghé đọc bài viết Lexical Environment trước nếu bạn chưa có dịp đọc nha.   Bài viết này sẽ tìm hiểu thêm về scope và các loại scope trong JavaScript.   Scope là gì?  Scope (tiếng Việt là “phạm vi”) là phạm vi được xác định nơi mà bạn có thể truy cập vào biến.      Scope determines the variables accessibility (visibility)    Các loại scope trong JavaScript  Có 3 loại scope trong JavaScript:   – Block Scope (có từ ES6)   – Function Scope hay Local Scope   – Global Scope     Ở ES5, chỉ có hai scope là Function Scope và Global Scope   – Scope của function gọi là Function Scope   – Scope bên ngoài function gọi là Global Scope, tương ứng với khai báo biến với var   Tức là:   – trong function → biến thuộc Function Scope   – bên ngoài function → biến thuộc Global Scope   Ví dụ:   // a in global scope var a = 5;  function x () {   // b in function x scope   var b = 10;   console.log(b); }  console.log(a); // 5 x() // 10   Hình bên dưới minh họa hai loại scope này:      Chiếc khung màu đen thể hiện phạm vi của từng loại scope.   – Khung bọc màu tím là phạm vi của hàm x, hay function x scope.   – Khung bọc màu xanh là phạm vi của global, hay global scope.     Ở ES6, JavaScript giới thiệu thêm hai cách khai báo biến với let, const (đọc thêm về var, let, const mình ở đây) đi kèm đó là một loại scope mới – block scope.   Khi bạn khai báo một biến với let, const trong một block, được hiểu là bọc trong một cặp {} , thì biến này nằm trong block scope đó.   Ví dụ:   var a = 5; let b = 10;  function x() {   let c = 15;    if (c &gt; 5) {     let d = 0;     console.log('hello from d');   } }  x();   Thử đặt một breakpoint và quan sát trên debugger:      Ở Global có a là 5, Local có c là 15, Block có d là 0 tương ứng với 3 scopes mình đã đề cập.   Vậy b đang ở đâu? Bạn có thấy b đang thuộc một nơi gọi là Script ?   Thực ra thì b vẫn đang thuộc global scope. Chỉ là vì nó được khai báo với let và được nằm trong một vùng nhớ riêng gọi là Temporary Dead Zone (TDZ) nên được mô tả khác trên debugger ở một tab gọi là Script. (đọc thêm ở blog này)   Bạn có thể chứng minh được b vẫn thuộc global scope vì tại dòng được debug, vẫn có thể truy cập vào b được. Tuy nhiên bạn không thể truy cập vào b từ window , ví dụ window.b   Hình bên dưới minh họa ba loại scope ở ví dụ trên:     ","categories": ["js"],
        "tags": [],
        "url": "/js/scope-trong-javascript/",
        "teaser": null
      },{
        "title": "Export a docx file in Django application",
        "excerpt":"   Exporting file is a commonly used feature that allows users to retrieve their data.   Throughout this series, I will outline various methods for exporting files in a Django application. The exported file formats may include docx, csv, zip, or pdf.   In this initial post of the series, I will introduce the process of exporting a docx file. We will be utilizing a library called python-docx to achieve this.   python-docx  Introduction  python-dox is a Python library for creating and updating Microsoft Word (.docx) files.   Please checkout the official documentation here.   The fundamental concept behind python-docx is to create a document object to which you can add content such as paragraphs, headings, page breaks, tables, pictures and styling options like bold or italic.   Example:  from docx import Document document = Document() document.add_paragraph('Lorem ipsum dolor sit amet.')   Installing  To install python-docx, run command:   pip install python-docx   Export view   To enable the download of a docx file through an API, we typically create a view that allows only the GET method.   class ExportDocx(APIView):     def get(self, request, *args, **kwargs):         # create an empty document object         document = Document()          # save document info         buffer = io.BytesIO()         # save your memory stream         document.save(buffer)         # rewind the stream to a file         buffer.seek(0)          # put them to streaming content response         # within docx content_type         response = StreamingHttpResponse(             # use the stream's content             streaming_content=buffer,             content_type='application/vnd.openxmlformats-officedocument.wordprocessingm'         )          response['Content-Disposition'] = 'attachment;filename=Test.docx'         response[\"Content-Encoding\"] = 'UTF-8'          return response   Once we have created an empty document, the next step is to save it and send it to the response.   python-docx provides a document.save() method that acceps a stream instead of a file name.   We can initialize an io.BytesIO() object to store the document information and then send that to the user.   To handle large data and return a response, we use the StreamingHttpResponse function and set the content type to application/vnd.openxmlformats-officedocument.wordprocessingm for docx files.   Build document content   After enable to download an empty docx file, the next step is to begin building the content for the docx. It is recommended to refer to the python-docx documentation for detailed instructions.   To add header text, you can use the .add_heading() method, and to add paragraphs, you can use the .add_paragraph() method.   If you wish to style the text, you can add a run to a paragraph.   As an example, I have created a build_document() method which builds all the content in the document.   def build_document(self):     document = Document()      # add a header     document.add_heading(\"This is a header\")      # add a paragraph     document.add_paragraph(\"This is a normal style paragraph\")      # add a paragraph within an italic text then go on with a break.     paragraph = document.add_paragraph()     run = paragraph.add_run()     run.italic = True     run.add_text(\"text will have italic style\")     run.add_break()      return document   I will then replace the code that creates an empty document in the view with the following:   document = self.build_document()   The current export result is shown below:      Advance - build html content   Essentially, I can export a docx file with content in it.   To begin with, I simply add the content within a paragraph:   # add paragraph for html content document.add_paragraph(\"&lt;p&gt;Nice to see Prep note 2&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Prep note 2 content 1&lt;/li&gt;&lt;li&gt;Prep note 2 content 2&lt;/li&gt;&lt;/ul&gt;\")   However, there was a strange display as following:      I need to find a way to convert HTML content to plain text while preserving basic formatting such as italics, bolding, and bullet points. Here’s an example:   Nice to see Prep note 2     ●    Prep note 2 content 1     ●    Prep note 2 content 2   After research around, I discovered a Python built-in library called html.parser - Simple HTML and XHTML parser.   Followed an examle to create a class called DocumentHTMLParser to handle it, as shown below:   class DocumentHTMLParser(HTMLParser):     \"\"\"     Document Within HTML Parser     \"\"\"     def __init__(self, document):         \"\"\"         Override __init__ method         \"\"\"         HTMLParser.__init__(self)         self.document = document         self.paragraph = None         self.run = None      def add_paragraph_and_feed(self, html):         \"\"\"         Custom method where add paragraph and feed         \"\"\"         self.paragraph = self.document.add_paragraph()         self.feed(html)      def handle_starttag(self, tag, attrs):         \"\"\"         Override handle_starttag method         \"\"\"         self.run = self.paragraph.add_run()          if tag in [\"ul\"]:             self.run.add_break()         if tag in [\"li\"]:             self.run.add_text(u'        \\u2022    ')      def handle_endtag(self, tag):         \"\"\"         Override handle_endtag method         \"\"\"         if tag in [\"li\"]:             self.run.add_break()      def handle_data(self, data):         \"\"\"Override handle_data method\"\"\"         self.run.add_text(data)   The code above involves overriding a function in the HTMLParser class and using the paragraph’s run to customize its style based on the starting tag.   If a tag needs to break on the end, we add a break for it.   I then utilized this custom class in my view to handle the HTML content:   def build_document(self):     \"\"\"Build content document\"\"\"     document = Document()     doc_html_parser = DocumentHTMLParser(document)      # add a header     document.add_heading(\"This is a header\")      # add a paragraph     document.add_paragraph(\"This is a normal style paragraph\")      # add a paragraph within an italic text then go on with a break.     paragraph = document.add_paragraph()     run = paragraph.add_run()     run.italic = True     run.add_text(\"text will have italic style\")     run.add_break()      # with html content, call method add_paragraph_and_feed tui build content     html_content = \"&lt;p&gt;Nice to see Prep note 2&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Prep note 2 content 1&lt;/li&gt;&lt;li&gt;Prep note 2 content 2&lt;/li&gt;&lt;/ul&gt;\"     doc_html_parser.add_paragraph_and_feed(html_content)   Here’s the resulting docx file from the HTML content:    Unit Test   On the backend side, unit testing is a crucial component to protect your application. In my project, each pull request requires a minimum of 80% code coverage through testing, making unit testing a mandatory part of the development process. To aid in writing unit tests, we utilize libraries such as factory_boy and pytest. If you’re unfamiliar with these libraries, you can check out the links provided before proceeding.   In this section, I won’t be covering how to use or write unit tests for a Django application. Instead, I will ensure that the exported docx file has the correct name and type, and that the file contains the expected content and style.   Test content response   I performed some basic checks on the exported file, such as verifying the response status, content type, and file name.   def test_export_docx_general(self):     \"\"\"     Ensure general content like     status response, content type, file name exported correctly     \"\"\"     response = self.client.get(reverse(\"export_docx\"))     import pdb;pdb.set_trace()   By using import pdb;pdb.set_trace() after making the GET request in the unit test, I am able to inspect the current data.   Here is an example of what it looks like:   &lt;django.http.response.StreamingHttpResponse object at 0x7fc392a61990&gt; (Pdb) response.status_code 200 (Pdb) response.streaming_content &lt;map object at 0x7fc3927aadd0&gt; (Pdb) response.streaming_content.__dir__() ['__getattribute__', '__iter__', '__next__', '__new__', '__reduce__', '__doc__', '__repr__', '__hash__', '__str__', '__setattr__', '__delattr__', '__lt__', '__le__', '__eq__', '__ne__', '__gt__', '__ge__', '__init__', '__reduce_ex__', '__subclasshook__', '__init_subclass__', '__format__', '__sizeof__', '__dir__', '__class__'] (Pdb) response.get(\"Content-Type\") 'application/vnd.openxmlformats-officedocument.wordprocessingm' (Pdb) response.get(\"Content-Disposition\") 'attachment;filename=Recipe_Pho_2021-04-15-14-34-09.docx'   As seen in the previous code block, I can continue writing unit tests to check the exported file’s general content, such as the file’s content type, status code, and name.   def test_export_docx_general(self):     \"\"\"     Ensure general content like     status response, content type, file name exported correctly     \"\"\"     response = self.client.get(reverse(\"export_docx\"))     assert response.status_code == status.HTTP_200_OK     assert response.get(\"Content-Type\") == \\         \"application/vnd.openxmlformats-officedocument.wordprocessingm\"     filename = response.get(\"Content-Disposition\").split(\"=\")[1]     assert filename == \"Test.docx\"   Please note the response.streaming_content object above which appears as a map object without any data for testing. Initially, I was unsure about how to test the content and style of the document accurately. Despite researching various options, I could not find a suitable solution. Eventually, I came up with a solution for testing the built document myself, which is as follows:   Test document content   I have created a function in the code called build_document to build the document, which is now ready for testing:   def build_document(self):     \"\"\"Build content document\"\"\"     document = Document()     doc_html_parser = DocumentHTMLParser(document)      # with html content, call method add_paragraph_and_feed tui build content     html_content = \"&lt;p&gt;Nice to see Prep note 2&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Prep note 2 content 1&lt;/li&gt;&lt;li&gt;Prep note 2 content 2&lt;/li&gt;&lt;/ul&gt;\"     doc_html_parser.add_paragraph_and_feed(html_content)   My solution was to directly call this function for testing on a mocked view.   Here’s how it appears in the test function:   def test_build_document_for_docx(self):     \"\"\"Ensure document built content and style correctly\"\"\"     # inline import just for you know where they are     from django.http import HttpRequest     from rest_framework.request import Request as DRFRequest      # mock drf request     request = HttpRequest()     request.method = 'GET'     drf_request = DRFRequest(request)     drf_request.user = self.user      # mock view with request     view = ExportRecipesDocx()     view.request = request      # call function in view directly     document = view.build_document()     import pdb;pdb.set_trace()   Once again, I checked the document profile. As an example, I just have a personal curiosity and love to explore what they are 🥰.   (Pdb) document &lt;docx.document.Document object at 0x7fd5e65140a0&gt; (Pdb) document._body.paragraphs [&lt;docx.text.paragraph.Paragraph object at 0x7fd5e5d5fb50&gt;] (Pdb) document._body.paragraphs[0].runs [&lt;docx.text.run.Run object at 0x7fd5e5e419d0&gt;, &lt;docx.text.run.Run object at 0x7fd5e5eba6d0&gt;, &lt;docx.text.run.Run object at 0x7fd5e5eba410&gt;, &lt;docx.text.run.Run object at 0x7fd5e5eba3d0&gt;] (Pdb) document._body.paragraphs[0].runs[0].text 'Nice to see Prep note 2\\n' (Pdb) document._body.paragraphs[0].runs[0].style.name 'Default Paragraph Font' (Pdb) document._body.paragraphs[0].runs[0].style.priority 1 (Pdb) document._body.paragraphs[0].runsp[1].text   In my current build_document method, I create a paragraph and add some runs to it, while also inserting breaks where necessary based on the start and end tags of the HTML.   Below is the final version of my unit test for checking the document’s content and styles:   def test_build_document_for_docx(self):     \"\"\"Ensure document built content and style correctly\"\"\"     # mock request and view initialize like above code     # ...     # call function in view directly     document = view.build_document()      paragraphs = document._body.paragraphs     assert len(paragraphs) == 1     assert paragraphs[0].style.name == \"Normal\"     assert paragraphs[0].style.priority is None     assert [         'Nice to see Prep note 2',         '\\n',         '        •    Prep note 2 content 1\\n',         '        •    Prep note 2 content 2\\n'     ] == [item.text for item in paragraphs[0].runs]     assert {None} == {item.italic for item in paragraphs[0].runs}     assert {None} == {item.bold for item in paragraphs[0].runs}   Exporting files in a Django app is a fascinating process, and Python has several libraries that are useful for handling content formats.   Final word  In this article, we discussed a straightforward example of exporting docx files within a Django app.  ","categories": ["django"],
        "tags": [],
        "url": "/django/export-docx-in-django/",
        "teaser": null
      },{
        "title": "Export Multiple CSVs file into a ZIP in Django Application",
        "excerpt":"   In this next installment of the Django export series, I will be demonstrating how to create a zip file containing multiple CSV files. Throughout the post, we will explore various methods, providing you with a range of options to consider for your own project.   Models example  Let’s consider a basic library system in which a book can be associated with multiple libraries.   The corresponding models are structured as follows:   class Library(models.Model):     name = models.TextField()   class Book(models.Model):     title = models.TextField()     libraries = models.ManyToManyField(         null=True,         blank=True,         to='Library',         related_name='books'     )   Our objective is to export a zip file that contains several CSV files, each one representing a library and displaying a list of books available in that library.   Export view   As is typical when creating a download API, we will create a view that only allows the GET method.   import csv, io, zipfile from wsgiref.util import FileWrapper from django.http import StreamingHttpResponse from rest_framework.views import APIView  class ExportZip(APIView):     def get(self):         csv_datas = self.build_multiple_csv_files()          temp_file = io.BytesIO()         with zipfile.ZipFile(              temp_file, \"w\", zipfile.ZIP_DEFLATED         ) as temp_file_opened:             # add csv files each library             for data in csv_datas:                 data[\"csv_file\"].seek(0)                 temp_file_opened.writestr(                     f\"library_{data['library_name']}.csv\",                     data[\"csv_file\"].getvalue()                 )          temp_file.seek(0)          # put them to streaming content response         # within zip content_type         response = StreamingHttpResponse(             FileWrapper(temp_file),             content_type=\"application/zip\",         )          response['Content-Disposition'] = 'attachment;filename=Libraries.zip'         return response      def build_multiple_csv_files(self):         csv_files = []         return csv_files   In the aforementioned view, we utilize the Python Standard Library’s zipfile module for compressing and archiving data.   The zipfile.ZipFile method enables us to open a zip file for writing. In this instance, the file is a binary I/O object, specified as temp_file_opened, with the temp_file object being its file-like equivalent.   class zipfile.ZipFile(     file, mode='r', compression=ZIP_STORED,     allowZip64=True, compresslevel=None,     *, strict_timestamps=True )   We utilize a context manager via the \"with\" statement to guarantee the closure of our zip file after the suite within the “with” block has been executed, even if an exception is raised.   temp_file = io.BytesIO() with zipfile.ZipFile(     temp_file, \"w\", zipfile.ZIP_DEFLATED ) as temp_file_opened:     # write to zip file   Within the context manager, we write the CSV content file to the zip temp_file_opened using the writestr method.   ZipFile.writestr(     zinfo_or_arcname, data,     compress_type=None, compresslevel=None )   Here, we specify two mandatory parameters - zinfo_or_arcname and data.   temp_file_opened.writestr(     f\"File_library_{file['lib']}.csv\",     file[\"csv_file\"].getvalue() )   Once we have completed writing multiple CSV files, we locate the zip file by using seek. We then convert the file-like objects to an iterator using FileWrapper before returning them in the StreamingHttpResponse.   At this stage, we can download an empty file named “Libraries.zip”.   Build CSV files   As shown, we have defined a method named \"build_multiple_csv_files\" that currently returns an empty list. In the following step, we will add the code to this function to generate a list of CSV files.   class ExportLibraries(APIView):     header_data = {         \"name\": \"Name\",         \"library\": \"Library Name\"     }      def get(self):         ...         return response      def build_multiple_csv_files(self, libraries, books):         csv_files = []          for library in libraries.iterator():             mem_file = io.StringIO()             writer = csv.DictWriter(                 mem_file, fieldnames=self.header_data.keys()             )             writer.writerow(self.header_data)              books_in_library = books.filter(libraries__in=[library.id])             for book in books_in_library:                 book_row = self.build_book_row(book, library)                 writer.writerow(book_row)              mem_file.seek(0)              csv_files.append({                 \"library_name\": library.name,                 \"csv_file\": mem_file             })          return csv_files      def build_book_row(self, book, library):         row = self.header_data.copy()          row[\"name\"] = book.name         row[\"library\"] = library.name          return row   Reviewing the code above, we iterate over all libraries and construct a CSV file for each one. This is achieved by initializing a writer object using csv.DictWriter() and the keys from header_data.   Here is an example of what header_data might look like:   header_data = {     \"name\": \"Book Name\",     \"library\": \"Library Name\" }   Next, we add the header to the writer and utilize a loop to add each book row by row to the writer using the .write_row() method.   Once the writing is complete, we append an object for each library, with the library’s name included in the object’s name, to help establish the CSV filename along with the file’s contents.   To enable export functionality, you may add this view to the URLs file.   urlpatterns = [     path(         'export_libraries/',         ExportLibraries.as_view(),         name=\"export_libraries\"     ) ]   Unit Test   The following question is how to verify the output?   It is recommended to carry out this step before implementing the logic, as per the TDD (Test Driven Development) approach. However, I will demonstrate how the logic works first, as it may help you better understand which components require testing.   I intend to create two unit tests for this:   One for the API: Upon calling the API, a zip file should be exported. One for the CSV files and their contents: Calling build_multiple_csv_files() on the view should return a list containing data for each library. At this stage, the content of each CSV file can also be verified row by row.   NOTE: Please keep in mind that the sample unit tests provided below are solely intended to provide an idea of what they may look like, and you should adapt them according to your specific feature.   Test content response   This unit test is straightforward; we only need to verify that the API call returns a 200 status code and that the exported file is a zip file with the expected name.   def test_export_libraries(self):     response = self.client.get(reverse('export_libraries'))     assert response.status_code is status.HTTP_200_OK     assert response.get('Content-Disposition') == \"Libraries.zip\"   Test view function to get multiple CSV files   def test_build_csvs_files(self):     # assume we mock 2 libraries     # library_1, library_2     # queryset is books and libraries     view = ExportRecipesCost()     view.request = drf_request_for_context(self.user)     csv_files = view.build_multiple_csv_files(         libraries, books     )     # check number of csv files     assert len(csv_files) == 2     # first csv file     assert csv_files[0][\"library_name\"] == library_1.name     assert csv_files[0][\"csv_file\"]     # go check csv content in first file here      # second csv file     assert csv_files[0][\"library_name\"] == library_2.name     assert csv_files[0][\"csv_file\"]     # go check csv content in first file here   I have added some comments in the code to indicate the data we will use for testing. Our approach is to call the view function using a mock DRF request, created using the drf_request_for_context utility function.   In addition to checking the number of CSV files returned, we can also verify the content of each CSV file based on its header.   Optimizing performance   To improve performance, we can optimize the current solution by using a single loop to prepare all the books data, regardless of the library it belongs to, and then loop through the libraries using this set of data. This approach can significantly reduce processing time.   Instead of solely relying on Django queries, one could use Pandas to flatten the data and make the export process even easier by working with dataframes.   Another improvement could be to handle the export process as a background task, such as a Celery task. Instead of using StreamingHttpResponse to download the file from the browser, we can upload the zip file to a service like S3 and provide the user with a URL or other means of accessing the file. This approach can improve user experience and prevent timeout errors when handling large amounts of data.   (If you have any other ideas for improving performance, please share them with me.)   Final word   To summarize, we have explored a method (referred to as “use Django queries”) for exporting a zip file containing multiple CSV files within a Django application. While there is an alternative approach using pandas to export data from a Django app, we may discuss it in the future.  ","categories": ["django"],
        "tags": [],
        "url": "/django/export-multiple-csv-to-zip-django/",
        "teaser": null
      },{
        "title": "Relation fields in Django Rest Framework Serializer",
        "excerpt":" The Django model offers various types of relationships such as OneToOneField, ForeignKey, ManyToManyField, and GenericForeignKey.   To present or write data of relationship in a serializer, you can utilize DRF Relation fields.   In this post, I will summarize the key points of relational fields and then delve into customizing a relation field to facilitate reading and writing relationship data.   Although the official document mentions this custom relational topic, it lacks examples and use cases. Therefore, I aim to make it more practical by providing relevant illustrations.   Before we delve into the content, let’s take a look at the relevant models:   class Album(models.Model):     album_name = models.CharField(max_length=100)  class Track(models.Model):     album = models.ForeignKey(         Album,         related_name='tracks',         on_delete=models.CASCADE     )     title = models.CharField(max_length=100)     duration = models.IntegerField()   Performance concerns related to relation fields and the responsibility of developers   When using Django REST Framework (DRF), it is important to note that DRF does not automatically optimize the queryset that is passed to the serializer.   It is the responsibility of the developer to optimize the performance of relation fields in DRF. By using methods like prefetch_related and select_related, developers can improve the efficiency of their queries and enhance the overall performance of their applications.   With above models, if we have AlbumSerializer:   class AlbumSerializer(serializers.ModelSerializer):     tracks = serializers.StringRelatedField(many=True)       class Meta:         model = Album         fields = ['album_name', 'tracks']  data = AlbumSerializer(Album.objects.all(), many=True).data   then serializer all albums as above.   This cause serious performance issues since it will hit database N times with N is total number of albums.   It is important to address the issue of hitting the database multiple times, which can cause serious performance issues.   By using Album.objects.prefetch_related('tracks') , developers can optimize the performance by fetching the related tracks in a single database query. This reduces the number of round trips to the database and improves the overall performance of the serializer.   Relation fields readonly built-in   DRF provides relation fields readonly includes:   – StringRelatedField   – HyperlinkedIdentityField   Relation fields read-write built-in   DRF provides relation fields read-write includes:   – PrimaryKeyRelatedField   – HyperlinkedRelatedField   – SlugRelatedField   If you want these readonly, add param read_only=True in the field.   For mor detail about these built-in fields, please read the official document.   Nested serializer   For nested relationship, you could use its own serializer. By default, nested serializer is readonly.   For example, Track has serializer TrackSerializer then could use:   tracks = TrackSerializer(many=True, read_only=True)   Above is how to present data. If you want to write into nested relationship, you could use method create() or update() to write.   For example, when create an album, you also want to write tracks, then:   def create(self, validated_data):     tracks_data = validated_data.pop('tracks')     album = Album.objects.create(**validated_data)     for track_data in tracks_data:         Track.objects.create(album=album, **track_data)      return album   Custom relation fields  In some case, all above options not fit your needs. You could write a custom relation fields to handle.   Example 1: Custom presentation  For this example, take a look on document where create a custom relation field named “TrackListingField” extends from “serializers.RelatedField” then override method “to_representation“   Example 2: Read-write relation fields with nested serializer  For this example, let’s start with this context:   I have class TrackSerializer as above on nested serializer, but I don’t want it just use for readonly by default, I want a read-write relation fields which could help me read and write in clean way.   From the guide, I will implement “.to_internal_value()” method to help it could be writable. And implement “.to_representation()” method to present the data.   So, it could look like this:   class CustomRelatedField(serializers.RelatedField):     \"\"\"Custom Related Field for Read and Write\"\"\"      def to_representation(self, value):         pass      def to_internal_value(self, data):         pass   Implement to_presentation method   As I want to use serializer class to present the data, then will need a way to get the serializer class from input of the field, then I decided to put it as a part of keyword arguments kwargs.   Above class could be like this:   class CustomRelatedField(serializers.RelatedField):     \"\"\"Related Field with Serializer Class for presentation\"\"\"      def __init__(self, **kwargs):         self.serializer_class = kwargs.pop(\"serializer_class\")         if not self.serializer_class:             raise ValueError(\"serializer_class is required\")          super().__init__(**kwargs)      def to_representation(self, value):         return self.serializer_class(value).data   As above, we able to present object with nested serializer class.   Implement to_internal_value method   To help the relation field writable, to_internal_value must be implement. Because this method help decide the data to write to relation models.   There are 2 case of relationships here should be concern:   – ForeignKey in model stands for 1 to many relation   – ManyToManyField in model stands for many to many relation   As example of this post, the tracks belong to 1 to many relations.   One album able to have multiple tracks and 1 track belong to 1 album.   1 to many relation   As 1-n relation, I could get the album by id and set it as value to the write.   The to_internal_value could looks like:   def to_internal_value(self, data):     return self.get_queryset().get(uuid=data)  Then we have full custom relation fields for a ForeignKey field as FKRelationField below:   class ForeignKeyRelationField(serializers.RelatedField):     \"\"\"Related Field with Serializer Class for presentation\"\"\"      def __init__(self, **kwargs):         self.serializer_class = kwargs.pop(\"serializer_class\")         super().__init__(**kwargs)      def to_representation(self, value):         return self.serializer_class(value).data      def to_internal_value(self, data):         return self.get_queryset().get(uuid=data)   I changed the name class from “CustomRelatedField” to “ForeignKeyRelationField” in this case.   many to many relation   Many to many relation will similar to FK with minor change of internal value will be a list of ids instead of single object then each object will return an id instead.   def to_internal_value(self, data):     return self.get_queryset().get(uuid=data).id   You could named this field ManyToManyRelationField.   Using custom relation field   As above example, I could use my ForeignKeyRelationField on TrackSerializer to read and write the album   class TrackSerializer(serializers.ModelSerializer):     class Meta:         model = Track         fields = ['title', 'album']      album = ForeignKeyRelatedField(         many=False,         queryset=Album.objects.all(),         serializer_class=AlbumSerializer,     )   Above serializer could help represent album with nested serializer AlbumSerializer as well as write the album of a track.   And for “tracks” in AlbumSerializer, could use ManyToManyFieldRelationField to read and write for relation many to many.   class AlbumSerializer(serializers.ModelSerializer):      class Meta:         model = Album         fields = ['album_name', 'tracks']      tracks = ManyManyKeyRelatedField(         many=True,         required=False,         queryset=Track.objects.all(),         serializer_class=TrackSerializer,     )   In this post, I have give you more detail of relational fields and how to custom a relation fields.  ","categories": ["django"],
        "tags": [],
        "url": "/django/relation-fields-in-drf-serializer/",
        "teaser": null
      },{
        "title": "Chocolate Chip Cookies",
        "excerpt":"A chocolate chip cookie is a drop cookie that originated in the United States and features chocolate chips as its distinguishing ingredient.   The traditional recipe combines a dough composed of butter and both brown and white sugar with semi-sweet chocolate chips. Variations include recipes with other types of chocolate as well as additional ingredients such as nuts or oatmeal.   This recipe makes 4 dozen cookies.   Ingredients      2 1/4 cups all-purpose flour   1 teaspoon baking soda   1/2 teaspoon salt   1 cup butter, softened and cut to pieces   1 cup sugar   1 cup light brown sugar, packed   2 teaspoons vanilla extract   2 large eggs   2 cups semi-sweet chocolate chips   1/2 teaspoon nutmeg (optional)   1 cup chopped pecans or walnuts (optional)   Directions      Preheat the oven to 350 F.   In a medium bowl, whisk flour with baking soda, nutmeg and salt.   In a large bowl, beat butter with sugar and brown sugar until creamy and light. Add vanilla and eggs, one at a time, and mix until incorporated.   Gradually add dry mixture into the butter-sugar wet blend, mixing with a spatula until combined. Add chocolate chips and nuts until just mixed.   Drop tablespoon-sized clumps onto un-greased cookie sheets. Bake for 8-12 minutes, or until pale brown. Allow to cool on the pan for a minute or three, then transfer cookies to a wire rack to finish cooling.  ","categories": [],
        "tags": [],
        "url": "/recipes/chocolate-chip-cookies/",
        "teaser": null
      },{
        "title": "Oatmeal Cookies",
        "excerpt":"Oatmeal cookies are a proverbial favorite with both kids and adults. This crisp and chewy cookie is loaded with oats, dried fruit, and chopped nuts.   Ingredients      1 cup butter, softened 1 cup white sugar   1 cup packed brown sugar   2 eggs   1 teaspoon vanilla extract   2 cups all-purpose flour   1 teaspoon baking soda   1 teaspoon salt   1 1/2 teaspoons ground cinnamon   3 cups quick cooking oats   Directions      In a medium bowl, cream together butter, white sugar, and brown sugar. Beat in eggs one at a time, then stir in vanilla. Combine flour, baking soda, salt, and cinnamon; stir into the creamed mixture. Mix in oats. Cover, and chill dough for at least one hour.   Preheat the oven to 375 degrees F (190 degrees C). Grease cookie sheets. Roll the dough into walnut sized balls, and place 2 inches apart on cookie sheets. Flatten each cookie with a large fork dipped in sugar.   Bake for 8 to 10 minutes in preheated oven. Allow cookies to cool on baking sheet for 5 minutes before transferring to a wire rack to cool completely.  ","categories": [],
        "tags": [],
        "url": "/recipes/oatmeal-cookies/",
        "teaser": null
      },{
        "title": "Peanut Butter Cookies",
        "excerpt":"A peanut butter cookie is a type of cookie that is distinguished for having peanut butter as a principal ingredient. The cookie generally originated in the United States, its development dating back to the 1910s.   Ingredients      1 cup unsalted butter   1 cup crunchy peanut butter   1 cup white sugar   1 cup packed brown sugar   2 eggs 2   1/2 cups all-purpose flour   1 teaspoon baking powder   1/2 teaspoon salt   1 1/2 teaspoons baking soda   Directions      Cream butter, peanut butter, and sugars together in a bowl; beat in eggs.   In a separate bowl, sift flour, baking powder, baking soda, and salt; stir into butter mixture. Put dough in refrigerator for 1 hour.   Roll dough into 1 inch balls and put on baking sheets. Flatten each ball with a fork, making a crisscross pattern. Bake in a preheated 375 degrees F oven for about 10 minutes or until cookies begin to brown.  ","categories": [],
        "tags": [],
        "url": "/recipes/peanut-butter-cookies/",
        "teaser": null
      }]
